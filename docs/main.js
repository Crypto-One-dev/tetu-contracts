!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(e,n){
/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
var a=Object.freeze({});function i(e){return null==e}function s(e){return null!=e}function r(e){return!0===e}function o(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function u(e){return null!==e&&"object"==typeof e}var p=Object.prototype.toString;function l(e){return"[object Object]"===p.call(e)}function d(e){return"[object RegExp]"===p.call(e)}function y(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function c(e){return s(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function m(e){return null==e?"":Array.isArray(e)||l(e)&&e.toString===p?JSON.stringify(e,null,2):String(e)}function f(e){var t=parseFloat(e);return isNaN(t)?e:t}function T(e,t){for(var n=Object.create(null),a=e.split(","),i=0;i<a.length;i++)n[a[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var b=T("slot,component",!0),v=T("key,ref,slot,slot-scope,is");function g(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var h=Object.prototype.hasOwnProperty;function w(e,t){return h.call(e,t)}function M(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var k=/-(\w)/g,_=M((function(e){return e.replace(k,(function(e,t){return t?t.toUpperCase():""}))})),C=M((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),S=/\B([A-Z])/g,R=M((function(e){return e.replace(S,"-$1").toLowerCase()}));var A=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var a=arguments.length;return a?a>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function x(e,t){t=t||0;for(var n=e.length-t,a=new Array(n);n--;)a[n]=e[n+t];return a}function I(e,t){for(var n in t)e[n]=t[n];return e}function P(e){for(var t={},n=0;n<e.length;n++)e[n]&&I(t,e[n]);return t}function V(e,t,n){}var E=function(e,t,n){return!1},B=function(e){return e};function U(e,t){if(e===t)return!0;var n=u(e),a=u(t);if(!n||!a)return!n&&!a&&String(e)===String(t);try{var i=Array.isArray(e),s=Array.isArray(t);if(i&&s)return e.length===t.length&&e.every((function(e,n){return U(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||s)return!1;var r=Object.keys(e),o=Object.keys(t);return r.length===o.length&&r.every((function(n){return U(e[n],t[n])}))}catch(e){return!1}}function O(e,t){for(var n=0;n<e.length;n++)if(U(e[n],t))return n;return-1}function F(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var L=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],D={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:E,isReservedAttr:E,isUnknownElement:E,getTagNamespace:V,parsePlatformTagName:B,mustUseProp:E,async:!0,_lifecycleHooks:N},W=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function $(e,t,n,a){Object.defineProperty(e,t,{value:n,enumerable:!!a,writable:!0,configurable:!0})}var z=new RegExp("[^"+W.source+".$_\\d]");var G,q="__proto__"in{},j="undefined"!=typeof window,K="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,Y=K&&WXEnvironment.platform.toLowerCase(),Q=j&&window.navigator.userAgent.toLowerCase(),X=Q&&/msie|trident/.test(Q),J=Q&&Q.indexOf("msie 9.0")>0,Z=Q&&Q.indexOf("edge/")>0,ee=(Q&&Q.indexOf("android"),Q&&/iphone|ipad|ipod|ios/.test(Q)||"ios"===Y),te=(Q&&/chrome\/\d+/.test(Q),Q&&/phantomjs/.test(Q),Q&&Q.match(/firefox\/(\d+)/)),ne={}.watch,ae=!1;if(j)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){ae=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var se=function(){return void 0===G&&(G=!j&&!K&&void 0!==e&&(e.process&&"server"===e.process.env.VUE_ENV)),G},re=j&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function oe(e){return"function"==typeof e&&/native code/.test(e.toString())}var ue,pe="undefined"!=typeof Symbol&&oe(Symbol)&&"undefined"!=typeof Reflect&&oe(Reflect.ownKeys);ue="undefined"!=typeof Set&&oe(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var le=V,de=0,ye=function(){this.id=de++,this.subs=[]};ye.prototype.addSub=function(e){this.subs.push(e)},ye.prototype.removeSub=function(e){g(this.subs,e)},ye.prototype.depend=function(){ye.target&&ye.target.addDep(this)},ye.prototype.notify=function(){var e=this.subs.slice();for(var t=0,n=e.length;t<n;t++)e[t].update()},ye.target=null;var ce=[];function me(e){ce.push(e),ye.target=e}function fe(){ce.pop(),ye.target=ce[ce.length-1]}var Te=function(e,t,n,a,i,s,r,o){this.tag=e,this.data=t,this.children=n,this.text=a,this.elm=i,this.ns=void 0,this.context=s,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=o,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},be={child:{configurable:!0}};be.child.get=function(){return this.componentInstance},Object.defineProperties(Te.prototype,be);var ve=function(e){void 0===e&&(e="");var t=new Te;return t.text=e,t.isComment=!0,t};function ge(e){return new Te(void 0,void 0,void 0,String(e))}function he(e){var t=new Te(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var we=Array.prototype,Me=Object.create(we);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=we[e];$(Me,e,(function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];var i,s=t.apply(this,n),r=this.__ob__;switch(e){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&r.observeArray(i),r.dep.notify(),s}))}));var ke=Object.getOwnPropertyNames(Me),_e=!0;function Ce(e){_e=e}var Se=function(e){this.value=e,this.dep=new ye,this.vmCount=0,$(e,"__ob__",this),Array.isArray(e)?(q?function(e,t){e.__proto__=t}(e,Me):function(e,t,n){for(var a=0,i=n.length;a<i;a++){var s=n[a];$(e,s,t[s])}}(e,Me,ke),this.observeArray(e)):this.walk(e)};function Re(e,t){var n;if(u(e)&&!(e instanceof Te))return w(e,"__ob__")&&e.__ob__ instanceof Se?n=e.__ob__:_e&&!se()&&(Array.isArray(e)||l(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Se(e)),t&&n&&n.vmCount++,n}function Ae(e,t,n,a,i){var s=new ye,r=Object.getOwnPropertyDescriptor(e,t);if(!r||!1!==r.configurable){var o=r&&r.get,u=r&&r.set;o&&!u||2!==arguments.length||(n=e[t]);var p=!i&&Re(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=o?o.call(e):n;return ye.target&&(s.depend(),p&&(p.dep.depend(),Array.isArray(t)&&Pe(t))),t},set:function(t){var a=o?o.call(e):n;t===a||t!=t&&a!=a||o&&!u||(u?u.call(e,t):n=t,p=!i&&Re(t),s.notify())}})}}function xe(e,t,n){if(Array.isArray(e)&&y(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var a=e.__ob__;return e._isVue||a&&a.vmCount?n:a?(Ae(a.value,t,n),a.dep.notify(),n):(e[t]=n,n)}function Ie(e,t){if(Array.isArray(e)&&y(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||w(e,t)&&(delete e[t],n&&n.dep.notify())}}function Pe(e){for(var t=void 0,n=0,a=e.length;n<a;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Pe(t)}Se.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ae(e,t[n])},Se.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Re(e[t])};var Ve=D.optionMergeStrategies;function Ee(e,t){if(!t)return e;for(var n,a,i,s=pe?Reflect.ownKeys(t):Object.keys(t),r=0;r<s.length;r++)"__ob__"!==(n=s[r])&&(a=e[n],i=t[n],w(e,n)?a!==i&&l(a)&&l(i)&&Ee(a,i):xe(e,n,i));return e}function Be(e,t,n){return n?function(){var a="function"==typeof t?t.call(n,n):t,i="function"==typeof e?e.call(n,n):e;return a?Ee(a,i):i}:t?e?function(){return Ee("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Ue(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Oe(e,t,n,a){var i=Object.create(e||null);return t?I(i,t):i}Ve.data=function(e,t,n){return n?Be(e,t,n):t&&"function"!=typeof t?e:Be(e,t)},N.forEach((function(e){Ve[e]=Ue})),L.forEach((function(e){Ve[e+"s"]=Oe})),Ve.watch=function(e,t,n,a){if(e===ne&&(e=void 0),t===ne&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var i={};for(var s in I(i,e),t){var r=i[s],o=t[s];r&&!Array.isArray(r)&&(r=[r]),i[s]=r?r.concat(o):Array.isArray(o)?o:[o]}return i},Ve.props=Ve.methods=Ve.inject=Ve.computed=function(e,t,n,a){if(!e)return t;var i=Object.create(null);return I(i,e),t&&I(i,t),i},Ve.provide=Be;var Fe=function(e,t){return void 0===t?e:t};function Le(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var a,i,s={};if(Array.isArray(n))for(a=n.length;a--;)"string"==typeof(i=n[a])&&(s[_(i)]={type:null});else if(l(n))for(var r in n)i=n[r],s[_(r)]=l(i)?i:{type:i};else 0;e.props=s}}(t),function(e,t){var n=e.inject;if(n){var a=e.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)a[n[i]]={from:n[i]};else if(l(n))for(var s in n){var r=n[s];a[s]=l(r)?I({from:s},r):{from:r}}else 0}}(t),function(e){var t=e.directives;if(t)for(var n in t){var a=t[n];"function"==typeof a&&(t[n]={bind:a,update:a})}}(t),!t._base&&(t.extends&&(e=Le(e,t.extends,n)),t.mixins))for(var a=0,i=t.mixins.length;a<i;a++)e=Le(e,t.mixins[a],n);var s,r={};for(s in e)o(s);for(s in t)w(e,s)||o(s);function o(a){var i=Ve[a]||Fe;r[a]=i(e[a],t[a],n,a)}return r}function Ne(e,t,n,a){if("string"==typeof n){var i=e[t];if(w(i,n))return i[n];var s=_(n);if(w(i,s))return i[s];var r=C(s);return w(i,r)?i[r]:i[n]||i[s]||i[r]}}function De(e,t,n,a){var i=t[e],s=!w(n,e),r=n[e],o=ze(Boolean,i.type);if(o>-1)if(s&&!w(i,"default"))r=!1;else if(""===r||r===R(e)){var u=ze(String,i.type);(u<0||o<u)&&(r=!0)}if(void 0===r){r=function(e,t,n){if(!w(t,"default"))return;var a=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof a&&"Function"!==He(t.type)?a.call(e):a}(a,i,e);var p=_e;Ce(!0),Re(r),Ce(p)}return r}var We=/^\s*function (\w+)/;function He(e){var t=e&&e.toString().match(We);return t?t[1]:""}function $e(e,t){return He(e)===He(t)}function ze(e,t){if(!Array.isArray(t))return $e(t,e)?0:-1;for(var n=0,a=t.length;n<a;n++)if($e(t[n],e))return n;return-1}function Ge(e,t,n){me();try{if(t)for(var a=t;a=a.$parent;){var i=a.$options.errorCaptured;if(i)for(var s=0;s<i.length;s++)try{if(!1===i[s].call(a,e,t,n))return}catch(e){je(e,a,"errorCaptured hook")}}je(e,t,n)}finally{fe()}}function qe(e,t,n,a,i){var s;try{(s=n?e.apply(t,n):e.call(t))&&!s._isVue&&c(s)&&!s._handled&&(s.catch((function(e){return Ge(e,a,i+" (Promise/async)")})),s._handled=!0)}catch(e){Ge(e,a,i)}return s}function je(e,t,n){if(D.errorHandler)try{return D.errorHandler.call(null,e,t,n)}catch(t){t!==e&&Ke(t,null,"config.errorHandler")}Ke(e,t,n)}function Ke(e,t,n){if(!j&&!K||"undefined"==typeof console)throw e;console.error(e)}var Ye,Qe=!1,Xe=[],Je=!1;function Ze(){Je=!1;var e=Xe.slice(0);Xe.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&oe(Promise)){var et=Promise.resolve();Ye=function(){et.then(Ze),ee&&setTimeout(V)},Qe=!0}else if(X||"undefined"==typeof MutationObserver||!oe(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ye=void 0!==n&&oe(n)?function(){n(Ze)}:function(){setTimeout(Ze,0)};else{var tt=1,nt=new MutationObserver(Ze),at=document.createTextNode(String(tt));nt.observe(at,{characterData:!0}),Ye=function(){tt=(tt+1)%2,at.data=String(tt)},Qe=!0}function it(e,t){var n;if(Xe.push((function(){if(e)try{e.call(t)}catch(e){Ge(e,t,"nextTick")}else n&&n(t)})),Je||(Je=!0,Ye()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var st=new ue;function rt(e){!function e(t,n){var a,i,s=Array.isArray(t);if(!s&&!u(t)||Object.isFrozen(t)||t instanceof Te)return;if(t.__ob__){var r=t.__ob__.dep.id;if(n.has(r))return;n.add(r)}if(s)for(a=t.length;a--;)e(t[a],n);else for(i=Object.keys(t),a=i.length;a--;)e(t[i[a]],n)}(e,st),st.clear()}var ot=M((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),a="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:n,capture:a,passive:t}}));function ut(e,t){function n(){var e=arguments,a=n.fns;if(!Array.isArray(a))return qe(a,null,arguments,t,"v-on handler");for(var i=a.slice(),s=0;s<i.length;s++)qe(i[s],null,e,t,"v-on handler")}return n.fns=e,n}function pt(e,t,n,a,s,o){var u,p,l,d;for(u in e)p=e[u],l=t[u],d=ot(u),i(p)||(i(l)?(i(p.fns)&&(p=e[u]=ut(p,o)),r(d.once)&&(p=e[u]=s(d.name,p,d.capture)),n(d.name,p,d.capture,d.passive,d.params)):p!==l&&(l.fns=p,e[u]=l));for(u in t)i(e[u])&&a((d=ot(u)).name,t[u],d.capture)}function lt(e,t,n){var a;e instanceof Te&&(e=e.data.hook||(e.data.hook={}));var o=e[t];function u(){n.apply(this,arguments),g(a.fns,u)}i(o)?a=ut([u]):s(o.fns)&&r(o.merged)?(a=o).fns.push(u):a=ut([o,u]),a.merged=!0,e[t]=a}function dt(e,t,n,a,i){if(s(t)){if(w(t,n))return e[n]=t[n],i||delete t[n],!0;if(w(t,a))return e[n]=t[a],i||delete t[a],!0}return!1}function yt(e){return o(e)?[ge(e)]:Array.isArray(e)?function e(t,n){var a,u,p,l,d=[];for(a=0;a<t.length;a++)i(u=t[a])||"boolean"==typeof u||(p=d.length-1,l=d[p],Array.isArray(u)?u.length>0&&(ct((u=e(u,(n||"")+"_"+a))[0])&&ct(l)&&(d[p]=ge(l.text+u[0].text),u.shift()),d.push.apply(d,u)):o(u)?ct(l)?d[p]=ge(l.text+u):""!==u&&d.push(ge(u)):ct(u)&&ct(l)?d[p]=ge(l.text+u.text):(r(t._isVList)&&s(u.tag)&&i(u.key)&&s(n)&&(u.key="__vlist"+n+"_"+a+"__"),d.push(u)));return d}(e):void 0}function ct(e){return s(e)&&s(e.text)&&!1===e.isComment}function mt(e,t){if(e){for(var n=Object.create(null),a=pe?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++){var s=a[i];if("__ob__"!==s){for(var r=e[s].from,o=t;o;){if(o._provided&&w(o._provided,r)){n[s]=o._provided[r];break}o=o.$parent}if(!o)if("default"in e[s]){var u=e[s].default;n[s]="function"==typeof u?u.call(t):u}else 0}}return n}}function ft(e,t){if(!e||!e.length)return{};for(var n={},a=0,i=e.length;a<i;a++){var s=e[a],r=s.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,s.context!==t&&s.fnContext!==t||!r||null==r.slot)(n.default||(n.default=[])).push(s);else{var o=r.slot,u=n[o]||(n[o]=[]);"template"===s.tag?u.push.apply(u,s.children||[]):u.push(s)}}for(var p in n)n[p].every(Tt)&&delete n[p];return n}function Tt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function bt(e){return e.isComment&&e.asyncFactory}function vt(e,t,n){var i,s=Object.keys(t).length>0,r=e?!!e.$stable:!s,o=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(r&&n&&n!==a&&o===n.$key&&!s&&!n.$hasNormal)return n;for(var u in i={},e)e[u]&&"$"!==u[0]&&(i[u]=gt(t,u,e[u]))}else i={};for(var p in t)p in i||(i[p]=ht(t,p));return e&&Object.isExtensible(e)&&(e._normalized=i),$(i,"$stable",r),$(i,"$key",o),$(i,"$hasNormal",s),i}function gt(e,t,n){var a=function(){var e=arguments.length?n.apply(null,arguments):n({}),t=(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:yt(e))&&e[0];return e&&(!t||1===e.length&&t.isComment&&!bt(t))?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:a,enumerable:!0,configurable:!0}),a}function ht(e,t){return function(){return e[t]}}function wt(e,t){var n,a,i,r,o;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),a=0,i=e.length;a<i;a++)n[a]=t(e[a],a);else if("number"==typeof e)for(n=new Array(e),a=0;a<e;a++)n[a]=t(a+1,a);else if(u(e))if(pe&&e[Symbol.iterator]){n=[];for(var p=e[Symbol.iterator](),l=p.next();!l.done;)n.push(t(l.value,n.length)),l=p.next()}else for(r=Object.keys(e),n=new Array(r.length),a=0,i=r.length;a<i;a++)o=r[a],n[a]=t(e[o],o,a);return s(n)||(n=[]),n._isVList=!0,n}function Mt(e,t,n,a){var i,s=this.$scopedSlots[e];s?(n=n||{},a&&(n=I(I({},a),n)),i=s(n)||("function"==typeof t?t():t)):i=this.$slots[e]||("function"==typeof t?t():t);var r=n&&n.slot;return r?this.$createElement("template",{slot:r},i):i}function kt(e){return Ne(this.$options,"filters",e)||B}function _t(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function Ct(e,t,n,a,i){var s=D.keyCodes[t]||n;return i&&a&&!D.keyCodes[t]?_t(i,a):s?_t(s,e):a?R(a)!==t:void 0===e}function St(e,t,n,a,i){if(n)if(u(n)){var s;Array.isArray(n)&&(n=P(n));var r=function(r){if("class"===r||"style"===r||v(r))s=e;else{var o=e.attrs&&e.attrs.type;s=a||D.mustUseProp(t,o,r)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var u=_(r),p=R(r);u in s||p in s||(s[r]=n[r],i&&((e.on||(e.on={}))["update:"+r]=function(e){n[r]=e}))};for(var o in n)r(o)}else;return e}function Rt(e,t){var n=this._staticTrees||(this._staticTrees=[]),a=n[e];return a&&!t||xt(a=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),a}function At(e,t,n){return xt(e,"__once__"+t+(n?"_"+n:""),!0),e}function xt(e,t,n){if(Array.isArray(e))for(var a=0;a<e.length;a++)e[a]&&"string"!=typeof e[a]&&It(e[a],t+"_"+a,n);else It(e,t,n)}function It(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function Pt(e,t){if(t)if(l(t)){var n=e.on=e.on?I({},e.on):{};for(var a in t){var i=n[a],s=t[a];n[a]=i?[].concat(i,s):s}}else;return e}function Vt(e,t,n,a){t=t||{$stable:!n};for(var i=0;i<e.length;i++){var s=e[i];Array.isArray(s)?Vt(s,t,n):s&&(s.proxy&&(s.fn.proxy=!0),t[s.key]=s.fn)}return a&&(t.$key=a),t}function Et(e,t){for(var n=0;n<t.length;n+=2){var a=t[n];"string"==typeof a&&a&&(e[t[n]]=t[n+1])}return e}function Bt(e,t){return"string"==typeof e?t+e:e}function Ut(e){e._o=At,e._n=f,e._s=m,e._l=wt,e._t=Mt,e._q=U,e._i=O,e._m=Rt,e._f=kt,e._k=Ct,e._b=St,e._v=ge,e._e=ve,e._u=Vt,e._g=Pt,e._d=Et,e._p=Bt}function Ot(e,t,n,i,s){var o,u=this,p=s.options;w(i,"_uid")?(o=Object.create(i))._original=i:(o=i,i=i._original);var l=r(p._compiled),d=!l;this.data=e,this.props=t,this.children=n,this.parent=i,this.listeners=e.on||a,this.injections=mt(p.inject,i),this.slots=function(){return u.$slots||vt(e.scopedSlots,u.$slots=ft(n,i)),u.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return vt(e.scopedSlots,this.slots())}}),l&&(this.$options=p,this.$slots=this.slots(),this.$scopedSlots=vt(e.scopedSlots,this.$slots)),p._scopeId?this._c=function(e,t,n,a){var s=$t(o,e,t,n,a,d);return s&&!Array.isArray(s)&&(s.fnScopeId=p._scopeId,s.fnContext=i),s}:this._c=function(e,t,n,a){return $t(o,e,t,n,a,d)}}function Ft(e,t,n,a,i){var s=he(e);return s.fnContext=n,s.fnOptions=a,t.slot&&((s.data||(s.data={})).slot=t.slot),s}function Lt(e,t){for(var n in t)e[_(n)]=t[n]}Ut(Ot.prototype);var Nt={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;Nt.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},a=e.data.inlineTemplate;s(a)&&(n.render=a.render,n.staticRenderFns=a.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,Jt)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,i,s){0;var r=i.data.scopedSlots,o=e.$scopedSlots,u=!!(r&&!r.$stable||o!==a&&!o.$stable||r&&e.$scopedSlots.$key!==r.$key||!r&&e.$scopedSlots.$key),p=!!(s||e.$options._renderChildren||u);e.$options._parentVnode=i,e.$vnode=i,e._vnode&&(e._vnode.parent=i);if(e.$options._renderChildren=s,e.$attrs=i.data.attrs||a,e.$listeners=n||a,t&&e.$options.props){Ce(!1);for(var l=e._props,d=e.$options._propKeys||[],y=0;y<d.length;y++){var c=d[y],m=e.$options.props;l[c]=De(c,m,t,e)}Ce(!0),e.$options.propsData=t}n=n||a;var f=e.$options._parentListeners;e.$options._parentListeners=n,Xt(e,n,f),p&&(e.$slots=ft(s,i.context),e.$forceUpdate());0}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,nn(a,"mounted")),e.data.keepAlive&&(n._isMounted?((t=a)._inactive=!1,sn.push(t)):tn(a,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,en(t)))return;if(!t._inactive){t._inactive=!0;for(var a=0;a<t.$children.length;a++)e(t.$children[a]);nn(t,"deactivated")}}(t,!0):t.$destroy())}},Dt=Object.keys(Nt);function Wt(e,t,n,o,p){if(!i(e)){var l=n.$options._base;if(u(e)&&(e=l.extend(e)),"function"==typeof e){var d;if(i(e.cid)&&void 0===(e=function(e,t){if(r(e.error)&&s(e.errorComp))return e.errorComp;if(s(e.resolved))return e.resolved;var n=Gt;n&&s(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(r(e.loading)&&s(e.loadingComp))return e.loadingComp;if(n&&!s(e.owners)){var a=e.owners=[n],o=!0,p=null,l=null;n.$on("hook:destroyed",(function(){return g(a,n)}));var d=function(e){for(var t=0,n=a.length;t<n;t++)a[t].$forceUpdate();e&&(a.length=0,null!==p&&(clearTimeout(p),p=null),null!==l&&(clearTimeout(l),l=null))},y=F((function(n){e.resolved=qt(n,t),o?a.length=0:d(!0)})),m=F((function(t){s(e.errorComp)&&(e.error=!0,d(!0))})),f=e(y,m);return u(f)&&(c(f)?i(e.resolved)&&f.then(y,m):c(f.component)&&(f.component.then(y,m),s(f.error)&&(e.errorComp=qt(f.error,t)),s(f.loading)&&(e.loadingComp=qt(f.loading,t),0===f.delay?e.loading=!0:p=setTimeout((function(){p=null,i(e.resolved)&&i(e.error)&&(e.loading=!0,d(!1))}),f.delay||200)),s(f.timeout)&&(l=setTimeout((function(){l=null,i(e.resolved)&&m(null)}),f.timeout)))),o=!1,e.loading?e.loadingComp:e.resolved}}(d=e,l)))return function(e,t,n,a,i){var s=ve();return s.asyncFactory=e,s.asyncMeta={data:t,context:n,children:a,tag:i},s}(d,t,n,o,p);t=t||{},Cn(e),s(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",a=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var i=t.on||(t.on={}),r=i[a],o=t.model.callback;s(r)?(Array.isArray(r)?-1===r.indexOf(o):r!==o)&&(i[a]=[o].concat(r)):i[a]=o}(e.options,t);var y=function(e,t,n){var a=t.options.props;if(!i(a)){var r={},o=e.attrs,u=e.props;if(s(o)||s(u))for(var p in a){var l=R(p);dt(r,u,p,l,!0)||dt(r,o,p,l,!1)}return r}}(t,e);if(r(e.options.functional))return function(e,t,n,i,r){var o=e.options,u={},p=o.props;if(s(p))for(var l in p)u[l]=De(l,p,t||a);else s(n.attrs)&&Lt(u,n.attrs),s(n.props)&&Lt(u,n.props);var d=new Ot(n,u,r,i,e),y=o.render.call(null,d._c,d);if(y instanceof Te)return Ft(y,n,d.parent,o,d);if(Array.isArray(y)){for(var c=yt(y)||[],m=new Array(c.length),f=0;f<c.length;f++)m[f]=Ft(c[f],n,d.parent,o,d);return m}}(e,y,t,n,o);var m=t.on;if(t.on=t.nativeOn,r(e.options.abstract)){var f=t.slot;t={},f&&(t.slot=f)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Dt.length;n++){var a=Dt[n],i=t[a],s=Nt[a];i===s||i&&i._merged||(t[a]=i?Ht(s,i):s)}}(t);var T=e.options.name||p;return new Te("vue-component-"+e.cid+(T?"-"+T:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:y,listeners:m,tag:p,children:o},d)}}}function Ht(e,t){var n=function(n,a){e(n,a),t(n,a)};return n._merged=!0,n}function $t(e,t,n,a,p,l){return(Array.isArray(n)||o(n))&&(p=a,a=n,n=void 0),r(l)&&(p=2),function(e,t,n,a,o){if(s(n)&&s(n.__ob__))return ve();s(n)&&s(n.is)&&(t=n.is);if(!t)return ve();0;Array.isArray(a)&&"function"==typeof a[0]&&((n=n||{}).scopedSlots={default:a[0]},a.length=0);2===o?a=yt(a):1===o&&(a=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(a));var p,l;if("string"==typeof t){var d;l=e.$vnode&&e.$vnode.ns||D.getTagNamespace(t),p=D.isReservedTag(t)?new Te(D.parsePlatformTagName(t),n,a,void 0,void 0,e):n&&n.pre||!s(d=Ne(e.$options,"components",t))?new Te(t,n,a,void 0,void 0,e):Wt(d,n,e,a,t)}else p=Wt(t,n,e,a);return Array.isArray(p)?p:s(p)?(s(l)&&function e(t,n,a){t.ns=n,"foreignObject"===t.tag&&(n=void 0,a=!0);if(s(t.children))for(var o=0,u=t.children.length;o<u;o++){var p=t.children[o];s(p.tag)&&(i(p.ns)||r(a)&&"svg"!==p.tag)&&e(p,n,a)}}(p,l),s(n)&&function(e){u(e.style)&&rt(e.style);u(e.class)&&rt(e.class)}(n),p):ve()}(e,t,n,a,p)}var zt,Gt=null;function qt(e,t){return(e.__esModule||pe&&"Module"===e[Symbol.toStringTag])&&(e=e.default),u(e)?t.extend(e):e}function jt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(s(n)&&(s(n.componentOptions)||bt(n)))return n}}function Kt(e,t){zt.$on(e,t)}function Yt(e,t){zt.$off(e,t)}function Qt(e,t){var n=zt;return function a(){var i=t.apply(null,arguments);null!==i&&n.$off(e,a)}}function Xt(e,t,n){zt=e,pt(t,n||{},Kt,Yt,Qt,e),zt=void 0}var Jt=null;function Zt(e){var t=Jt;return Jt=e,function(){Jt=t}}function en(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function tn(e,t){if(t){if(e._directInactive=!1,en(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)tn(e.$children[n]);nn(e,"activated")}}function nn(e,t){me();var n=e.$options[t],a=t+" hook";if(n)for(var i=0,s=n.length;i<s;i++)qe(n[i],e,null,e,a);e._hasHookEvent&&e.$emit("hook:"+t),fe()}var an=[],sn=[],rn={},on=!1,un=!1,pn=0;var ln=0,dn=Date.now;if(j&&!X){var yn=window.performance;yn&&"function"==typeof yn.now&&dn()>document.createEvent("Event").timeStamp&&(dn=function(){return yn.now()})}function cn(){var e,t;for(ln=dn(),un=!0,an.sort((function(e,t){return e.id-t.id})),pn=0;pn<an.length;pn++)(e=an[pn]).before&&e.before(),t=e.id,rn[t]=null,e.run();var n=sn.slice(),a=an.slice();pn=an.length=sn.length=0,rn={},on=un=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,tn(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],a=n.vm;a._watcher===n&&a._isMounted&&!a._isDestroyed&&nn(a,"updated")}}(a),re&&D.devtools&&re.emit("flush")}var mn=0,fn=function(e,t,n,a,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++mn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!z.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=V)),this.value=this.lazy?void 0:this.get()};fn.prototype.get=function(){var e;me(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Ge(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&rt(e),fe(),this.cleanupDeps()}return e},fn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},fn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},fn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==rn[t]){if(rn[t]=!0,un){for(var n=an.length-1;n>pn&&an[n].id>e.id;)n--;an.splice(n+1,0,e)}else an.push(e);on||(on=!0,it(cn))}}(this)},fn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||u(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'+this.expression+'"';qe(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},fn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},fn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},fn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var Tn={enumerable:!0,configurable:!0,get:V,set:V};function bn(e,t,n){Tn.get=function(){return this[t][n]},Tn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Tn)}function vn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},a=e._props={},i=e.$options._propKeys=[];e.$parent&&Ce(!1);var s=function(s){i.push(s);var r=De(s,t,n,e);Ae(a,s,r),s in e||bn(e,"_props",s)};for(var r in t)s(r);Ce(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?V:A(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;l(t=e._data="function"==typeof t?function(e,t){me();try{return e.call(t,t)}catch(e){return Ge(e,t,"data()"),{}}finally{fe()}}(t,e):t||{})||(t={});var n=Object.keys(t),a=e.$options.props,i=(e.$options.methods,n.length);for(;i--;){var s=n[i];0,a&&w(a,s)||H(s)||bn(e,"_data",s)}Re(t,!0)}(e):Re(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),a=se();for(var i in t){var s=t[i],r="function"==typeof s?s:s.get;0,a||(n[i]=new fn(e,r||V,V,gn)),i in e||hn(e,i,s)}}(e,t.computed),t.watch&&t.watch!==ne&&function(e,t){for(var n in t){var a=t[n];if(Array.isArray(a))for(var i=0;i<a.length;i++)kn(e,n,a[i]);else kn(e,n,a)}}(e,t.watch)}var gn={lazy:!0};function hn(e,t,n){var a=!se();"function"==typeof n?(Tn.get=a?wn(t):Mn(n),Tn.set=V):(Tn.get=n.get?a&&!1!==n.cache?wn(t):Mn(n.get):V,Tn.set=n.set||V),Object.defineProperty(e,t,Tn)}function wn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ye.target&&t.depend(),t.value}}function Mn(e){return function(){return e.call(this,this)}}function kn(e,t,n,a){return l(n)&&(a=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,a)}var _n=0;function Cn(e){var t=e.options;if(e.super){var n=Cn(e.super);if(n!==e.superOptions){e.superOptions=n;var a=function(e){var t,n=e.options,a=e.sealedOptions;for(var i in n)n[i]!==a[i]&&(t||(t={}),t[i]=n[i]);return t}(e);a&&I(e.extendOptions,a),(t=e.options=Le(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Sn(e){this._init(e)}function Rn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,a=n.cid,i=e._Ctor||(e._Ctor={});if(i[a])return i[a];var s=e.name||n.options.name;var r=function(e){this._init(e)};return(r.prototype=Object.create(n.prototype)).constructor=r,r.cid=t++,r.options=Le(n.options,e),r.super=n,r.options.props&&function(e){var t=e.options.props;for(var n in t)bn(e.prototype,"_props",n)}(r),r.options.computed&&function(e){var t=e.options.computed;for(var n in t)hn(e.prototype,n,t[n])}(r),r.extend=n.extend,r.mixin=n.mixin,r.use=n.use,L.forEach((function(e){r[e]=n[e]})),s&&(r.options.components[s]=r),r.superOptions=n.options,r.extendOptions=e,r.sealedOptions=I({},r.options),i[a]=r,r}}function An(e){return e&&(e.Ctor.options.name||e.tag)}function xn(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!d(e)&&e.test(t)}function In(e,t){var n=e.cache,a=e.keys,i=e._vnode;for(var s in n){var r=n[s];if(r){var o=r.name;o&&!t(o)&&Pn(n,s,a,i)}}}function Pn(e,t,n,a){var i=e[t];!i||a&&i.tag===a.tag||i.componentInstance.$destroy(),e[t]=null,g(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=_n++,t._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),a=t._parentVnode;n.parent=t.parent,n._parentVnode=a;var i=a.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=Le(Cn(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Xt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,i=n&&n.context;e.$slots=ft(t._renderChildren,i),e.$scopedSlots=a,e._c=function(t,n,a,i){return $t(e,t,n,a,i,!1)},e.$createElement=function(t,n,a,i){return $t(e,t,n,a,i,!0)};var s=n&&n.data;Ae(e,"$attrs",s&&s.attrs||a,null,!0),Ae(e,"$listeners",t._parentListeners||a,null,!0)}(t),nn(t,"beforeCreate"),function(e){var t=mt(e.$options.inject,e);t&&(Ce(!1),Object.keys(t).forEach((function(n){Ae(e,n,t[n])})),Ce(!0))}(t),vn(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),nn(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(Sn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=xe,e.prototype.$delete=Ie,e.prototype.$watch=function(e,t,n){if(l(t))return kn(this,e,t,n);(n=n||{}).user=!0;var a=new fn(this,e,t,n);if(n.immediate){var i='callback for immediate watcher "'+a.expression+'"';me(),qe(t,this,[a.value],this,i),fe()}return function(){a.teardown()}}}(Sn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var a=this;if(Array.isArray(e))for(var i=0,s=e.length;i<s;i++)a.$on(e[i],n);else(a._events[e]||(a._events[e]=[])).push(n),t.test(e)&&(a._hasHookEvent=!0);return a},e.prototype.$once=function(e,t){var n=this;function a(){n.$off(e,a),t.apply(n,arguments)}return a.fn=t,n.$on(e,a),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var a=0,i=e.length;a<i;a++)n.$off(e[a],t);return n}var s,r=n._events[e];if(!r)return n;if(!t)return n._events[e]=null,n;for(var o=r.length;o--;)if((s=r[o])===t||s.fn===t){r.splice(o,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?x(n):n;for(var a=x(arguments,1),i='event handler for "'+e+'"',s=0,r=n.length;s<r;s++)qe(n[s],t,a,t,i)}return t}}(Sn),function(e){e.prototype._update=function(e,t){var n=this,a=n.$el,i=n._vnode,s=Zt(n);n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1),s(),a&&(a.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){nn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||g(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),nn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Sn),function(e){Ut(e.prototype),e.prototype.$nextTick=function(e){return it(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,a=n.render,i=n._parentVnode;i&&(t.$scopedSlots=vt(i.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=i;try{Gt=t,e=a.call(t._renderProxy,t.$createElement)}catch(n){Ge(n,t,"render"),e=t._vnode}finally{Gt=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof Te||(e=ve()),e.parent=i,e}}(Sn);var Vn=[String,RegExp,Array],En={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Vn,exclude:Vn,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,t=this.keys,n=this.vnodeToCache,a=this.keyToCache;if(n){var i=n.tag,s=n.componentInstance,r=n.componentOptions;e[a]={name:An(r),tag:i,componentInstance:s},t.push(a),this.max&&t.length>parseInt(this.max)&&Pn(e,t[0],t,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Pn(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){In(e,(function(e){return xn(t,e)}))})),this.$watch("exclude",(function(t){In(e,(function(e){return!xn(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=jt(e),n=t&&t.componentOptions;if(n){var a=An(n),i=this.include,s=this.exclude;if(i&&(!a||!xn(i,a))||s&&a&&xn(s,a))return t;var r=this.cache,o=this.keys,u=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;r[u]?(t.componentInstance=r[u].componentInstance,g(o,u),o.push(u)):(this.vnodeToCache=t,this.keyToCache=u),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return D}};Object.defineProperty(e,"config",t),e.util={warn:le,extend:I,mergeOptions:Le,defineReactive:Ae},e.set=xe,e.delete=Ie,e.nextTick=it,e.observable=function(e){return Re(e),e},e.options=Object.create(null),L.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,I(e.options.components,En),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=x(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Le(this.options,e),this}}(e),Rn(e),function(e){L.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&l(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(Sn),Object.defineProperty(Sn.prototype,"$isServer",{get:se}),Object.defineProperty(Sn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Sn,"FunctionalRenderContext",{value:Ot}),Sn.version="2.6.14";var Bn=T("style,class"),Un=T("input,textarea,option,select,progress"),On=function(e,t,n){return"value"===n&&Un(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Fn=T("contenteditable,draggable,spellcheck"),Ln=T("events,caret,typing,plaintext-only"),Nn=T("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Dn="http://www.w3.org/1999/xlink",Wn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Hn=function(e){return Wn(e)?e.slice(6,e.length):""},$n=function(e){return null==e||!1===e};function zn(e){for(var t=e.data,n=e,a=e;s(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(t=Gn(a.data,t));for(;s(n=n.parent);)n&&n.data&&(t=Gn(t,n.data));return function(e,t){if(s(e)||s(t))return qn(e,jn(t));return""}(t.staticClass,t.class)}function Gn(e,t){return{staticClass:qn(e.staticClass,t.staticClass),class:s(e.class)?[e.class,t.class]:t.class}}function qn(e,t){return e?t?e+" "+t:e:t||""}function jn(e){return Array.isArray(e)?function(e){for(var t,n="",a=0,i=e.length;a<i;a++)s(t=jn(e[a]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):u(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Kn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Yn=T("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Qn=T("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Xn=function(e){return Yn(e)||Qn(e)};function Jn(e){return Qn(e)?"svg":"math"===e?"math":void 0}var Zn=Object.create(null);var ea=T("text,number,password,search,email,tel,url");function ta(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}var na=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(Kn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),aa={create:function(e,t){ia(t)},update:function(e,t){e.data.ref!==t.data.ref&&(ia(e,!0),ia(t))},destroy:function(e){ia(e,!0)}};function ia(e,t){var n=e.data.ref;if(s(n)){var a=e.context,i=e.componentInstance||e.elm,r=a.$refs;t?Array.isArray(r[n])?g(r[n],i):r[n]===i&&(r[n]=void 0):e.data.refInFor?Array.isArray(r[n])?r[n].indexOf(i)<0&&r[n].push(i):r[n]=[i]:r[n]=i}}var sa=new Te("",{},[]),ra=["create","activate","update","remove","destroy"];function oa(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&s(e.data)===s(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,a=s(n=e.data)&&s(n=n.attrs)&&n.type,i=s(n=t.data)&&s(n=n.attrs)&&n.type;return a===i||ea(a)&&ea(i)}(e,t)||r(e.isAsyncPlaceholder)&&i(t.asyncFactory.error))}function ua(e,t,n){var a,i,r={};for(a=t;a<=n;++a)s(i=e[a].key)&&(r[i]=a);return r}var pa={create:la,update:la,destroy:function(e){la(e,sa)}};function la(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,a,i,s=e===sa,r=t===sa,o=ya(e.data.directives,e.context),u=ya(t.data.directives,t.context),p=[],l=[];for(n in u)a=o[n],i=u[n],a?(i.oldValue=a.value,i.oldArg=a.arg,ma(i,"update",t,e),i.def&&i.def.componentUpdated&&l.push(i)):(ma(i,"bind",t,e),i.def&&i.def.inserted&&p.push(i));if(p.length){var d=function(){for(var n=0;n<p.length;n++)ma(p[n],"inserted",t,e)};s?lt(t,"insert",d):d()}l.length&&lt(t,"postpatch",(function(){for(var n=0;n<l.length;n++)ma(l[n],"componentUpdated",t,e)}));if(!s)for(n in o)u[n]||ma(o[n],"unbind",e,e,r)}(e,t)}var da=Object.create(null);function ya(e,t){var n,a,i=Object.create(null);if(!e)return i;for(n=0;n<e.length;n++)(a=e[n]).modifiers||(a.modifiers=da),i[ca(a)]=a,a.def=Ne(t.$options,"directives",a.name);return i}function ca(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function ma(e,t,n,a,i){var s=e.def&&e.def[t];if(s)try{s(n.elm,e,n,a,i)}catch(a){Ge(a,n.context,"directive "+e.name+" "+t+" hook")}}var fa=[aa,pa];function Ta(e,t){var n=t.componentOptions;if(!(s(n)&&!1===n.Ctor.options.inheritAttrs||i(e.data.attrs)&&i(t.data.attrs))){var a,r,o=t.elm,u=e.data.attrs||{},p=t.data.attrs||{};for(a in s(p.__ob__)&&(p=t.data.attrs=I({},p)),p)r=p[a],u[a]!==r&&ba(o,a,r,t.data.pre);for(a in(X||Z)&&p.value!==u.value&&ba(o,"value",p.value),u)i(p[a])&&(Wn(a)?o.removeAttributeNS(Dn,Hn(a)):Fn(a)||o.removeAttribute(a))}}function ba(e,t,n,a){a||e.tagName.indexOf("-")>-1?va(e,t,n):Nn(t)?$n(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):Fn(t)?e.setAttribute(t,function(e,t){return $n(t)||"false"===t?"false":"contenteditable"===e&&Ln(t)?t:"true"}(t,n)):Wn(t)?$n(n)?e.removeAttributeNS(Dn,Hn(t)):e.setAttributeNS(Dn,t,n):va(e,t,n)}function va(e,t,n){if($n(n))e.removeAttribute(t);else{if(X&&!J&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var a=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(t,n)}}var ga={create:Ta,update:Ta};function ha(e,t){var n=t.elm,a=t.data,r=e.data;if(!(i(a.staticClass)&&i(a.class)&&(i(r)||i(r.staticClass)&&i(r.class)))){var o=zn(t),u=n._transitionClasses;s(u)&&(o=qn(o,jn(u))),o!==n._prevClass&&(n.setAttribute("class",o),n._prevClass=o)}}var wa,Ma,ka,_a,Ca,Sa,Ra={create:ha,update:ha},Aa=/[\w).+\-_$\]]/;function xa(e){var t,n,a,i,s,r=!1,o=!1,u=!1,p=!1,l=0,d=0,y=0,c=0;for(a=0;a<e.length;a++)if(n=t,t=e.charCodeAt(a),r)39===t&&92!==n&&(r=!1);else if(o)34===t&&92!==n&&(o=!1);else if(u)96===t&&92!==n&&(u=!1);else if(p)47===t&&92!==n&&(p=!1);else if(124!==t||124===e.charCodeAt(a+1)||124===e.charCodeAt(a-1)||l||d||y){switch(t){case 34:o=!0;break;case 39:r=!0;break;case 96:u=!0;break;case 40:y++;break;case 41:y--;break;case 91:d++;break;case 93:d--;break;case 123:l++;break;case 125:l--}if(47===t){for(var m=a-1,f=void 0;m>=0&&" "===(f=e.charAt(m));m--);f&&Aa.test(f)||(p=!0)}}else void 0===i?(c=a+1,i=e.slice(0,a).trim()):T();function T(){(s||(s=[])).push(e.slice(c,a).trim()),c=a+1}if(void 0===i?i=e.slice(0,a).trim():0!==c&&T(),s)for(a=0;a<s.length;a++)i=Ia(i,s[a]);return i}function Ia(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var a=t.slice(0,n),i=t.slice(n+1);return'_f("'+a+'")('+e+(")"!==i?","+i:i)}function Pa(e,t){console.error("[Vue compiler]: "+e)}function Va(e,t){return e?e.map((function(e){return e[t]})).filter((function(e){return e})):[]}function Ea(e,t,n,a,i){(e.props||(e.props=[])).push(Ha({name:t,value:n,dynamic:i},a)),e.plain=!1}function Ba(e,t,n,a,i){(i?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(Ha({name:t,value:n,dynamic:i},a)),e.plain=!1}function Ua(e,t,n,a){e.attrsMap[t]=n,e.attrsList.push(Ha({name:t,value:n},a))}function Oa(e,t,n,a,i,s,r,o){(e.directives||(e.directives=[])).push(Ha({name:t,rawName:n,value:a,arg:i,isDynamicArg:s,modifiers:r},o)),e.plain=!1}function Fa(e,t,n){return n?"_p("+t+',"'+e+'")':e+t}function La(e,t,n,i,s,r,o,u){var p;(i=i||a).right?u?t="("+t+")==='click'?'contextmenu':("+t+")":"click"===t&&(t="contextmenu",delete i.right):i.middle&&(u?t="("+t+")==='click'?'mouseup':("+t+")":"click"===t&&(t="mouseup")),i.capture&&(delete i.capture,t=Fa("!",t,u)),i.once&&(delete i.once,t=Fa("~",t,u)),i.passive&&(delete i.passive,t=Fa("&",t,u)),i.native?(delete i.native,p=e.nativeEvents||(e.nativeEvents={})):p=e.events||(e.events={});var l=Ha({value:n.trim(),dynamic:u},o);i!==a&&(l.modifiers=i);var d=p[t];Array.isArray(d)?s?d.unshift(l):d.push(l):p[t]=d?s?[l,d]:[d,l]:l,e.plain=!1}function Na(e,t,n){var a=Da(e,":"+t)||Da(e,"v-bind:"+t);if(null!=a)return xa(a);if(!1!==n){var i=Da(e,t);if(null!=i)return JSON.stringify(i)}}function Da(e,t,n){var a;if(null!=(a=e.attrsMap[t]))for(var i=e.attrsList,s=0,r=i.length;s<r;s++)if(i[s].name===t){i.splice(s,1);break}return n&&delete e.attrsMap[t],a}function Wa(e,t){for(var n=e.attrsList,a=0,i=n.length;a<i;a++){var s=n[a];if(t.test(s.name))return n.splice(a,1),s}}function Ha(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function $a(e,t,n){var a=n||{},i=a.number,s="$$v";a.trim&&(s="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(s="_n("+s+")");var r=za(t,s);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+r+"}"}}function za(e,t){var n=function(e){if(e=e.trim(),wa=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<wa-1)return(_a=e.lastIndexOf("."))>-1?{exp:e.slice(0,_a),key:'"'+e.slice(_a+1)+'"'}:{exp:e,key:null};Ma=e,_a=Ca=Sa=0;for(;!qa();)ja(ka=Ga())?Ya(ka):91===ka&&Ka(ka);return{exp:e.slice(0,Ca),key:e.slice(Ca+1,Sa)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Ga(){return Ma.charCodeAt(++_a)}function qa(){return _a>=wa}function ja(e){return 34===e||39===e}function Ka(e){var t=1;for(Ca=_a;!qa();)if(ja(e=Ga()))Ya(e);else if(91===e&&t++,93===e&&t--,0===t){Sa=_a;break}}function Ya(e){for(var t=e;!qa()&&(e=Ga())!==t;);}var Qa;function Xa(e,t,n){var a=Qa;return function i(){var s=t.apply(null,arguments);null!==s&&ei(e,i,n,a)}}var Ja=Qe&&!(te&&Number(te[1])<=53);function Za(e,t,n,a){if(Ja){var i=ln,s=t;t=s._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return s.apply(this,arguments)}}Qa.addEventListener(e,t,ae?{capture:n,passive:a}:n)}function ei(e,t,n,a){(a||Qa).removeEventListener(e,t._wrapper||t,n)}function ti(e,t){if(!i(e.data.on)||!i(t.data.on)){var n=t.data.on||{},a=e.data.on||{};Qa=t.elm,function(e){if(s(e.__r)){var t=X?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}s(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),pt(n,a,Za,ei,Xa,t.context),Qa=void 0}}var ni,ai={create:ti,update:ti};function ii(e,t){if(!i(e.data.domProps)||!i(t.data.domProps)){var n,a,r=t.elm,o=e.data.domProps||{},u=t.data.domProps||{};for(n in s(u.__ob__)&&(u=t.data.domProps=I({},u)),o)n in u||(r[n]="");for(n in u){if(a=u[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),a===o[n])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===n&&"PROGRESS"!==r.tagName){r._value=a;var p=i(a)?"":String(a);si(r,p)&&(r.value=p)}else if("innerHTML"===n&&Qn(r.tagName)&&i(r.innerHTML)){(ni=ni||document.createElement("div")).innerHTML="<svg>"+a+"</svg>";for(var l=ni.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;l.firstChild;)r.appendChild(l.firstChild)}else if(a!==o[n])try{r[n]=a}catch(e){}}}}function si(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,a=e._vModifiers;if(s(a)){if(a.number)return f(n)!==f(t);if(a.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var ri={create:ii,update:ii},oi=M((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var a=e.split(n);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}));function ui(e){var t=pi(e.style);return e.staticStyle?I(e.staticStyle,t):t}function pi(e){return Array.isArray(e)?P(e):"string"==typeof e?oi(e):e}var li,di=/^--/,yi=/\s*!important$/,ci=function(e,t,n){if(di.test(t))e.style.setProperty(t,n);else if(yi.test(n))e.style.setProperty(R(t),n.replace(yi,""),"important");else{var a=fi(t);if(Array.isArray(n))for(var i=0,s=n.length;i<s;i++)e.style[a]=n[i];else e.style[a]=n}},mi=["Webkit","Moz","ms"],fi=M((function(e){if(li=li||document.createElement("div").style,"filter"!==(e=_(e))&&e in li)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<mi.length;n++){var a=mi[n]+t;if(a in li)return a}}));function Ti(e,t){var n=t.data,a=e.data;if(!(i(n.staticStyle)&&i(n.style)&&i(a.staticStyle)&&i(a.style))){var r,o,u=t.elm,p=a.staticStyle,l=a.normalizedStyle||a.style||{},d=p||l,y=pi(t.data.style)||{};t.data.normalizedStyle=s(y.__ob__)?I({},y):y;var c=function(e,t){var n,a={};if(t)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=ui(i.data))&&I(a,n);(n=ui(e.data))&&I(a,n);for(var s=e;s=s.parent;)s.data&&(n=ui(s.data))&&I(a,n);return a}(t,!0);for(o in d)i(c[o])&&ci(u,o,"");for(o in c)(r=c[o])!==d[o]&&ci(u,o,null==r?"":r)}}var bi={create:Ti,update:Ti},vi=/\s+/;function gi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(vi).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function hi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(vi).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",a=" "+t+" ";n.indexOf(a)>=0;)n=n.replace(a," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function wi(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&I(t,Mi(e.name||"v")),I(t,e),t}return"string"==typeof e?Mi(e):void 0}}var Mi=M((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),ki=j&&!J,_i="transition",Ci="transitionend",Si="animation",Ri="animationend";ki&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(_i="WebkitTransition",Ci="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Si="WebkitAnimation",Ri="webkitAnimationEnd"));var Ai=j?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function xi(e){Ai((function(){Ai(e)}))}function Ii(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),gi(e,t))}function Pi(e,t){e._transitionClasses&&g(e._transitionClasses,t),hi(e,t)}function Vi(e,t,n){var a=Bi(e,t),i=a.type,s=a.timeout,r=a.propCount;if(!i)return n();var o="transition"===i?Ci:Ri,u=0,p=function(){e.removeEventListener(o,l),n()},l=function(t){t.target===e&&++u>=r&&p()};setTimeout((function(){u<r&&p()}),s+1),e.addEventListener(o,l)}var Ei=/\b(transform|all)(,|$)/;function Bi(e,t){var n,a=window.getComputedStyle(e),i=(a[_i+"Delay"]||"").split(", "),s=(a[_i+"Duration"]||"").split(", "),r=Ui(i,s),o=(a[Si+"Delay"]||"").split(", "),u=(a[Si+"Duration"]||"").split(", "),p=Ui(o,u),l=0,d=0;return"transition"===t?r>0&&(n="transition",l=r,d=s.length):"animation"===t?p>0&&(n="animation",l=p,d=u.length):d=(n=(l=Math.max(r,p))>0?r>p?"transition":"animation":null)?"transition"===n?s.length:u.length:0,{type:n,timeout:l,propCount:d,hasTransform:"transition"===n&&Ei.test(a[_i+"Property"])}}function Ui(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Oi(t)+Oi(e[n])})))}function Oi(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Fi(e,t){var n=e.elm;s(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var a=wi(e.data.transition);if(!i(a)&&!s(n._enterCb)&&1===n.nodeType){for(var r=a.css,o=a.type,p=a.enterClass,l=a.enterToClass,d=a.enterActiveClass,y=a.appearClass,c=a.appearToClass,m=a.appearActiveClass,T=a.beforeEnter,b=a.enter,v=a.afterEnter,g=a.enterCancelled,h=a.beforeAppear,w=a.appear,M=a.afterAppear,k=a.appearCancelled,_=a.duration,C=Jt,S=Jt.$vnode;S&&S.parent;)C=S.context,S=S.parent;var R=!C._isMounted||!e.isRootInsert;if(!R||w||""===w){var A=R&&y?y:p,x=R&&m?m:d,I=R&&c?c:l,P=R&&h||T,V=R&&"function"==typeof w?w:b,E=R&&M||v,B=R&&k||g,U=f(u(_)?_.enter:_);0;var O=!1!==r&&!J,L=Di(V),N=n._enterCb=F((function(){O&&(Pi(n,I),Pi(n,x)),N.cancelled?(O&&Pi(n,A),B&&B(n)):E&&E(n),n._enterCb=null}));e.data.show||lt(e,"insert",(function(){var t=n.parentNode,a=t&&t._pending&&t._pending[e.key];a&&a.tag===e.tag&&a.elm._leaveCb&&a.elm._leaveCb(),V&&V(n,N)})),P&&P(n),O&&(Ii(n,A),Ii(n,x),xi((function(){Pi(n,A),N.cancelled||(Ii(n,I),L||(Ni(U)?setTimeout(N,U):Vi(n,o,N)))}))),e.data.show&&(t&&t(),V&&V(n,N)),O||L||N()}}}function Li(e,t){var n=e.elm;s(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var a=wi(e.data.transition);if(i(a)||1!==n.nodeType)return t();if(!s(n._leaveCb)){var r=a.css,o=a.type,p=a.leaveClass,l=a.leaveToClass,d=a.leaveActiveClass,y=a.beforeLeave,c=a.leave,m=a.afterLeave,T=a.leaveCancelled,b=a.delayLeave,v=a.duration,g=!1!==r&&!J,h=Di(c),w=f(u(v)?v.leave:v);0;var M=n._leaveCb=F((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),g&&(Pi(n,l),Pi(n,d)),M.cancelled?(g&&Pi(n,p),T&&T(n)):(t(),m&&m(n)),n._leaveCb=null}));b?b(k):k()}function k(){M.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),y&&y(n),g&&(Ii(n,p),Ii(n,d),xi((function(){Pi(n,p),M.cancelled||(Ii(n,l),h||(Ni(w)?setTimeout(M,w):Vi(n,o,M)))}))),c&&c(n,M),g||h||M())}}function Ni(e){return"number"==typeof e&&!isNaN(e)}function Di(e){if(i(e))return!1;var t=e.fns;return s(t)?Di(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Wi(e,t){!0!==t.data.show&&Fi(t)}var Hi=function(e){var t,n,a={},u=e.modules,p=e.nodeOps;for(t=0;t<ra.length;++t)for(a[ra[t]]=[],n=0;n<u.length;++n)s(u[n][ra[t]])&&a[ra[t]].push(u[n][ra[t]]);function l(e){var t=p.parentNode(e);s(t)&&p.removeChild(t,e)}function d(e,t,n,i,o,u,l){if(s(e.elm)&&s(u)&&(e=u[l]=he(e)),e.isRootInsert=!o,!function(e,t,n,i){var o=e.data;if(s(o)){var u=s(e.componentInstance)&&o.keepAlive;if(s(o=o.hook)&&s(o=o.init)&&o(e,!1),s(e.componentInstance))return y(e,t),c(n,e.elm,i),r(u)&&function(e,t,n,i){var r,o=e;for(;o.componentInstance;)if(o=o.componentInstance._vnode,s(r=o.data)&&s(r=r.transition)){for(r=0;r<a.activate.length;++r)a.activate[r](sa,o);t.push(o);break}c(n,e.elm,i)}(e,t,n,i),!0}}(e,t,n,i)){var d=e.data,f=e.children,T=e.tag;s(T)?(e.elm=e.ns?p.createElementNS(e.ns,T):p.createElement(T,e),v(e),m(e,f,t),s(d)&&b(e,t),c(n,e.elm,i)):r(e.isComment)?(e.elm=p.createComment(e.text),c(n,e.elm,i)):(e.elm=p.createTextNode(e.text),c(n,e.elm,i))}}function y(e,t){s(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,f(e)?(b(e,t),v(e)):(ia(e),t.push(e))}function c(e,t,n){s(e)&&(s(n)?p.parentNode(n)===e&&p.insertBefore(e,t,n):p.appendChild(e,t))}function m(e,t,n){if(Array.isArray(t)){0;for(var a=0;a<t.length;++a)d(t[a],n,e.elm,null,!0,t,a)}else o(e.text)&&p.appendChild(e.elm,p.createTextNode(String(e.text)))}function f(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return s(e.tag)}function b(e,n){for(var i=0;i<a.create.length;++i)a.create[i](sa,e);s(t=e.data.hook)&&(s(t.create)&&t.create(sa,e),s(t.insert)&&n.push(e))}function v(e){var t;if(s(t=e.fnScopeId))p.setStyleScope(e.elm,t);else for(var n=e;n;)s(t=n.context)&&s(t=t.$options._scopeId)&&p.setStyleScope(e.elm,t),n=n.parent;s(t=Jt)&&t!==e.context&&t!==e.fnContext&&s(t=t.$options._scopeId)&&p.setStyleScope(e.elm,t)}function g(e,t,n,a,i,s){for(;a<=i;++a)d(n[a],s,e,t,!1,n,a)}function h(e){var t,n,i=e.data;if(s(i))for(s(t=i.hook)&&s(t=t.destroy)&&t(e),t=0;t<a.destroy.length;++t)a.destroy[t](e);if(s(t=e.children))for(n=0;n<e.children.length;++n)h(e.children[n])}function w(e,t,n){for(;t<=n;++t){var a=e[t];s(a)&&(s(a.tag)?(M(a),h(a)):l(a.elm))}}function M(e,t){if(s(t)||s(e.data)){var n,i=a.remove.length+1;for(s(t)?t.listeners+=i:t=function(e,t){function n(){0==--n.listeners&&l(e)}return n.listeners=t,n}(e.elm,i),s(n=e.componentInstance)&&s(n=n._vnode)&&s(n.data)&&M(n,t),n=0;n<a.remove.length;++n)a.remove[n](e,t);s(n=e.data.hook)&&s(n=n.remove)?n(e,t):t()}else l(e.elm)}function k(e,t,n,a){for(var i=n;i<a;i++){var r=t[i];if(s(r)&&oa(e,r))return i}}function _(e,t,n,o,u,l){if(e!==t){s(t.elm)&&s(o)&&(t=o[u]=he(t));var y=t.elm=e.elm;if(r(e.isAsyncPlaceholder))s(t.asyncFactory.resolved)?R(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(r(t.isStatic)&&r(e.isStatic)&&t.key===e.key&&(r(t.isCloned)||r(t.isOnce)))t.componentInstance=e.componentInstance;else{var c,m=t.data;s(m)&&s(c=m.hook)&&s(c=c.prepatch)&&c(e,t);var T=e.children,b=t.children;if(s(m)&&f(t)){for(c=0;c<a.update.length;++c)a.update[c](e,t);s(c=m.hook)&&s(c=c.update)&&c(e,t)}i(t.text)?s(T)&&s(b)?T!==b&&function(e,t,n,a,r){var o,u,l,y=0,c=0,m=t.length-1,f=t[0],T=t[m],b=n.length-1,v=n[0],h=n[b],M=!r;for(0;y<=m&&c<=b;)i(f)?f=t[++y]:i(T)?T=t[--m]:oa(f,v)?(_(f,v,a,n,c),f=t[++y],v=n[++c]):oa(T,h)?(_(T,h,a,n,b),T=t[--m],h=n[--b]):oa(f,h)?(_(f,h,a,n,b),M&&p.insertBefore(e,f.elm,p.nextSibling(T.elm)),f=t[++y],h=n[--b]):oa(T,v)?(_(T,v,a,n,c),M&&p.insertBefore(e,T.elm,f.elm),T=t[--m],v=n[++c]):(i(o)&&(o=ua(t,y,m)),i(u=s(v.key)?o[v.key]:k(v,t,y,m))?d(v,a,e,f.elm,!1,n,c):oa(l=t[u],v)?(_(l,v,a,n,c),t[u]=void 0,M&&p.insertBefore(e,l.elm,f.elm)):d(v,a,e,f.elm,!1,n,c),v=n[++c]);y>m?g(e,i(n[b+1])?null:n[b+1].elm,n,c,b,a):c>b&&w(t,y,m)}(y,T,b,n,l):s(b)?(s(e.text)&&p.setTextContent(y,""),g(y,null,b,0,b.length-1,n)):s(T)?w(T,0,T.length-1):s(e.text)&&p.setTextContent(y,""):e.text!==t.text&&p.setTextContent(y,t.text),s(m)&&s(c=m.hook)&&s(c=c.postpatch)&&c(e,t)}}}function C(e,t,n){if(r(n)&&s(e.parent))e.parent.data.pendingInsert=t;else for(var a=0;a<t.length;++a)t[a].data.hook.insert(t[a])}var S=T("attrs,class,staticClass,staticStyle,key");function R(e,t,n,a){var i,o=t.tag,u=t.data,p=t.children;if(a=a||u&&u.pre,t.elm=e,r(t.isComment)&&s(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(s(u)&&(s(i=u.hook)&&s(i=i.init)&&i(t,!0),s(i=t.componentInstance)))return y(t,n),!0;if(s(o)){if(s(p))if(e.hasChildNodes())if(s(i=u)&&s(i=i.domProps)&&s(i=i.innerHTML)){if(i!==e.innerHTML)return!1}else{for(var l=!0,d=e.firstChild,c=0;c<p.length;c++){if(!d||!R(d,p[c],n,a)){l=!1;break}d=d.nextSibling}if(!l||d)return!1}else m(t,p,n);if(s(u)){var f=!1;for(var T in u)if(!S(T)){f=!0,b(t,n);break}!f&&u.class&&rt(u.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,o){if(!i(t)){var u,l=!1,y=[];if(i(e))l=!0,d(t,y);else{var c=s(e.nodeType);if(!c&&oa(e,t))_(e,t,y,null,null,o);else{if(c){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),n=!0),r(n)&&R(e,t,y))return C(t,y,!0),e;u=e,e=new Te(p.tagName(u).toLowerCase(),{},[],void 0,u)}var m=e.elm,T=p.parentNode(m);if(d(t,y,m._leaveCb?null:T,p.nextSibling(m)),s(t.parent))for(var b=t.parent,v=f(t);b;){for(var g=0;g<a.destroy.length;++g)a.destroy[g](b);if(b.elm=t.elm,v){for(var M=0;M<a.create.length;++M)a.create[M](sa,b);var k=b.data.hook.insert;if(k.merged)for(var S=1;S<k.fns.length;S++)k.fns[S]()}else ia(b);b=b.parent}s(T)?w([e],0,0):s(e.tag)&&h(e)}}return C(t,y,l),t.elm}s(e)&&h(e)}}({nodeOps:na,modules:[ga,Ra,ai,ri,bi,j?{create:Wi,activate:Wi,remove:function(e,t){!0!==e.data.show?Li(e,t):t()}}:{}].concat(fa)});J&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&Qi(e,"input")}));var $i={inserted:function(e,t,n,a){"select"===n.tag?(a.elm&&!a.elm._vOptions?lt(n,"postpatch",(function(){$i.componentUpdated(e,t,n)})):zi(e,t,n.context),e._vOptions=[].map.call(e.options,ji)):("textarea"===n.tag||ea(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Ki),e.addEventListener("compositionend",Yi),e.addEventListener("change",Yi),J&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){zi(e,t,n.context);var a=e._vOptions,i=e._vOptions=[].map.call(e.options,ji);if(i.some((function(e,t){return!U(e,a[t])})))(e.multiple?t.value.some((function(e){return qi(e,i)})):t.value!==t.oldValue&&qi(t.value,i))&&Qi(e,"change")}}};function zi(e,t,n){Gi(e,t,n),(X||Z)&&setTimeout((function(){Gi(e,t,n)}),0)}function Gi(e,t,n){var a=t.value,i=e.multiple;if(!i||Array.isArray(a)){for(var s,r,o=0,u=e.options.length;o<u;o++)if(r=e.options[o],i)s=O(a,ji(r))>-1,r.selected!==s&&(r.selected=s);else if(U(ji(r),a))return void(e.selectedIndex!==o&&(e.selectedIndex=o));i||(e.selectedIndex=-1)}}function qi(e,t){return t.every((function(t){return!U(t,e)}))}function ji(e){return"_value"in e?e._value:e.value}function Ki(e){e.target.composing=!0}function Yi(e){e.target.composing&&(e.target.composing=!1,Qi(e.target,"input"))}function Qi(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Xi(e){return!e.componentInstance||e.data&&e.data.transition?e:Xi(e.componentInstance._vnode)}var Ji={model:$i,show:{bind:function(e,t,n){var a=t.value,i=(n=Xi(n)).data&&n.data.transition,s=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&i?(n.data.show=!0,Fi(n,(function(){e.style.display=s}))):e.style.display=a?s:"none"},update:function(e,t,n){var a=t.value;!a!=!t.oldValue&&((n=Xi(n)).data&&n.data.transition?(n.data.show=!0,a?Fi(n,(function(){e.style.display=e.__vOriginalDisplay})):Li(n,(function(){e.style.display="none"}))):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,a,i){i||(e.style.display=e.__vOriginalDisplay)}}},Zi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function es(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?es(jt(t.children)):e}function ts(e){var t={},n=e.$options;for(var a in n.propsData)t[a]=e[a];var i=n._parentListeners;for(var s in i)t[_(s)]=i[s];return t}function ns(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var as=function(e){return e.tag||bt(e)},is=function(e){return"show"===e.name},ss={name:"transition",props:Zi,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(as)).length){0;var a=this.mode;0;var i=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var s=es(i);if(!s)return i;if(this._leaving)return ns(e,i);var r="__transition-"+this._uid+"-";s.key=null==s.key?s.isComment?r+"comment":r+s.tag:o(s.key)?0===String(s.key).indexOf(r)?s.key:r+s.key:s.key;var u=(s.data||(s.data={})).transition=ts(this),p=this._vnode,l=es(p);if(s.data.directives&&s.data.directives.some(is)&&(s.data.show=!0),l&&l.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(s,l)&&!bt(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var d=l.data.transition=I({},u);if("out-in"===a)return this._leaving=!0,lt(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),ns(e,i);if("in-out"===a){if(bt(s))return p;var y,c=function(){y()};lt(u,"afterEnter",c),lt(u,"enterCancelled",c),lt(d,"delayLeave",(function(e){y=e}))}}return i}}},rs=I({tag:String,moveClass:String},Zi);function os(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function us(e){e.data.newPos=e.elm.getBoundingClientRect()}function ps(e){var t=e.data.pos,n=e.data.newPos,a=t.left-n.left,i=t.top-n.top;if(a||i){e.data.moved=!0;var s=e.elm.style;s.transform=s.WebkitTransform="translate("+a+"px,"+i+"px)",s.transitionDuration="0s"}}delete rs.mode;var ls={Transition:ss,TransitionGroup:{props:rs,beforeMount:function(){var e=this,t=this._update;this._update=function(n,a){var i=Zt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,n,a)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),a=this.prevChildren=this.children,i=this.$slots.default||[],s=this.children=[],r=ts(this),o=0;o<i.length;o++){var u=i[o];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))s.push(u),n[u.key]=u,(u.data||(u.data={})).transition=r;else;}if(a){for(var p=[],l=[],d=0;d<a.length;d++){var y=a[d];y.data.transition=r,y.data.pos=y.elm.getBoundingClientRect(),n[y.key]?p.push(y):l.push(y)}this.kept=e(t,null,p),this.removed=l}return e(t,null,s)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(os),e.forEach(us),e.forEach(ps),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,a=n.style;Ii(n,t),a.transform=a.WebkitTransform=a.transitionDuration="",n.addEventListener(Ci,n._moveCb=function e(a){a&&a.target!==n||a&&!/transform$/.test(a.propertyName)||(n.removeEventListener(Ci,e),n._moveCb=null,Pi(n,t))})}})))},methods:{hasMove:function(e,t){if(!ki)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){hi(n,e)})),gi(n,t),n.style.display="none",this.$el.appendChild(n);var a=Bi(n);return this.$el.removeChild(n),this._hasMove=a.hasTransform}}}};Sn.config.mustUseProp=On,Sn.config.isReservedTag=Xn,Sn.config.isReservedAttr=Bn,Sn.config.getTagNamespace=Jn,Sn.config.isUnknownElement=function(e){if(!j)return!0;if(Xn(e))return!1;if(e=e.toLowerCase(),null!=Zn[e])return Zn[e];var t=document.createElement(e);return e.indexOf("-")>-1?Zn[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Zn[e]=/HTMLUnknownElement/.test(t.toString())},I(Sn.options.directives,Ji),I(Sn.options.components,ls),Sn.prototype.__patch__=j?Hi:V,Sn.prototype.$mount=function(e,t){return function(e,t,n){var a;return e.$el=t,e.$options.render||(e.$options.render=ve),nn(e,"beforeMount"),a=function(){e._update(e._render(),n)},new fn(e,a,V,{before:function(){e._isMounted&&!e._isDestroyed&&nn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,nn(e,"mounted")),e}(this,e=e&&j?ta(e):void 0,t)},j&&setTimeout((function(){D.devtools&&re&&re.emit("init",Sn)}),0);var ds=/\{\{((?:.|\r?\n)+?)\}\}/g,ys=/[-.*+?^${}()|[\]\/\\]/g,cs=M((function(e){var t=e[0].replace(ys,"\\$&"),n=e[1].replace(ys,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}));var ms={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=Da(e,"class");n&&(e.staticClass=JSON.stringify(n));var a=Na(e,"class",!1);a&&(e.classBinding=a)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}};var fs,Ts={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=Da(e,"style");n&&(e.staticStyle=JSON.stringify(oi(n)));var a=Na(e,"style",!1);a&&(e.styleBinding=a)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},bs=function(e){return(fs=fs||document.createElement("div")).innerHTML=e,fs.textContent},vs=T("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),gs=T("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),hs=T("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),ws=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Ms=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ks="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+W.source+"]*",_s="((?:"+ks+"\\:)?"+ks+")",Cs=new RegExp("^<"+_s),Ss=/^\s*(\/?)>/,Rs=new RegExp("^<\\/"+_s+"[^>]*>"),As=/^<!DOCTYPE [^>]+>/i,xs=/^<!\--/,Is=/^<!\[/,Ps=T("script,style,textarea",!0),Vs={},Es={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},Bs=/&(?:lt|gt|quot|amp|#39);/g,Us=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,Os=T("pre,textarea",!0),Fs=function(e,t){return e&&Os(e)&&"\n"===t[0]};function Ls(e,t){var n=t?Us:Bs;return e.replace(n,(function(e){return Es[e]}))}var Ns,Ds,Ws,Hs,$s,zs,Gs,qs,js=/^@|^v-on:/,Ks=/^v-|^@|^:|^#/,Ys=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Qs=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Xs=/^\(|\)$/g,Js=/^\[.*\]$/,Zs=/:(.*)$/,er=/^:|^\.|^v-bind:/,tr=/\.[^.\]]+(?=[^\]]*$)/g,nr=/^v-slot(:|$)|^#/,ar=/[\r\n]/,ir=/[ \f\t\r\n]+/g,sr=M(bs);function rr(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:cr(t),rawAttrsMap:{},parent:n,children:[]}}function or(e,t){Ns=t.warn||Pa,zs=t.isPreTag||E,Gs=t.mustUseProp||E,qs=t.getTagNamespace||E;var n=t.isReservedTag||E;(function(e){return!(!(e.component||e.attrsMap[":is"]||e.attrsMap["v-bind:is"])&&(e.attrsMap.is?n(e.attrsMap.is):n(e.tag)))}),Ws=Va(t.modules,"transformNode"),Hs=Va(t.modules,"preTransformNode"),$s=Va(t.modules,"postTransformNode"),Ds=t.delimiters;var a,i,s=[],r=!1!==t.preserveWhitespace,o=t.whitespace,u=!1,p=!1;function l(e){if(d(e),u||e.processed||(e=ur(e,t)),s.length||e===a||a.if&&(e.elseif||e.else)&&lr(a,{exp:e.elseif,block:e}),i&&!e.forbidden)if(e.elseif||e.else)r=e,(o=function(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];e.pop()}}(i.children))&&o.if&&lr(o,{exp:r.elseif,block:r});else{if(e.slotScope){var n=e.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[n]=e}i.children.push(e),e.parent=i}var r,o;e.children=e.children.filter((function(e){return!e.slotScope})),d(e),e.pre&&(u=!1),zs(e.tag)&&(p=!1);for(var l=0;l<$s.length;l++)$s[l](e,t)}function d(e){if(!p)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var n,a,i=[],s=t.expectHTML,r=t.isUnaryTag||E,o=t.canBeLeftOpenTag||E,u=0;e;){if(n=e,a&&Ps(a)){var p=0,l=a.toLowerCase(),d=Vs[l]||(Vs[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i")),y=e.replace(d,(function(e,n,a){return p=a.length,Ps(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Fs(l,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""}));u+=e.length-y.length,e=y,S(l,u-p,u)}else{var c=e.indexOf("<");if(0===c){if(xs.test(e)){var m=e.indexOf("--\x3e");if(m>=0){t.shouldKeepComment&&t.comment(e.substring(4,m),u,u+m+3),k(m+3);continue}}if(Is.test(e)){var f=e.indexOf("]>");if(f>=0){k(f+2);continue}}var T=e.match(As);if(T){k(T[0].length);continue}var b=e.match(Rs);if(b){var v=u;k(b[0].length),S(b[1],v,u);continue}var g=_();if(g){C(g),Fs(g.tagName,e)&&k(1);continue}}var h=void 0,w=void 0,M=void 0;if(c>=0){for(w=e.slice(c);!(Rs.test(w)||Cs.test(w)||xs.test(w)||Is.test(w)||(M=w.indexOf("<",1))<0);)c+=M,w=e.slice(c);h=e.substring(0,c)}c<0&&(h=e),h&&k(h.length),t.chars&&h&&t.chars(h,u-h.length,u)}if(e===n){t.chars&&t.chars(e);break}}function k(t){u+=t,e=e.substring(t)}function _(){var t=e.match(Cs);if(t){var n,a,i={tagName:t[1],attrs:[],start:u};for(k(t[0].length);!(n=e.match(Ss))&&(a=e.match(Ms)||e.match(ws));)a.start=u,k(a[0].length),a.end=u,i.attrs.push(a);if(n)return i.unarySlash=n[1],k(n[0].length),i.end=u,i}}function C(e){var n=e.tagName,u=e.unarySlash;s&&("p"===a&&hs(n)&&S(a),o(n)&&a===n&&S(n));for(var p=r(n)||!!u,l=e.attrs.length,d=new Array(l),y=0;y<l;y++){var c=e.attrs[y],m=c[3]||c[4]||c[5]||"",f="a"===n&&"href"===c[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;d[y]={name:c[1],value:Ls(m,f)}}p||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:d,start:e.start,end:e.end}),a=n),t.start&&t.start(n,d,p,e.start,e.end)}function S(e,n,s){var r,o;if(null==n&&(n=u),null==s&&(s=u),e)for(o=e.toLowerCase(),r=i.length-1;r>=0&&i[r].lowerCasedTag!==o;r--);else r=0;if(r>=0){for(var p=i.length-1;p>=r;p--)t.end&&t.end(i[p].tag,n,s);i.length=r,a=r&&i[r-1].tag}else"br"===o?t.start&&t.start(e,[],!0,n,s):"p"===o&&(t.start&&t.start(e,[],!1,n,s),t.end&&t.end(e,n,s))}S()}(e,{warn:Ns,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,n,r,o,d){var y=i&&i.ns||qs(e);X&&"svg"===y&&(n=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n];mr.test(a.name)||(a.name=a.name.replace(fr,""),t.push(a))}return t}(n));var c,m=rr(e,n,i);y&&(m.ns=y),"style"!==(c=m).tag&&("script"!==c.tag||c.attrsMap.type&&"text/javascript"!==c.attrsMap.type)||se()||(m.forbidden=!0);for(var f=0;f<Hs.length;f++)m=Hs[f](m,t)||m;u||(!function(e){null!=Da(e,"v-pre")&&(e.pre=!0)}(m),m.pre&&(u=!0)),zs(m.tag)&&(p=!0),u?function(e){var t=e.attrsList,n=t.length;if(n)for(var a=e.attrs=new Array(n),i=0;i<n;i++)a[i]={name:t[i].name,value:JSON.stringify(t[i].value)},null!=t[i].start&&(a[i].start=t[i].start,a[i].end=t[i].end);else e.pre||(e.plain=!0)}(m):m.processed||(pr(m),function(e){var t=Da(e,"v-if");if(t)e.if=t,lr(e,{exp:t,block:e});else{null!=Da(e,"v-else")&&(e.else=!0);var n=Da(e,"v-else-if");n&&(e.elseif=n)}}(m),function(e){null!=Da(e,"v-once")&&(e.once=!0)}(m)),a||(a=m),r?l(m):(i=m,s.push(m))},end:function(e,t,n){var a=s[s.length-1];s.length-=1,i=s[s.length-1],l(a)},chars:function(e,t,n){if(i&&(!X||"textarea"!==i.tag||i.attrsMap.placeholder!==e)){var a,s,l,d=i.children;if(e=p||e.trim()?"script"===(a=i).tag||"style"===a.tag?e:sr(e):d.length?o?"condense"===o&&ar.test(e)?"":" ":r?" ":"":"")p||"condense"!==o||(e=e.replace(ir," ")),!u&&" "!==e&&(s=function(e,t){var n=t?cs(t):ds;if(n.test(e)){for(var a,i,s,r=[],o=[],u=n.lastIndex=0;a=n.exec(e);){(i=a.index)>u&&(o.push(s=e.slice(u,i)),r.push(JSON.stringify(s)));var p=xa(a[1].trim());r.push("_s("+p+")"),o.push({"@binding":p}),u=i+a[0].length}return u<e.length&&(o.push(s=e.slice(u)),r.push(JSON.stringify(s))),{expression:r.join("+"),tokens:o}}}(e,Ds))?l={type:2,expression:s.expression,tokens:s.tokens,text:e}:" "===e&&d.length&&" "===d[d.length-1].text||(l={type:3,text:e}),l&&d.push(l)}},comment:function(e,t,n){if(i){var a={type:3,text:e,isComment:!0};0,i.children.push(a)}}}),a}function ur(e,t){var n;!function(e){var t=Na(e,"key");if(t){e.key=t}}(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=Na(e,"ref");t&&(e.ref=t,e.refInFor=function(e){var t=e;for(;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=Da(e,"scope"),e.slotScope=t||Da(e,"slot-scope")):(t=Da(e,"slot-scope"))&&(e.slotScope=t);var n=Na(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||Ba(e,"slot",n,function(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}(e,"slot")));if("template"===e.tag){var a=Wa(e,nr);if(a){0;var i=dr(a),s=i.name,r=i.dynamic;e.slotTarget=s,e.slotTargetDynamic=r,e.slotScope=a.value||"_empty_"}}else{var o=Wa(e,nr);if(o){0;var u=e.scopedSlots||(e.scopedSlots={}),p=dr(o),l=p.name,d=p.dynamic,y=u[l]=rr("template",[],e);y.slotTarget=l,y.slotTargetDynamic=d,y.children=e.children.filter((function(e){if(!e.slotScope)return e.parent=y,!0})),y.slotScope=o.value||"_empty_",e.children=[],e.plain=!1}}}(e),"slot"===(n=e).tag&&(n.slotName=Na(n,"name")),function(e){var t;(t=Na(e,"is"))&&(e.component=t);null!=Da(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var a=0;a<Ws.length;a++)e=Ws[a](e,t)||e;return function(e){var t,n,a,i,s,r,o,u,p=e.attrsList;for(t=0,n=p.length;t<n;t++){if(a=i=p[t].name,s=p[t].value,Ks.test(a))if(e.hasBindings=!0,(r=yr(a.replace(Ks,"")))&&(a=a.replace(tr,"")),er.test(a))a=a.replace(er,""),s=xa(s),(u=Js.test(a))&&(a=a.slice(1,-1)),r&&(r.prop&&!u&&"innerHtml"===(a=_(a))&&(a="innerHTML"),r.camel&&!u&&(a=_(a)),r.sync&&(o=za(s,"$event"),u?La(e,'"update:"+('+a+")",o,null,!1,0,p[t],!0):(La(e,"update:"+_(a),o,null,!1,0,p[t]),R(a)!==_(a)&&La(e,"update:"+R(a),o,null,!1,0,p[t])))),r&&r.prop||!e.component&&Gs(e.tag,e.attrsMap.type,a)?Ea(e,a,s,p[t],u):Ba(e,a,s,p[t],u);else if(js.test(a))a=a.replace(js,""),(u=Js.test(a))&&(a=a.slice(1,-1)),La(e,a,s,r,!1,0,p[t],u);else{var l=(a=a.replace(Ks,"")).match(Zs),d=l&&l[1];u=!1,d&&(a=a.slice(0,-(d.length+1)),Js.test(d)&&(d=d.slice(1,-1),u=!0)),Oa(e,a,i,s,d,u,r,p[t])}else Ba(e,a,JSON.stringify(s),p[t]),!e.component&&"muted"===a&&Gs(e.tag,e.attrsMap.type,a)&&Ea(e,a,"true",p[t])}}(e),e}function pr(e){var t;if(t=Da(e,"v-for")){var n=function(e){var t=e.match(Ys);if(!t)return;var n={};n.for=t[2].trim();var a=t[1].trim().replace(Xs,""),i=a.match(Qs);i?(n.alias=a.replace(Qs,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=a;return n}(t);n&&I(e,n)}}function lr(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function dr(e){var t=e.name.replace(nr,"");return t||"#"!==e.name[0]&&(t="default"),Js.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function yr(e){var t=e.match(tr);if(t){var n={};return t.forEach((function(e){n[e.slice(1)]=!0})),n}}function cr(e){for(var t={},n=0,a=e.length;n<a;n++)t[e[n].name]=e[n].value;return t}var mr=/^xmlns:NS\d+/,fr=/^NS\d+:/;function Tr(e){return rr(e.tag,e.attrsList.slice(),e.parent)}var br=[ms,Ts,{preTransformNode:function(e,t){if("input"===e.tag){var n,a=e.attrsMap;if(!a["v-model"])return;if((a[":type"]||a["v-bind:type"])&&(n=Na(e,"type")),a.type||n||!a["v-bind"]||(n="("+a["v-bind"]+").type"),n){var i=Da(e,"v-if",!0),s=i?"&&("+i+")":"",r=null!=Da(e,"v-else",!0),o=Da(e,"v-else-if",!0),u=Tr(e);pr(u),Ua(u,"type","checkbox"),ur(u,t),u.processed=!0,u.if="("+n+")==='checkbox'"+s,lr(u,{exp:u.if,block:u});var p=Tr(e);Da(p,"v-for",!0),Ua(p,"type","radio"),ur(p,t),lr(u,{exp:"("+n+")==='radio'"+s,block:p});var l=Tr(e);return Da(l,"v-for",!0),Ua(l,":type",n),ur(l,t),lr(u,{exp:i,block:l}),r?u.else=!0:o&&(u.elseif=o),u}}}}];var vr,gr,hr={expectHTML:!0,modules:br,directives:{model:function(e,t,n){n;var a=t.value,i=t.modifiers,s=e.tag,r=e.attrsMap.type;if(e.component)return $a(e,a,i),!1;if("select"===s)!function(e,t,n){var a='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";a=a+" "+za(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),La(e,"change",a,null,!0)}(e,a,i);else if("input"===s&&"checkbox"===r)!function(e,t,n){var a=n&&n.number,i=Na(e,"value")||"null",s=Na(e,"true-value")||"true",r=Na(e,"false-value")||"false";Ea(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===s?":("+t+")":":_q("+t+","+s+")")),La(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+s+"):("+r+");if(Array.isArray($$a)){var $$v="+(a?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+za(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+za(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+za(t,"$$c")+"}",null,!0)}(e,a,i);else if("input"===s&&"radio"===r)!function(e,t,n){var a=n&&n.number,i=Na(e,"value")||"null";Ea(e,"checked","_q("+t+","+(i=a?"_n("+i+")":i)+")"),La(e,"change",za(t,i),null,!0)}(e,a,i);else if("input"===s||"textarea"===s)!function(e,t,n){var a=e.attrsMap.type;0;var i=n||{},s=i.lazy,r=i.number,o=i.trim,u=!s&&"range"!==a,p=s?"change":"range"===a?"__r":"input",l="$event.target.value";o&&(l="$event.target.value.trim()");r&&(l="_n("+l+")");var d=za(t,l);u&&(d="if($event.target.composing)return;"+d);Ea(e,"value","("+t+")"),La(e,p,d,null,!0),(o||r)&&La(e,"blur","$forceUpdate()")}(e,a,i);else{if(!D.isReservedTag(s))return $a(e,a,i),!1}return!0},text:function(e,t){t.value&&Ea(e,"textContent","_s("+t.value+")",t)},html:function(e,t){t.value&&Ea(e,"innerHTML","_s("+t.value+")",t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:vs,mustUseProp:On,canBeLeftOpenTag:gs,isReservedTag:Xn,getTagNamespace:Jn,staticKeys:function(e){return e.reduce((function(e,t){return e.concat(t.staticKeys||[])}),[]).join(",")}(br)},wr=M((function(e){return T("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}));function Mr(e,t){e&&(vr=wr(t.staticKeys||""),gr=t.isReservedTag||E,function e(t){if(t.static=function(e){if(2===e.type)return!1;if(3===e.type)return!0;return!(!e.pre&&(e.hasBindings||e.if||e.for||b(e.tag)||!gr(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(vr)))}(t),1===t.type){if(!gr(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var n=0,a=t.children.length;n<a;n++){var i=t.children[n];e(i),i.static||(t.static=!1)}if(t.ifConditions)for(var s=1,r=t.ifConditions.length;s<r;s++){var o=t.ifConditions[s].block;e(o),o.static||(t.static=!1)}}}(e),function e(t,n){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=n),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var a=0,i=t.children.length;a<i;a++)e(t.children[a],n||!!t.for);if(t.ifConditions)for(var s=1,r=t.ifConditions.length;s<r;s++)e(t.ifConditions[s].block,n)}}(e,!1))}var kr=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/,_r=/\([^)]*?\);*$/,Cr=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Sr={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Rr={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Ar=function(e){return"if("+e+")return null;"},xr={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Ar("$event.target !== $event.currentTarget"),ctrl:Ar("!$event.ctrlKey"),shift:Ar("!$event.shiftKey"),alt:Ar("!$event.altKey"),meta:Ar("!$event.metaKey"),left:Ar("'button' in $event && $event.button !== 0"),middle:Ar("'button' in $event && $event.button !== 1"),right:Ar("'button' in $event && $event.button !== 2")};function Ir(e,t){var n=t?"nativeOn:":"on:",a="",i="";for(var s in e){var r=Pr(e[s]);e[s]&&e[s].dynamic?i+=s+","+r+",":a+='"'+s+'":'+r+","}return a="{"+a.slice(0,-1)+"}",i?n+"_d("+a+",["+i.slice(0,-1)+"])":n+a}function Pr(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map((function(e){return Pr(e)})).join(",")+"]";var t=Cr.test(e.value),n=kr.test(e.value),a=Cr.test(e.value.replace(_r,""));if(e.modifiers){var i="",s="",r=[];for(var o in e.modifiers)if(xr[o])s+=xr[o],Sr[o]&&r.push(o);else if("exact"===o){var u=e.modifiers;s+=Ar(["ctrl","shift","alt","meta"].filter((function(e){return!u[e]})).map((function(e){return"$event."+e+"Key"})).join("||"))}else r.push(o);return r.length&&(i+=function(e){return"if(!$event.type.indexOf('key')&&"+e.map(Vr).join("&&")+")return null;"}(r)),s&&(i+=s),"function($event){"+i+(t?"return "+e.value+".apply(null, arguments)":n?"return ("+e.value+").apply(null, arguments)":a?"return "+e.value:e.value)+"}"}return t||n?e.value:"function($event){"+(a?"return "+e.value:e.value)+"}"}function Vr(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Sr[e],a=Rr[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(a)+")"}var Er={on:function(e,t){e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:V},Br=function(e){this.options=e,this.warn=e.warn||Pa,this.transforms=Va(e.modules,"transformCode"),this.dataGenFns=Va(e.modules,"genData"),this.directives=I(I({},Er),e.directives);var t=e.isReservedTag||E;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Ur(e,t){var n=new Br(t);return{render:"with(this){return "+(e?"script"===e.tag?"null":Or(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Or(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return Fr(e,t);if(e.once&&!e.onceProcessed)return Lr(e,t);if(e.for&&!e.forProcessed)return Dr(e,t);if(e.if&&!e.ifProcessed)return Nr(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',a=zr(e,t),i="_t("+n+(a?",function(){return "+a+"}":""),s=e.attrs||e.dynamicAttrs?jr((e.attrs||[]).concat(e.dynamicAttrs||[]).map((function(e){return{name:_(e.name),value:e.value,dynamic:e.dynamic}}))):null,r=e.attrsMap["v-bind"];!s&&!r||a||(i+=",null");s&&(i+=","+s);r&&(i+=(s?"":",null")+","+r);return i+")"}(e,t);var n;if(e.component)n=function(e,t,n){var a=t.inlineTemplate?null:zr(t,n,!0);return"_c("+e+","+Wr(t,n)+(a?","+a:"")+")"}(e.component,e,t);else{var a;(!e.plain||e.pre&&t.maybeComponent(e))&&(a=Wr(e,t));var i=e.inlineTemplate?null:zr(e,t,!0);n="_c('"+e.tag+"'"+(a?","+a:"")+(i?","+i:"")+")"}for(var s=0;s<t.transforms.length;s++)n=t.transforms[s](e,n);return n}return zr(e,t)||"void 0"}function Fr(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+Or(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Lr(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return Nr(e,t);if(e.staticInFor){for(var n="",a=e.parent;a;){if(a.for){n=a.key;break}a=a.parent}return n?"_o("+Or(e,t)+","+t.onceId+++","+n+")":Or(e,t)}return Fr(e,t)}function Nr(e,t,n,a){return e.ifProcessed=!0,function e(t,n,a,i){if(!t.length)return i||"_e()";var s=t.shift();return s.exp?"("+s.exp+")?"+r(s.block)+":"+e(t,n,a,i):""+r(s.block);function r(e){return a?a(e,n):e.once?Lr(e,n):Or(e,n)}}(e.ifConditions.slice(),t,n,a)}function Dr(e,t,n,a){var i=e.for,s=e.alias,r=e.iterator1?","+e.iterator1:"",o=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,(a||"_l")+"(("+i+"),function("+s+r+o+"){return "+(n||Or)(e,t)+"})"}function Wr(e,t){var n="{",a=function(e,t){var n=e.directives;if(!n)return;var a,i,s,r,o="directives:[",u=!1;for(a=0,i=n.length;a<i;a++){s=n[a],r=!0;var p=t.directives[s.name];p&&(r=!!p(e,s,t.warn)),r&&(u=!0,o+='{name:"'+s.name+'",rawName:"'+s.rawName+'"'+(s.value?",value:("+s.value+"),expression:"+JSON.stringify(s.value):"")+(s.arg?",arg:"+(s.isDynamicArg?s.arg:'"'+s.arg+'"'):"")+(s.modifiers?",modifiers:"+JSON.stringify(s.modifiers):"")+"},")}if(u)return o.slice(0,-1)+"]"}(e,t);a&&(n+=a+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var i=0;i<t.dataGenFns.length;i++)n+=t.dataGenFns[i](e);if(e.attrs&&(n+="attrs:"+jr(e.attrs)+","),e.props&&(n+="domProps:"+jr(e.props)+","),e.events&&(n+=Ir(e.events,!1)+","),e.nativeEvents&&(n+=Ir(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t,n){var a=e.for||Object.keys(t).some((function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||Hr(n)})),i=!!e.if;if(!a)for(var s=e.parent;s;){if(s.slotScope&&"_empty_"!==s.slotScope||s.for){a=!0;break}s.if&&(i=!0),s=s.parent}var r=Object.keys(t).map((function(e){return $r(t[e],n)})).join(",");return"scopedSlots:_u(["+r+"]"+(a?",null,true":"")+(!a&&i?",null,false,"+function(e){var t=5381,n=e.length;for(;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(r):"")+")"}(e,e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var s=function(e,t){var n=e.children[0];0;if(n&&1===n.type){var a=Ur(n,t.options);return"inlineTemplate:{render:function(){"+a.render+"},staticRenderFns:["+a.staticRenderFns.map((function(e){return"function(){"+e+"}"})).join(",")+"]}"}}(e,t);s&&(n+=s+",")}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b("+n+',"'+e.tag+'",'+jr(e.dynamicAttrs)+")"),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function Hr(e){return 1===e.type&&("slot"===e.tag||e.children.some(Hr))}function $r(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return Nr(e,t,$r,"null");if(e.for&&!e.forProcessed)return Dr(e,t,$r);var a="_empty_"===e.slotScope?"":String(e.slotScope),i="function("+a+"){return "+("template"===e.tag?e.if&&n?"("+e.if+")?"+(zr(e,t)||"undefined")+":undefined":zr(e,t)||"undefined":Or(e,t))+"}",s=a?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+i+s+"}"}function zr(e,t,n,a,i){var s=e.children;if(s.length){var r=s[0];if(1===s.length&&r.for&&"template"!==r.tag&&"slot"!==r.tag){var o=n?t.maybeComponent(r)?",1":",0":"";return""+(a||Or)(r,t)+o}var u=n?function(e,t){for(var n=0,a=0;a<e.length;a++){var i=e[a];if(1===i.type){if(Gr(i)||i.ifConditions&&i.ifConditions.some((function(e){return Gr(e.block)}))){n=2;break}(t(i)||i.ifConditions&&i.ifConditions.some((function(e){return t(e.block)})))&&(n=1)}}return n}(s,t.maybeComponent):0,p=i||qr;return"["+s.map((function(e){return p(e,t)})).join(",")+"]"+(u?","+u:"")}}function Gr(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function qr(e,t){return 1===e.type?Or(e,t):3===e.type&&e.isComment?function(e){return"_e("+JSON.stringify(e.text)+")"}(e):function(e){return"_v("+(2===e.type?e.expression:Kr(JSON.stringify(e.text)))+")"}(e)}function jr(e){for(var t="",n="",a=0;a<e.length;a++){var i=e[a],s=Kr(i.value);i.dynamic?n+=i.name+","+s+",":t+='"'+i.name+'":'+s+","}return t="{"+t.slice(0,-1)+"}",n?"_d("+t+",["+n.slice(0,-1)+"])":t}function Kr(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");function Yr(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),V}}function Qr(e){var t=Object.create(null);return function(n,a,i){(a=I({},a)).warn;delete a.warn;var s=a.delimiters?String(a.delimiters)+n:n;if(t[s])return t[s];var r=e(n,a);var o={},u=[];return o.render=Yr(r.render,u),o.staticRenderFns=r.staticRenderFns.map((function(e){return Yr(e,u)})),t[s]=o}}var Xr,Jr,Zr=(Xr=function(e,t){var n=or(e.trim(),t);!1!==t.optimize&&Mr(n,t);var a=Ur(n,t);return{ast:n,render:a.render,staticRenderFns:a.staticRenderFns}},function(e){function t(t,n){var a=Object.create(e),i=[],s=[];if(n)for(var r in n.modules&&(a.modules=(e.modules||[]).concat(n.modules)),n.directives&&(a.directives=I(Object.create(e.directives||null),n.directives)),n)"modules"!==r&&"directives"!==r&&(a[r]=n[r]);a.warn=function(e,t,n){(n?s:i).push(e)};var o=Xr(t.trim(),a);return o.errors=i,o.tips=s,o}return{compile:t,compileToFunctions:Qr(t)}})(hr),eo=(Zr.compile,Zr.compileToFunctions);function to(e){return(Jr=Jr||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',Jr.innerHTML.indexOf("&#10;")>0}var no=!!j&&to(!1),ao=!!j&&to(!0),io=M((function(e){var t=ta(e);return t&&t.innerHTML})),so=Sn.prototype.$mount;Sn.prototype.$mount=function(e,t){if((e=e&&ta(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var a=n.template;if(a)if("string"==typeof a)"#"===a.charAt(0)&&(a=io(a));else{if(!a.nodeType)return this;a=a.innerHTML}else e&&(a=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(a){0;var i=eo(a,{outputSourceRange:!1,shouldDecodeNewlines:no,shouldDecodeNewlinesForHref:ao,delimiters:n.delimiters,comments:n.comments},this),s=i.render,r=i.staticRenderFns;n.render=s,n.staticRenderFns=r}}return so.call(this,e,t)},Sn.compile=eo,t.a=Sn}).call(this,n(0),n(7).setImmediate)},function(e){e.exports=JSON.parse('{"a":"hardhat-docgen","b":{"type":"git","url":"git+https://github.com/ItsNickBarry/hardhat-docgen.git"}}')},function(e,t,n){var a=n(5);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n(11).default)("0b345cf4",a,!1,{})},function(e,t,n){"use strict";n(3)},function(e,t,n){(t=e.exports=n(6)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600;700&display=swap);",""]),t.push([e.i,"\nhtml,\nbody {\n  font-family: 'Source Code Pro', monospace;\n}\n",""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",a=e[3];if(!a)return n;if(t&&"function"==typeof btoa){var i=(r=a,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),s=a.sources.map((function(e){return"/*# sourceURL="+a.sourceRoot+e+" */"}));return[n].concat(s).concat([i]).join("\n")}var r;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var a={},i=0;i<this.length;i++){var s=this[i][0];null!=s&&(a[s]=!0)}for(i=0;i<e.length;i++){var r=e[i];null!=r[0]&&a[r[0]]||(n&&!r[2]?r[2]=n:n&&(r[2]="("+r[2]+") and ("+n+")"),t.push(r))}},t}},function(e,t,n){(function(e){var a=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function s(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new s(i.call(setTimeout,a,arguments),clearTimeout)},t.setInterval=function(){return new s(i.call(setInterval,a,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},s.prototype.unref=s.prototype.ref=function(){},s.prototype.close=function(){this._clearFn.call(a,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(8),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var a,i,s,r,o,u=1,p={},l=!1,d=e.document,y=Object.getPrototypeOf&&Object.getPrototypeOf(e);y=y&&y.setTimeout?y:e,"[object process]"==={}.toString.call(e.process)?a=function(e){t.nextTick((function(){m(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((s=new MessageChannel).port1.onmessage=function(e){m(e.data)},a=function(e){s.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(i=d.documentElement,a=function(e){var t=d.createElement("script");t.onreadystatechange=function(){m(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):a=function(e){setTimeout(m,0,e)}:(r="setImmediate$"+Math.random()+"$",o=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(r)&&m(+t.data.slice(r.length))},e.addEventListener?e.addEventListener("message",o,!1):e.attachEvent("onmessage",o),a=function(t){e.postMessage(r+t,"*")}),y.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return p[u]=i,a(u),u++},y.clearImmediate=c}function c(e){delete p[e]}function m(e){if(l)setTimeout(m,0,e);else{var t=p[e];if(t){l=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{c(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(0),n(9))},function(e,t){var n,a,i=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(n===setTimeout)return setTimeout(e,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{a="function"==typeof clearTimeout?clearTimeout:r}catch(e){a=r}}();var u,p=[],l=!1,d=-1;function y(){l&&u&&(l=!1,u.length?p=u.concat(p):d=-1,p.length&&c())}function c(){if(!l){var e=o(y);l=!0;for(var t=p.length;t;){for(u=p,p=[];++d<t;)u&&u[d].run();d=-1,t=p.length}u=null,l=!1,function(e){if(a===clearTimeout)return clearTimeout(e);if((a===r||!a)&&clearTimeout)return a=clearTimeout,clearTimeout(e);try{a(e)}catch(t){try{return a.call(null,e)}catch(t){return a.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function f(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new m(e,t)),1!==p.length||l||o(c)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=f,i.addListener=f,i.once=f,i.off=f,i.removeListener=f,i.removeAllListeners=f,i.emit=f,i.prependListener=f,i.prependOnceListener=f,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var a=n(1);
/*!
  * vue-router v3.5.2
  * (c) 2021 Evan You
  * @license MIT
  */function i(e,t){for(var n in t)e[n]=t[n];return e}var s=/[!'()*]/g,r=function(e){return"%"+e.charCodeAt(0).toString(16)},o=/%2C/g,u=function(e){return encodeURIComponent(e).replace(s,r).replace(o,",")};function p(e){try{return decodeURIComponent(e)}catch(e){0}return e}var l=function(e){return null==e||"object"==typeof e?e:String(e)};function d(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var n=e.replace(/\+/g," ").split("="),a=p(n.shift()),i=n.length>0?p(n.join("=")):null;void 0===t[a]?t[a]=i:Array.isArray(t[a])?t[a].push(i):t[a]=[t[a],i]})),t):t}function y(e){var t=e?Object.keys(e).map((function(t){var n=e[t];if(void 0===n)return"";if(null===n)return u(t);if(Array.isArray(n)){var a=[];return n.forEach((function(e){void 0!==e&&(null===e?a.push(u(t)):a.push(u(t)+"="+u(e)))})),a.join("&")}return u(t)+"="+u(n)})).filter((function(e){return e.length>0})).join("&"):null;return t?"?"+t:""}var c=/\/?$/;function m(e,t,n,a){var i=a&&a.options.stringifyQuery,s=t.query||{};try{s=f(s)}catch(e){}var r={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:s,params:t.params||{},fullPath:v(t,i),matched:e?b(e):[]};return n&&(r.redirectedFrom=v(n,i)),Object.freeze(r)}function f(e){if(Array.isArray(e))return e.map(f);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=f(e[n]);return t}return e}var T=m(null,{path:"/"});function b(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function v(e,t){var n=e.path,a=e.query;void 0===a&&(a={});var i=e.hash;return void 0===i&&(i=""),(n||"/")+(t||y)(a)+i}function g(e,t,n){return t===T?e===t:!!t&&(e.path&&t.path?e.path.replace(c,"")===t.path.replace(c,"")&&(n||e.hash===t.hash&&h(e.query,t.query)):!(!e.name||!t.name)&&(e.name===t.name&&(n||e.hash===t.hash&&h(e.query,t.query)&&h(e.params,t.params))))}function h(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e).sort(),a=Object.keys(t).sort();return n.length===a.length&&n.every((function(n,i){var s=e[n];if(a[i]!==n)return!1;var r=t[n];return null==s||null==r?s===r:"object"==typeof s&&"object"==typeof r?h(s,r):String(s)===String(r)}))}function w(e){for(var t=0;t<e.matched.length;t++){var n=e.matched[t];for(var a in n.instances){var i=n.instances[a],s=n.enteredCbs[a];if(i&&s){delete n.enteredCbs[a];for(var r=0;r<s.length;r++)i._isBeingDestroyed||s[r](i)}}}}var M={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,a=t.children,s=t.parent,r=t.data;r.routerView=!0;for(var o=s.$createElement,u=n.name,p=s.$route,l=s._routerViewCache||(s._routerViewCache={}),d=0,y=!1;s&&s._routerRoot!==s;){var c=s.$vnode?s.$vnode.data:{};c.routerView&&d++,c.keepAlive&&s._directInactive&&s._inactive&&(y=!0),s=s.$parent}if(r.routerViewDepth=d,y){var m=l[u],f=m&&m.component;return f?(m.configProps&&k(f,r,m.route,m.configProps),o(f,r,a)):o()}var T=p.matched[d],b=T&&T.components[u];if(!T||!b)return l[u]=null,o();l[u]={component:b},r.registerRouteInstance=function(e,t){var n=T.instances[u];(t&&n!==e||!t&&n===e)&&(T.instances[u]=t)},(r.hook||(r.hook={})).prepatch=function(e,t){T.instances[u]=t.componentInstance},r.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==T.instances[u]&&(T.instances[u]=e.componentInstance),w(p)};var v=T.props&&T.props[u];return v&&(i(l[u],{route:p,configProps:v}),k(b,r,p,v)),o(b,r,a)}};function k(e,t,n,a){var s=t.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0;default:0}}(n,a);if(s){s=t.props=i({},s);var r=t.attrs=t.attrs||{};for(var o in s)e.props&&o in e.props||(r[o]=s[o],delete s[o])}}function _(e,t,n){var a=e.charAt(0);if("/"===a)return e;if("?"===a||"#"===a)return t+e;var i=t.split("/");n&&i[i.length-1]||i.pop();for(var s=e.replace(/^\//,"").split("/"),r=0;r<s.length;r++){var o=s[r];".."===o?i.pop():"."!==o&&i.push(o)}return""!==i[0]&&i.unshift(""),i.join("/")}function C(e){return e.replace(/\/\//g,"/")}var S=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},R=W,A=E,x=function(e,t){return U(E(e,t),t)},I=U,P=D,V=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function E(e,t){for(var n,a=[],i=0,s=0,r="",o=t&&t.delimiter||"/";null!=(n=V.exec(e));){var u=n[0],p=n[1],l=n.index;if(r+=e.slice(s,l),s=l+u.length,p)r+=p[1];else{var d=e[s],y=n[2],c=n[3],m=n[4],f=n[5],T=n[6],b=n[7];r&&(a.push(r),r="");var v=null!=y&&null!=d&&d!==y,g="+"===T||"*"===T,h="?"===T||"*"===T,w=n[2]||o,M=m||f;a.push({name:c||i++,prefix:y||"",delimiter:w,optional:h,repeat:g,partial:v,asterisk:!!b,pattern:M?F(M):b?".*":"[^"+O(w)+"]+?"})}}return s<e.length&&(r+=e.substr(s)),r&&a.push(r),a}function B(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function U(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",N(t)));return function(t,a){for(var i="",s=t||{},r=(a||{}).pretty?B:encodeURIComponent,o=0;o<e.length;o++){var u=e[o];if("string"!=typeof u){var p,l=s[u.name];if(null==l){if(u.optional){u.partial&&(i+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(S(l)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(l)+"`");if(0===l.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var d=0;d<l.length;d++){if(p=r(l[d]),!n[o].test(p))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(p)+"`");i+=(0===d?u.prefix:u.delimiter)+p}}else{if(p=u.asterisk?encodeURI(l).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):r(l),!n[o].test(p))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+p+'"');i+=u.prefix+p}}else i+=u}return i}}function O(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function F(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function L(e,t){return e.keys=t,e}function N(e){return e&&e.sensitive?"":"i"}function D(e,t,n){S(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,i=!1!==n.end,s="",r=0;r<e.length;r++){var o=e[r];if("string"==typeof o)s+=O(o);else{var u=O(o.prefix),p="(?:"+o.pattern+")";t.push(o),o.repeat&&(p+="(?:"+u+p+")*"),s+=p=o.optional?o.partial?u+"("+p+")?":"(?:"+u+"("+p+"))?":u+"("+p+")"}}var l=O(n.delimiter||"/"),d=s.slice(-l.length)===l;return a||(s=(d?s.slice(0,-l.length):s)+"(?:"+l+"(?=$))?"),s+=i?"$":a&&d?"":"(?="+l+"|$)",L(new RegExp("^"+s,N(n)),t)}function W(e,t,n){return S(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var a=0;a<n.length;a++)t.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return L(e,t)}(e,t):S(e)?function(e,t,n){for(var a=[],i=0;i<e.length;i++)a.push(W(e[i],t,n).source);return L(new RegExp("(?:"+a.join("|")+")",N(n)),t)}(e,t,n):function(e,t,n){return D(E(e,n),t,n)}(e,t,n)}R.parse=A,R.compile=x,R.tokensToFunction=I,R.tokensToRegExp=P;var H=Object.create(null);function $(e,t,n){t=t||{};try{var a=H[e]||(H[e]=R.compile(e));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),a(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function z(e,t,n,a){var s="string"==typeof e?{path:e}:e;if(s._normalized)return s;if(s.name){var r=(s=i({},e)).params;return r&&"object"==typeof r&&(s.params=i({},r)),s}if(!s.path&&s.params&&t){(s=i({},s))._normalized=!0;var o=i(i({},t.params),s.params);if(t.name)s.name=t.name,s.params=o;else if(t.matched.length){var u=t.matched[t.matched.length-1].path;s.path=$(u,o,t.path)}else 0;return s}var p=function(e){var t="",n="",a=e.indexOf("#");a>=0&&(t=e.slice(a),e=e.slice(0,a));var i=e.indexOf("?");return i>=0&&(n=e.slice(i+1),e=e.slice(0,i)),{path:e,query:n,hash:t}}(s.path||""),y=t&&t.path||"/",c=p.path?_(p.path,y,n||s.append):y,m=function(e,t,n){void 0===t&&(t={});var a,i=n||d;try{a=i(e||"")}catch(e){a={}}for(var s in t){var r=t[s];a[s]=Array.isArray(r)?r.map(l):l(r)}return a}(p.query,s.query,a&&a.options.parseQuery),f=s.hash||p.hash;return f&&"#"!==f.charAt(0)&&(f="#"+f),{_normalized:!0,path:c,query:m,hash:f}}var G,q=function(){},j={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var t=this,n=this.$router,a=this.$route,s=n.resolve(this.to,a,this.append),r=s.location,o=s.route,u=s.href,p={},l=n.options.linkActiveClass,d=n.options.linkExactActiveClass,y=null==l?"router-link-active":l,f=null==d?"router-link-exact-active":d,T=null==this.activeClass?y:this.activeClass,b=null==this.exactActiveClass?f:this.exactActiveClass,v=o.redirectedFrom?m(null,z(o.redirectedFrom),null,n):o;p[b]=g(a,v,this.exactPath),p[T]=this.exact||this.exactPath?p[b]:function(e,t){return 0===e.path.replace(c,"/").indexOf(t.path.replace(c,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var n in t)if(!(n in e))return!1;return!0}(e.query,t.query)}(a,v);var h=p[b]?this.ariaCurrentValue:null,w=function(e){K(e)&&(t.replace?n.replace(r,q):n.push(r,q))},M={click:K};Array.isArray(this.event)?this.event.forEach((function(e){M[e]=w})):M[this.event]=w;var k={class:p},_=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:u,route:o,navigate:w,isActive:p[T],isExactActive:p[b]});if(_){if(1===_.length)return _[0];if(_.length>1||!_.length)return 0===_.length?e():e("span",{},_)}if("a"===this.tag)k.on=M,k.attrs={href:u,"aria-current":h};else{var C=function e(t){var n;if(t)for(var a=0;a<t.length;a++){if("a"===(n=t[a]).tag)return n;if(n.children&&(n=e(n.children)))return n}}(this.$slots.default);if(C){C.isStatic=!1;var S=C.data=i({},C.data);for(var R in S.on=S.on||{},S.on){var A=S.on[R];R in M&&(S.on[R]=Array.isArray(A)?A:[A])}for(var x in M)x in S.on?S.on[x].push(M[x]):S.on[x]=w;var I=C.data.attrs=i({},C.data.attrs);I.href=u,I["aria-current"]=h}else k.on=M}return e(this.tag,k,this.$slots.default)}};function K(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}var Y="undefined"!=typeof window;function Q(e,t,n,a,i){var s=t||[],r=n||Object.create(null),o=a||Object.create(null);e.forEach((function(e){!function e(t,n,a,i,s,r){var o=i.path,u=i.name;0;var p=i.pathToRegexpOptions||{},l=function(e,t,n){n||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==t)return e;return C(t.path+"/"+e)}(o,s,p.strict);"boolean"==typeof i.caseSensitive&&(p.sensitive=i.caseSensitive);var d={path:l,regex:X(l,p),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:u,parent:s,matchAs:r,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var s=r?C(r+"/"+i.path):void 0;e(t,n,a,i,d,s)}));n[d.path]||(t.push(d.path),n[d.path]=d);if(void 0!==i.alias)for(var y=Array.isArray(i.alias)?i.alias:[i.alias],c=0;c<y.length;++c){0;var m={path:y[c],children:i.children};e(t,n,a,m,s,d.path||"/")}u&&(a[u]||(a[u]=d))}(s,r,o,e,i)}));for(var u=0,p=s.length;u<p;u++)"*"===s[u]&&(s.push(s.splice(u,1)[0]),p--,u--);return{pathList:s,pathMap:r,nameMap:o}}function X(e,t){return R(e,[],t)}function J(e,t){var n=Q(e),a=n.pathList,i=n.pathMap,s=n.nameMap;function r(e,n,r){var o=z(e,n,!1,t),p=o.name;if(p){var l=s[p];if(!l)return u(null,o);var d=l.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof o.params&&(o.params={}),n&&"object"==typeof n.params)for(var y in n.params)!(y in o.params)&&d.indexOf(y)>-1&&(o.params[y]=n.params[y]);return o.path=$(l.path,o.params),u(l,o,r)}if(o.path){o.params={};for(var c=0;c<a.length;c++){var m=a[c],f=i[m];if(Z(f.regex,o.path,o.params))return u(f,o,r)}}return u(null,o)}function o(e,n){var a=e.redirect,i="function"==typeof a?a(m(e,n,null,t)):a;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return u(null,n);var o=i,p=o.name,l=o.path,d=n.query,y=n.hash,c=n.params;if(d=o.hasOwnProperty("query")?o.query:d,y=o.hasOwnProperty("hash")?o.hash:y,c=o.hasOwnProperty("params")?o.params:c,p){s[p];return r({_normalized:!0,name:p,query:d,hash:y,params:c},void 0,n)}if(l){var f=function(e,t){return _(e,t.parent?t.parent.path:"/",!0)}(l,e);return r({_normalized:!0,path:$(f,c),query:d,hash:y},void 0,n)}return u(null,n)}function u(e,n,a){return e&&e.redirect?o(e,a||n):e&&e.matchAs?function(e,t,n){var a=r({_normalized:!0,path:$(n,t.params)});if(a){var i=a.matched,s=i[i.length-1];return t.params=a.params,u(s,t)}return u(null,t)}(0,n,e.matchAs):m(e,n,a,t)}return{match:r,addRoute:function(e,t){var n="object"!=typeof e?s[e]:void 0;Q([t||e],a,i,s,n),n&&n.alias.length&&Q(n.alias.map((function(e){return{path:e,children:[t]}})),a,i,s,n)},getRoutes:function(){return a.map((function(e){return i[e]}))},addRoutes:function(e){Q(e,a,i,s)}}}function Z(e,t,n){var a=t.match(e);if(!a)return!1;if(!n)return!0;for(var i=1,s=a.length;i<s;++i){var r=e.keys[i-1];r&&(n[r.name||"pathMatch"]="string"==typeof a[i]?p(a[i]):a[i])}return!0}var ee=Y&&window.performance&&window.performance.now?window.performance:Date;function te(){return ee.now().toFixed(3)}var ne=te();function ae(){return ne}function ie(e){return ne=e}var se=Object.create(null);function re(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(e,""),n=i({},window.history.state);return n.key=ae(),window.history.replaceState(n,"",t),window.addEventListener("popstate",pe),function(){window.removeEventListener("popstate",pe)}}function oe(e,t,n,a){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var s=function(){var e=ae();if(e)return se[e]}(),r=i.call(e,t,n,a?s:null);r&&("function"==typeof r.then?r.then((function(e){me(e,s)})).catch((function(e){0})):me(r,s))}))}}function ue(){var e=ae();e&&(se[e]={x:window.pageXOffset,y:window.pageYOffset})}function pe(e){ue(),e.state&&e.state.key&&ie(e.state.key)}function le(e){return ye(e.x)||ye(e.y)}function de(e){return{x:ye(e.x)?e.x:window.pageXOffset,y:ye(e.y)?e.y:window.pageYOffset}}function ye(e){return"number"==typeof e}var ce=/^#\d/;function me(e,t){var n,a="object"==typeof e;if(a&&"string"==typeof e.selector){var i=ce.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var s=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var n=document.documentElement.getBoundingClientRect(),a=e.getBoundingClientRect();return{x:a.left-n.left-t.x,y:a.top-n.top-t.y}}(i,s={x:ye((n=s).x)?n.x:0,y:ye(n.y)?n.y:0})}else le(e)&&(t=de(e))}else a&&le(e)&&(t=de(e));t&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:t.x,top:t.y,behavior:e.behavior}):window.scrollTo(t.x,t.y))}var fe,Te=Y&&((-1===(fe=window.navigator.userAgent).indexOf("Android 2.")&&-1===fe.indexOf("Android 4.0")||-1===fe.indexOf("Mobile Safari")||-1!==fe.indexOf("Chrome")||-1!==fe.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function be(e,t){ue();var n=window.history;try{if(t){var a=i({},n.state);a.key=ae(),n.replaceState(a,"",e)}else n.pushState({key:ie(te())},"",e)}catch(n){window.location[t?"replace":"assign"](e)}}function ve(e){be(e,!0)}function ge(e,t,n){var a=function(i){i>=e.length?n():e[i]?t(e[i],(function(){a(i+1)})):a(i+1)};a(0)}var he={redirected:2,aborted:4,cancelled:8,duplicated:16};function we(e,t){return ke(e,t,he.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var t={};return _e.forEach((function(n){n in e&&(t[n]=e[n])})),JSON.stringify(t,null,2)}(t)+'" via a navigation guard.')}function Me(e,t){return ke(e,t,he.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+t.fullPath+'" with a new navigation.')}function ke(e,t,n,a){var i=new Error(a);return i._isRouter=!0,i.from=e,i.to=t,i.type=n,i}var _e=["params","query","hash"];function Ce(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function Se(e,t){return Ce(e)&&e._isRouter&&(null==t||e.type===t)}function Re(e){return function(t,n,a){var i=!1,s=0,r=null;Ae(e,(function(e,t,n,o){if("function"==typeof e&&void 0===e.cid){i=!0,s++;var u,p=Pe((function(t){var i;((i=t).__esModule||Ie&&"Module"===i[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:G.extend(t),n.components[o]=t,--s<=0&&a()})),l=Pe((function(e){var t="Failed to resolve async component "+o+": "+e;r||(r=Ce(e)?e:new Error(t),a(r))}));try{u=e(p,l)}catch(e){l(e)}if(u)if("function"==typeof u.then)u.then(p,l);else{var d=u.component;d&&"function"==typeof d.then&&d.then(p,l)}}})),i||a()}}function Ae(e,t){return xe(e.map((function(e){return Object.keys(e.components).map((function(n){return t(e.components[n],e.instances[n],e,n)}))})))}function xe(e){return Array.prototype.concat.apply([],e)}var Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Pe(e){var t=!1;return function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];if(!t)return t=!0,e.apply(this,n)}}var Ve=function(e,t){this.router=e,this.base=function(e){if(!e)if(Y){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(t),this.current=T,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Ee(e,t,n,a){var i=Ae(e,(function(e,a,i,s){var r=function(e,t){"function"!=typeof e&&(e=G.extend(e));return e.options[t]}(e,t);if(r)return Array.isArray(r)?r.map((function(e){return n(e,a,i,s)})):n(r,a,i,s)}));return xe(a?i.reverse():i)}function Be(e,t){if(t)return function(){return e.apply(t,arguments)}}Ve.prototype.listen=function(e){this.cb=e},Ve.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},Ve.prototype.onError=function(e){this.errorCbs.push(e)},Ve.prototype.transitionTo=function(e,t,n){var a,i=this;try{a=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(t){t(e)})),e}var s=this.current;this.confirmTransition(a,(function(){i.updateRoute(a),t&&t(a),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(a,s)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(a)})))}),(function(e){n&&n(e),e&&!i.ready&&(Se(e,he.redirected)&&s===T||(i.ready=!0,i.readyErrorCbs.forEach((function(t){t(e)}))))}))},Ve.prototype.confirmTransition=function(e,t,n){var a=this,i=this.current;this.pending=e;var s,r,o=function(e){!Se(e)&&Ce(e)&&(a.errorCbs.length?a.errorCbs.forEach((function(t){t(e)})):console.error(e)),n&&n(e)},u=e.matched.length-1,p=i.matched.length-1;if(g(e,i)&&u===p&&e.matched[u]===i.matched[p])return this.ensureURL(),o(((r=ke(s=i,e,he.duplicated,'Avoided redundant navigation to current location: "'+s.fullPath+'".')).name="NavigationDuplicated",r));var l=function(e,t){var n,a=Math.max(e.length,t.length);for(n=0;n<a&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}(this.current.matched,e.matched),d=l.updated,y=l.deactivated,c=l.activated,m=[].concat(function(e){return Ee(e,"beforeRouteLeave",Be,!0)}(y),this.router.beforeHooks,function(e){return Ee(e,"beforeRouteUpdate",Be)}(d),c.map((function(e){return e.beforeEnter})),Re(c)),f=function(t,n){if(a.pending!==e)return o(Me(i,e));try{t(e,i,(function(t){!1===t?(a.ensureURL(!0),o(function(e,t){return ke(e,t,he.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+t.fullPath+'" via a navigation guard.')}(i,e))):Ce(t)?(a.ensureURL(!0),o(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(o(we(i,e)),"object"==typeof t&&t.replace?a.replace(t):a.push(t)):n(t)}))}catch(e){o(e)}};ge(m,f,(function(){ge(function(e){return Ee(e,"beforeRouteEnter",(function(e,t,n,a){return function(e,t,n){return function(a,i,s){return e(a,i,(function(e){"function"==typeof e&&(t.enteredCbs[n]||(t.enteredCbs[n]=[]),t.enteredCbs[n].push(e)),s(e)}))}}(e,n,a)}))}(c).concat(a.router.resolveHooks),f,(function(){if(a.pending!==e)return o(Me(i,e));a.pending=null,t(e),a.router.app&&a.router.app.$nextTick((function(){w(e)}))}))}))},Ve.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Ve.prototype.setupListeners=function(){},Ve.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=T,this.pending=null};var Ue=function(e){function t(t,n){e.call(this,t,n),this._startLocation=Oe(this.base)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router,n=t.options.scrollBehavior,a=Te&&n;a&&this.listeners.push(re());var i=function(){var n=e.current,i=Oe(e.base);e.current===T&&i===e._startLocation||e.transitionTo(i,(function(e){a&&oe(t,e,n,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){be(C(a.base+e.fullPath)),oe(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){ve(C(a.base+e.fullPath)),oe(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.ensureURL=function(e){if(Oe(this.base)!==this.current.fullPath){var t=C(this.base+this.current.fullPath);e?be(t):ve(t)}},t.prototype.getCurrentLocation=function(){return Oe(this.base)},t}(Ve);function Oe(e){var t=window.location.pathname,n=t.toLowerCase(),a=e.toLowerCase();return!e||n!==a&&0!==n.indexOf(C(a+"/"))||(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var Fe=function(e){function t(t,n,a){e.call(this,t,n),a&&function(e){var t=Oe(e);if(!/^\/#/.test(t))return window.location.replace(C(e+"/#"+t)),!0}(this.base)||Le()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router.options.scrollBehavior,n=Te&&t;n&&this.listeners.push(re());var a=function(){var t=e.current;Le()&&e.transitionTo(Ne(),(function(a){n&&oe(e.router,a,t,!0),Te||He(a.fullPath)}))},i=Te?"popstate":"hashchange";window.addEventListener(i,a),this.listeners.push((function(){window.removeEventListener(i,a)}))}},t.prototype.push=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){We(e.fullPath),oe(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){He(e.fullPath),oe(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;Ne()!==t&&(e?We(t):He(t))},t.prototype.getCurrentLocation=function(){return Ne()},t}(Ve);function Le(){var e=Ne();return"/"===e.charAt(0)||(He("/"+e),!1)}function Ne(){var e=window.location.href,t=e.indexOf("#");return t<0?"":e=e.slice(t+1)}function De(e){var t=window.location.href,n=t.indexOf("#");return(n>=0?t.slice(0,n):t)+"#"+e}function We(e){Te?be(De(e)):window.location.hash=e}function He(e){Te?ve(De(e)):window.location.replace(De(e))}var $e=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index+1).concat(e),a.index++,t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index).concat(e),t&&t(e)}),n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var a=this.stack[n];this.confirmTransition(a,(function(){var e=t.current;t.index=n,t.updateRoute(a),t.router.afterHooks.forEach((function(t){t&&t(a,e)}))}),(function(e){Se(e,he.duplicated)&&(t.index=n)}))}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(Ve),ze=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=J(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!Te&&!1!==e.fallback,this.fallback&&(t="hash"),Y||(t="abstract"),this.mode=t,t){case"history":this.history=new Ue(this,e.base);break;case"hash":this.history=new Fe(this,e.base,this.fallback);break;case"abstract":this.history=new $e(this,e.base);break;default:0}},Ge={currentRoute:{configurable:!0}};function qe(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}ze.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},Ge.currentRoute.get=function(){return this.history&&this.history.current},ze.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var n=t.apps.indexOf(e);n>-1&&t.apps.splice(n,1),t.app===e&&(t.app=t.apps[0]||null),t.app||t.history.teardown()})),!this.app){this.app=e;var n=this.history;if(n instanceof Ue||n instanceof Fe){var a=function(e){n.setupListeners(),function(e){var a=n.current,i=t.options.scrollBehavior;Te&&i&&"fullPath"in e&&oe(t,e,a,!1)}(e)};n.transitionTo(n.getCurrentLocation(),a,a)}n.listen((function(e){t.apps.forEach((function(t){t._route=e}))}))}},ze.prototype.beforeEach=function(e){return qe(this.beforeHooks,e)},ze.prototype.beforeResolve=function(e){return qe(this.resolveHooks,e)},ze.prototype.afterEach=function(e){return qe(this.afterHooks,e)},ze.prototype.onReady=function(e,t){this.history.onReady(e,t)},ze.prototype.onError=function(e){this.history.onError(e)},ze.prototype.push=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.push(e,t,n)}));this.history.push(e,t,n)},ze.prototype.replace=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.replace(e,t,n)}));this.history.replace(e,t,n)},ze.prototype.go=function(e){this.history.go(e)},ze.prototype.back=function(){this.go(-1)},ze.prototype.forward=function(){this.go(1)},ze.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(e){return Object.keys(e.components).map((function(t){return e.components[t]}))}))):[]},ze.prototype.resolve=function(e,t,n){var a=z(e,t=t||this.history.current,n,this),i=this.match(a,t),s=i.redirectedFrom||i.fullPath;return{location:a,route:i,href:function(e,t,n){var a="hash"===n?"#"+t:t;return e?C(e+"/"+a):a}(this.history.base,s,this.mode),normalizedTo:a,resolved:i}},ze.prototype.getRoutes=function(){return this.matcher.getRoutes()},ze.prototype.addRoute=function(e,t){this.matcher.addRoute(e,t),this.history.current!==T&&this.history.transitionTo(this.history.getCurrentLocation())},ze.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==T&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(ze.prototype,Ge),ze.install=function e(t){if(!e.installed||G!==t){e.installed=!0,G=t;var n=function(e){return void 0!==e},a=function(e,t){var a=e.$options._parentVnode;n(a)&&n(a=a.data)&&n(a=a.registerRouteInstance)&&a(e,t)};t.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,a(this,this)},destroyed:function(){a(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",M),t.component("RouterLink",j);var i=t.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},ze.version="3.5.2",ze.isNavigationFailure=Se,ze.NavigationFailureType=he,ze.START_LOCATION=T,Y&&window.Vue&&window.Vue.use(ze);var je=ze,Ke=function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"min-h-screen bg-gray-100 px-4 pt-6"},[t("router-view")],1)};Ke._withStripped=!0;n(4);function Ye(e,t,n,a,i,s,r,o){var u,p="function"==typeof e?e.options:e;if(t&&(p.render=t,p.staticRenderFns=n,p._compiled=!0),a&&(p.functional=!0),s&&(p._scopeId="data-v-"+s),r?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},p._ssrRegister=u):i&&(u=o?function(){i.call(this,(p.functional?this.parent:this).$root.$options.shadowRoot)}:i),u)if(p.functional){p._injectStyles=u;var l=p.render;p.render=function(e,t){return u.call(t),l(e,t)}}else{var d=p.beforeCreate;p.beforeCreate=d?[].concat(d,u):[u]}return{exports:e,options:p}}var Qe=Ye({},Ke,[],!1,null,null,null);Qe.options.__file="node_modules/hardhat-docgen/src/App.vue";var Xe=Qe.exports,Je=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full space-y-10 md:max-w-screen-sm lg:max-w-screen-md mx-auto"},[n("HeaderBar"),e._v(" "),n("div",{staticClass:"pb-32"},[n("div",{staticClass:"space-y-4"},[n("span",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.source)+"\n      ")]),e._v(" "),n("h1",{staticClass:"text-xl"},[e._v("\n        "+e._s(e.json.name)+"\n      ")]),e._v(" "),n("h2",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.title)+"\n      ")]),e._v(" "),n("h2",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.author)+"\n      ")]),e._v(" "),n("p",[e._v(e._s(e.json.notice))]),e._v(" "),n("p",[e._v(e._s(e.json.details))])]),e._v(" "),n("div",{staticClass:"mt-8"},[e.json.hasOwnProperty("constructor")?n("Member",{attrs:{json:e.json.constructor}}):e._e()],1),e._v(" "),n("div",{staticClass:"mt-8"},[e.json.receive?n("Member",{attrs:{json:e.json.receive}}):e._e()],1),e._v(" "),n("div",{staticClass:"mt-8"},[e.json.fallback?n("Member",{attrs:{json:e.json.fallback}}):e._e()],1),e._v(" "),e.json.events?n("MemberSet",{attrs:{title:"Events",json:e.json.events}}):e._e(),e._v(" "),e.json.stateVariables?n("MemberSet",{attrs:{title:"State Variables",json:e.json.stateVariables}}):e._e(),e._v(" "),e.json.methods?n("MemberSet",{attrs:{title:"Methods",json:e.json.methods}}):e._e()],1),e._v(" "),n("FooterBar")],1)};Je._withStripped=!0;var Ze=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bg-gray-100 fixed bottom-0 right-0 w-full border-t border-dashed border-gray-300"},[n("div",{staticClass:"w-full text-center py-2 md:max-w-screen-sm lg:max-w-screen-md mx-auto"},[n("button",{staticClass:"py-1 px-2 text-gray-500",on:{click:function(t){return e.openLink(e.repository)}}},[e._v("\n      built with "+e._s(e.name)+"\n    ")])])])};Ze._withStripped=!0;var et=n(2),tt=Ye({data:function(){return{repository:et.b,name:et.a}},methods:{openLink(e){window.open(e,"_blank")}}},Ze,[],!1,null,null,null);tt.options.__file="node_modules/hardhat-docgen/src/components/FooterBar.vue";var nt=tt.exports,at=function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"w-full border-b border-dashed py-2 border-gray-300"},[t("router-link",{staticClass:"py-2 text-gray-500",attrs:{to:"/"}},[this._v("\n    <- Go back\n  ")])],1)};at._withStripped=!0;var it=Ye({},at,[],!1,null,null,null);it.options.__file="node_modules/hardhat-docgen/src/components/HeaderBar.vue";var st=it.exports,rt=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"border-2 border-gray-400 border-dashed w-full p-2"},[n("h3",{staticClass:"text-lg pb-2 mb-2 border-b-2 border-gray-400 border-dashed"},[e._v("\n    "+e._s(e.name)+" "+e._s(e.keywords)+" "+e._s(e.inputSignature)+"\n  ")]),e._v(" "),n("div",{staticClass:"space-y-3"},[n("p",[e._v(e._s(e.json.notice))]),e._v(" "),n("p",[e._v(e._s(e.json.details))]),e._v(" "),n("MemberSection",{attrs:{name:"Parameters",items:e.inputs}}),e._v(" "),n("MemberSection",{attrs:{name:"Return Values",items:e.outputs}})],1)])};rt._withStripped=!0;var ot=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.items.length>0?n("ul",[n("h4",{staticClass:"text-lg"},[e._v("\n    "+e._s(e.name)+"\n  ")]),e._v(" "),e._l(e.items,(function(t,a){return n("li",{key:a},[n("span",{staticClass:"bg-gray-300"},[e._v(e._s(t.type))]),e._v(" "),n("b",[e._v(e._s(t.name||"_"+a))]),t.desc?n("span",[e._v(": "),n("i",[e._v(e._s(t.desc))])]):e._e()])}))],2):e._e()};ot._withStripped=!0;var ut=Ye({props:{name:{type:String,default:""},items:{type:Array,default:()=>new Array}}},ot,[],!1,null,null,null);ut.options.__file="node_modules/hardhat-docgen/src/components/MemberSection.vue";var pt=Ye({components:{MemberSection:ut.exports},props:{json:{type:Object,default:()=>new Object}},computed:{name:function(){return this.json.name||this.json.type},keywords:function(){let e=[];return this.json.stateMutability&&e.push(this.json.stateMutability),"true"===this.json.anonymous&&e.push("anonymous"),e.join(" ")},params:function(){return this.json.params||{}},returns:function(){return this.json.returns||{}},inputs:function(){return(this.json.inputs||[]).map(e=>({...e,desc:this.params[e.name]}))},inputSignature:function(){return`(${this.inputs.map(e=>e.type).join(",")})`},outputs:function(){return(this.json.outputs||[]).map((e,t)=>({...e,desc:this.returns[e.name||"_"+t]}))},outputSignature:function(){return`(${this.outputs.map(e=>e.type).join(",")})`}}},rt,[],!1,null,null,null);pt.options.__file="node_modules/hardhat-docgen/src/components/Member.vue";var lt=pt.exports,dt=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full mt-8"},[n("h2",{staticClass:"text-lg"},[e._v(e._s(e.title))]),e._v(" "),e._l(Object.keys(e.json),(function(t){return n("Member",{key:t,staticClass:"mt-3",attrs:{json:e.json[t]}})}))],2)};dt._withStripped=!0;var yt=Ye({components:{Member:lt},props:{title:{type:String,default:""},json:{type:Object,default:()=>new Object}}},dt,[],!1,null,null,null);yt.options.__file="node_modules/hardhat-docgen/src/components/MemberSet.vue";var ct=Ye({components:{Member:lt,MemberSet:yt.exports,HeaderBar:st,FooterBar:nt},props:{json:{type:Object,default:()=>new Object}}},Je,[],!1,null,null,null);ct.options.__file="node_modules/hardhat-docgen/src/components/Contract.vue";var mt=ct.exports,ft=function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"w-full space-y-10 md:max-w-screen-sm lg:max-w-screen-md mx-auto pb-32"},[t("Branch",{attrs:{json:this.trees,name:"Sources:"}}),this._v(" "),t("FooterBar",{staticClass:"mt-20"})],1)};ft._withStripped=!0;var Tt=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("\n  "+e._s(e.name)+"\n  "),Array.isArray(e.json)?n("div",{staticClass:"pl-5"},e._l(e.json,(function(t,a){return n("div",{key:a},[n("router-link",{attrs:{to:t.source+":"+t.name}},[e._v("\n        "+e._s(t.name)+"\n      ")])],1)})),0):n("div",{staticClass:"pl-5"},e._l(Object.keys(e.json),(function(t){return n("div",{key:t},[n("Branch",{attrs:{json:e.json[t],name:t}})],1)})),0)])};Tt._withStripped=!0;var bt=Ye({name:"Branch",props:{name:{type:String,default:null},json:{type:[Object,Array],default:()=>new Object}}},Tt,[],!1,null,null,null);bt.options.__file="node_modules/hardhat-docgen/src/components/Branch.vue";var vt=Ye({components:{Branch:bt.exports,FooterBar:nt},props:{json:{type:Object,default:()=>new Object}},computed:{trees:function(){let e={};for(let t in this.json)t.replace("/","//").split(/\/(?=[^\/])/).reduce(function(e,n){if(!n.includes(":"))return e[n]=e[n]||{},e[n];{let[a]=n.split(":");e[a]=e[a]||[],e[a].push(this.json[t])}}.bind(this),e);return e}}},ft,[],!1,null,null,null);vt.options.__file="node_modules/hardhat-docgen/src/components/Index.vue";var gt=vt.exports;a.a.use(je);const ht={"contracts/base/ArrayLib.sol:ArrayLib":{source:"contracts/base/ArrayLib.sol",name:"ArrayLib",title:"Library for useful functions for address and uin256 arrays",author:"bogdoslav, belbix"},"contracts/base/TetuProxyControlled.sol:TetuProxyControlled":{source:"contracts/base/TetuProxyControlled.sol",name:"TetuProxyControlled",title:"EIP1967 Upgradable proxy implementation.",author:"belbix",details:"Only Controller has access and should implement time-lock for upgrade action.",constructor:{inputs:[{internalType:"address",name:"_logic",type:"address"}],stateMutability:"nonpayable",type:"constructor"},fallback:{stateMutability:"payable",type:"fallback"},receive:{stateMutability:"payable",type:"receive"},events:{"Upgraded(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"implementation",type:"address"}],name:"Upgraded",type:"event"}},methods:{"implementation()":{inputs:[],name:"implementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Return current logic implementation"},"upgrade(address)":{inputs:[{internalType:"address",name:"_newImplementation",type:"address"}],name:"upgrade",outputs:[],stateMutability:"nonpayable",type:"function",details:"Upgrade allowed only for Controller and should be done only after time-lock period",params:{_newImplementation:"Implementation address"},notice:"Upgrade contract logic"}}},"contracts/base/TetuProxyGov.sol:TetuProxyGov":{source:"contracts/base/TetuProxyGov.sol",name:"TetuProxyGov",title:"EIP1967 Upgradable proxy implementation.",author:"belbix",details:"Only Governance Wallet has access.      This Proxy should be used for non critical contracts only!",constructor:{inputs:[{internalType:"address",name:"_logic",type:"address"}],stateMutability:"nonpayable",type:"constructor"},fallback:{stateMutability:"payable",type:"fallback"},receive:{stateMutability:"payable",type:"receive"},events:{"Upgraded(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"implementation",type:"address"}],name:"Upgraded",type:"event"}},methods:{"implementation()":{inputs:[],name:"implementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Return current logic implementation"},"upgrade(address)":{inputs:[{internalType:"address",name:"_newImplementation",type:"address"}],name:"upgrade",outputs:[],stateMutability:"nonpayable",type:"function",details:"Upgrade allowed only for Governance. No time-lock period",params:{_newImplementation:"Implementation address"},notice:"Upgrade contract logic"}}},"contracts/base/UpgradeableProxy.sol:UpgradeableProxy":{source:"contracts/base/UpgradeableProxy.sol",name:"UpgradeableProxy",title:"OpenZeppelin https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4/contracts/proxy/UpgradeableProxy.sol",details:"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an      implementation address that can be changed. This address is stored in storage in the location specified by      https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the      implementation behind the proxy.      Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see      {TransparentUpgradeableProxy}.",fallback:{stateMutability:"payable",type:"fallback"},receive:{stateMutability:"payable",type:"receive"},events:{"Upgraded(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"implementation",type:"address"}],name:"Upgraded",type:"event",details:"Emitted when the implementation is upgraded."}}},"contracts/base/governance/Announcer.sol:Announcer":{source:"contracts/base/governance/Announcer.sol",name:"Announcer",title:"Contract for holding scheduling for time-lock actions",author:"belbix",details:"Use with TetuProxy",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"AddressChangeAnnounce(uint8,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{indexed:!1,internalType:"address",name:"newAddress",type:"address"}],name:"AddressChangeAnnounce",type:"event",notice:"Address change was announced"},"AnnounceClosed(bytes32)":{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"opHash",type:"bytes32"}],name:"AnnounceClosed",type:"event",notice:"Announce was closed"},"MintAnnounced(uint256,address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"totalAmount",type:"uint256"},{indexed:!1,internalType:"address",name:"_distributor",type:"address"},{indexed:!1,internalType:"address",name:"_otherNetworkFund",type:"address"}],name:"MintAnnounced",type:"event",notice:"Mint was announced"},"ProxyUpgradeAnnounced(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_contract",type:"address"},{indexed:!1,internalType:"address",name:"_implementation",type:"address"}],name:"ProxyUpgradeAnnounced",type:"event",notice:"Proxy Upgrade was announced"},"RatioChangeAnnounced(uint8,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{indexed:!1,internalType:"uint256",name:"numerator",type:"uint256"},{indexed:!1,internalType:"uint256",name:"denominator",type:"uint256"}],name:"RatioChangeAnnounced",type:"event",notice:"Ratio change was announced"},"StrategyUpgradeAnnounced(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_contract",type:"address"},{indexed:!1,internalType:"address",name:"_implementation",type:"address"}],name:"StrategyUpgradeAnnounced",type:"event",notice:"Strategy Upgrade was announced"},"TokenMoveAnnounced(uint8,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{indexed:!1,internalType:"address",name:"target",type:"address"},{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenMoveAnnounced",type:"event",notice:"Token movement was announced"},"UintChangeAnnounce(uint8,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"UintChangeAnnounce",type:"event",notice:"Uint256 change was announced"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"},"VaultStop(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_contract",type:"address"}],name:"VaultStop",type:"event",notice:"Vault stop action announced"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"announceAddressChange(uint8,address)":{inputs:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"address",name:"newAddress",type:"address"}],name:"announceAddressChange",outputs:[],stateMutability:"nonpayable",type:"function",params:{newAddress:"New address",opCode:"Operation code from the list                 0 - Governance                 1 - Dao                 2 - FeeRewardForwarder                 3 - Bookkeeper                 4 - MintHelper                 5 - RewardToken                 6 - FundToken                 7 - PsVault                 8 - Fund                 19 - VaultController"},notice:"Only Governance can do it.         Announce address change. You will able to setup new address after Time-lock period"},"announceMint(uint256,address,address,bool)":{inputs:[{internalType:"uint256",name:"totalAmount",type:"uint256"},{internalType:"address",name:"_distributor",type:"address"},{internalType:"address",name:"_otherNetworkFund",type:"address"},{internalType:"bool",name:"mintAllAvailable",type:"bool"}],name:"announceMint",outputs:[],stateMutability:"nonpayable",type:"function",params:{_distributor:"Distributor address, usually NotifyHelper",_otherNetworkFund:"Fund address, usually FundKeeper",totalAmount:"Total amount to mint.                    33% will go to current network, 67% to FundKeeper for other networks"},notice:"Only Governance can do it. Announce weekly mint. You will able to mint after Time-lock period"},"announceRatioChange(uint8,uint256,uint256)":{inputs:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"uint256",name:"numerator",type:"uint256"},{internalType:"uint256",name:"denominator",type:"uint256"}],name:"announceRatioChange",outputs:[],stateMutability:"nonpayable",type:"function",params:{denominator:"New denominator",numerator:"New numerator",opCode:"Operation code from the list                 9 - PsRatio                 10 - FundRatio"},notice:"Only Governance or DAO can do it.         Announce ratio change. You will able to setup new ratio after Time-lock period"},"announceStrategyUpgrades(address[],address[])":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"},{internalType:"address[]",name:"_strategies",type:"address[]"}],name:"announceStrategyUpgrades",outputs:[],stateMutability:"nonpayable",type:"function",params:{_strategies:"Strategy addresses",_targets:"Vault addresses"},notice:"Only Governance can do it. Announce strategy update for given vaults"},"announceTetuProxyUpgrade(address,address)":{inputs:[{internalType:"address",name:"_contract",type:"address"},{internalType:"address",name:"_implementation",type:"address"}],name:"announceTetuProxyUpgrade",outputs:[],stateMutability:"nonpayable",type:"function",params:{_contract:"Proxy contract address for upgrade",_implementation:"New implementation address"},notice:"Only Governance can do it. Announce Proxy upgrade. You will able to mint after Time-lock period"},"announceTetuProxyUpgradeBatch(address[],address[])":{inputs:[{internalType:"address[]",name:"_contracts",type:"address[]"},{internalType:"address[]",name:"_implementations",type:"address[]"}],name:"announceTetuProxyUpgradeBatch",outputs:[],stateMutability:"nonpayable",type:"function",params:{_contracts:"Array of Proxy contract addresses for upgrade",_implementations:"Array of New implementation addresses"},notice:"Only Governance can do it. Announce Batch Proxy upgrade"},"announceTokenMove(uint8,address,address,uint256)":{inputs:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"address",name:"target",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"announceTokenMove",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Amount that you want to move",opCode:"Operation code from the list                 11 - ControllerTokenMove                 12 - StrategyTokenMove                 13 - FundTokenMove",target:"Target address",token:"Token that you want to move"},notice:"Only Governance can do it. Announce token movement. You will able to transfer after Time-lock period"},"announceUintChange(uint8,uint256)":{inputs:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"uint256",name:"newValue",type:"uint256"}],name:"announceUintChange",outputs:[],stateMutability:"nonpayable",type:"function",params:{newValue:"New value",opCode:"Operation code from the list                 20 - RewardBoostDuration                 21 - RewardRatioWithoutBoost"},notice:"Only Governance can do it.         Announce some single uint256 change. You will able to setup new value after Time-lock period"},"announceVaultStopBatch(address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"announceVaultStopBatch",outputs:[],stateMutability:"nonpayable",type:"function",params:{_vaults:"Vault addresses"},notice:"Only Governance can do it. Announce the stop vault action"},"clearAnnounce(bytes32,uint8,address)":{inputs:[{internalType:"bytes32",name:"opHash",type:"bytes32"},{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"address",name:"target",type:"address"}],name:"clearAnnounce",outputs:[],stateMutability:"nonpayable",type:"function",params:{opCode:"TimeLockOpCodes uint8 value",opHash:"Generated keccak256 opHash"},notice:"Only controller can use it. Clear announce after successful call time-locked function"},"closeAnnounce(uint8,bytes32,address)":{inputs:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"bytes32",name:"opHash",type:"bytes32"},{internalType:"address",name:"target",type:"address"}],name:"closeAnnounce",outputs:[],stateMutability:"nonpayable",type:"function",params:{opCode:"TimeLockOpCodes uint8 value",opHash:"keccak256(abi.encode()) code with attributes.",target:"Address for multi time lock. Set zero address if not required."},notice:"Close any announce. Use in emergency case."},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"initialize(address,uint256)":{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"uint256",name:"_timeLock",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address",_timeLock:"TimeLock period"},notice:"Initialize contract after setup it as proxy implementation"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"multiOpCodes(uint8)":{inputs:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"",type:"uint8"}],name:"multiOpCodes",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"multiTimeLockIndexes(uint8,address)":{inputs:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"",type:"uint8"},{internalType:"address",name:"",type:"address"}],name:"multiTimeLockIndexes",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"timeLock()":{inputs:[],name:"timeLock",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"view",type:"function",returns:{result:"TimeLock period"},notice:"Return time-lock period (in seconds) saved in the contract slot"},"timeLockIndexes(uint8)":{inputs:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"",type:"uint8"}],name:"timeLockIndexes",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"timeLockInfo(uint256)":{inputs:[{internalType:"uint256",name:"idx",type:"uint256"}],name:"timeLockInfo",outputs:[{components:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"bytes32",name:"opHash",type:"bytes32"},{internalType:"address",name:"target",type:"address"},{internalType:"address[]",name:"adrValues",type:"address[]"},{internalType:"uint256[]",name:"numValues",type:"uint256[]"}],internalType:"struct IAnnouncer.TimeLockInfo",name:"",type:"tuple"}],stateMutability:"view",type:"function",params:{idx:"Index of time lock info"},returns:{_0:"TimeLock information"},notice:"Return information about announced time-locks for given index"},"timeLockInfosLength()":{inputs:[],name:"timeLockInfosLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Array length"},notice:"Length of the the array of all undone announced actions"},"timeLockSchedule(bytes32)":{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"timeLockSchedule",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/base/governance/Bookkeeper.sol:Bookkeeper":{source:"contracts/base/governance/Bookkeeper.sol",name:"Bookkeeper",title:"Contract for holding statistical info and doesn't affect any funds.",author:"belbix",details:"Only not critical functional. Use with TetuProxy",events:{"RegisterFundKeeperEarned(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"RegisterFundKeeperEarned",type:"event",notice:"FundKeeper earned this USDC amount during doHardWork call"},"RegisterPpfsChange(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"},{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"RegisterPpfsChange",type:"event",notice:"Vault's PricePer Full Share changed"},"RegisterStrategy(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"value",type:"address"}],name:"RegisterStrategy",type:"event",notice:"Strategy added"},"RegisterStrategyEarned(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"strategy",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"RegisterStrategyEarned",type:"event",notice:"Strategy earned this TETU amount during doHardWork call"},"RegisterUserAction(address,uint256,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"bool",name:"deposit",type:"bool"}],name:"RegisterUserAction",type:"event",notice:"User deposit/withdraw action"},"RegisterUserEarned(address,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"address",name:"vault",type:"address"},{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"RegisterUserEarned",type:"event",notice:"User claim reward"},"RegisterVault(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"value",type:"address"}],name:"RegisterVault",type:"event",notice:"Vault added"},"RemoveStrategy(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"value",type:"address"}],name:"RemoveStrategy",type:"event",notice:"Strategy removed"},"RemoveVault(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"value",type:"address"}],name:"RemoveVault",type:"event",notice:"Vault removed"},"RewardDistribution(address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"},{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"time",type:"uint256"}],name:"RewardDistribution",type:"event",notice:"Reward distribution registered"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"_strategies(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"_strategies",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"_vaults(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"_vaults",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"addStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function",params:{_strategy:"Strategy address"},notice:"Add Strategy if it is not exist. Only Controller sender allowed"},"addVault(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"addVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{_vault:"Vault address"},notice:"Add Vault if it is not exist. Only Controller sender allowed"},"addVaultAndStrategy(address,address)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_strategy",type:"address"}],name:"addVaultAndStrategy",outputs:[],stateMutability:"nonpayable",type:"function",details:"Manually we should add a pair vault / strategy for keep both array in the same state",params:{_strategy:"Strategy address",_vault:"Vault address"},notice:"Add Vault and Strategy if they not exist. Only Controller or Governance"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"fundKeeperEarned(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"fundKeeperEarned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:"Initialize contract after setup it as proxy implementation"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"lastHardWork(address)":{inputs:[{internalType:"address",name:"vault",type:"address"}],name:"lastHardWork",outputs:[{components:[{internalType:"address",name:"strategy",type:"address"},{internalType:"uint256",name:"block",type:"uint256"},{internalType:"uint256",name:"time",type:"uint256"},{internalType:"uint256",name:"targetTokenAmount",type:"uint256"}],internalType:"struct IBookkeeper.HardWork",name:"",type:"tuple"}],stateMutability:"view",type:"function",params:{vault:"Vault address"},returns:{_0:"HardWork struct with result"},notice:"Return info about last doHardWork call for given vault"},"lastPpfsChange(address)":{inputs:[{internalType:"address",name:"vault",type:"address"}],name:"lastPpfsChange",outputs:[{components:[{internalType:"address",name:"vault",type:"address"},{internalType:"uint256",name:"block",type:"uint256"},{internalType:"uint256",name:"time",type:"uint256"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"oldBlock",type:"uint256"},{internalType:"uint256",name:"oldTime",type:"uint256"},{internalType:"uint256",name:"oldValue",type:"uint256"}],internalType:"struct IBookkeeper.PpfsChange",name:"",type:"tuple"}],stateMutability:"view",type:"function",params:{vault:"Vault address"},returns:{_0:"PpfsChange struct with result"},notice:"Return info about last PricePerFullShare change for given vault"},"registerFundKeeperEarned(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_fundTokenAmount",type:"uint256"}],name:"registerFundKeeperEarned",outputs:[],stateMutability:"nonpayable",type:"function",params:{_fundTokenAmount:"Earned amount"},notice:"Only FeeRewardForwarder action. Save Fund Token earned value for given token"},"registerPpfsChange(address,uint256)":{inputs:[{internalType:"address",name:"vault",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"registerPpfsChange",outputs:[],stateMutability:"nonpayable",type:"function",params:{value:"Price Per Full Share change",vault:"Vault address"},notice:"FeeRewardForwarder action.         Register Price Per Full Share change for given vault"},"registerRewardDistribution(address,address,uint256)":{inputs:[{internalType:"address",name:"vault",type:"address"},{internalType:"address",name:"rewardToken",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"registerRewardDistribution",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Reward amount",rewardToken:"Reward token address",vault:"Vault address"},notice:"Vault action.         Register reward distribution"},"registerStrategyEarned(uint256)":{inputs:[{internalType:"uint256",name:"_targetTokenAmount",type:"uint256"}],name:"registerStrategyEarned",outputs:[],stateMutability:"nonpayable",type:"function",details:"It should represent 100% of earned rewards including all fees.",params:{_targetTokenAmount:"Earned amount"},notice:"Only Strategy action. Save TETU earned values"},"registerUserAction(address,uint256,bool)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"bool",name:"_deposit",type:"bool"}],name:"registerUserAction",outputs:[],stateMutability:"nonpayable",type:"function",details:"Should register any mint/burn of the share token",params:{_amount:"Share amount for deposit/withdraw",_deposit:"true = deposit, false = withdraw",_user:"User address"},notice:"Vault action. Register user's deposit/withdraw"},"registerUserEarned(address,address,address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_rt",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"registerUserEarned",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Claimed amount",_rt:"Reward Token address",_user:"User address",_vault:"Vault address"},notice:"Only Vault can call it. Register user's claimed amount of given token"},"registerVaultTransfer(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"registerVaultTransfer",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Transaction amount",from:"Sender address",to:"Recipient address"},notice:"Vault action. Register any share token transfer.         Burn/mint ignored - should be handled in registerUserAction()"},"removeFromStrategies(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"removeFromStrategies",outputs:[],stateMutability:"nonpayable",type:"function",params:{index:"Index of strategy in the strategies array"},notice:"Governance action. Remove given Strategy from strategies array"},"removeFromVaults(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"removeFromVaults",outputs:[],stateMutability:"nonpayable",type:"function",params:{index:"Index of vault in the vault array"},notice:"Governance action. Remove given Vault from vaults array"},"strategies()":{inputs:[],name:"strategies",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",details:"This function should not use in any critical logics because DoS possible",returns:{_0:"Array of all registered strategies"},notice:"Return strategy array"},"strategiesLength()":{inputs:[],name:"strategiesLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Length of Array of all registered strategies"},notice:"Return strategies array length"},"strategyEarnedSnapshots(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"strategyEarnedSnapshots",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"strategyEarnedSnapshotsLength(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"strategyEarnedSnapshotsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"strategyEarnedSnapshotsTime(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"strategyEarnedSnapshotsTime",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"targetTokenEarned(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"targetTokenEarned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return total earned TETU tokens for strategy"},"userEarned(address,address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"userEarned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return earned token amount for given token and user"},"vaultRewards(address,address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"vaultRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultRewardsLength(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"vaultRewardsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultUsersBalances(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"vaultUsersBalances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return share(xToken) balance of given user"},"vaultUsersQuantity(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"vaultUsersQuantity",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return users quantity for given Vault"},"vaults()":{inputs:[],name:"vaults",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",details:"This function should not use in any critical logics because DoS possible",returns:{_0:"Array of all registered vaults"},notice:"Return vaults array"},"vaultsLength()":{inputs:[],name:"vaultsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Length of Array of all registered vaults"},notice:"Return vaults array length"}}},"contracts/base/governance/Controllable.sol:Controllable":{source:"contracts/base/governance/Controllable.sol",name:"Controllable",title:"Implement basic functionality for any contract that require strict control",author:"belbix",details:"Can be used with upgradeable pattern.      Require call initializeControllable() in any case.",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"}}},"contracts/base/governance/Controller.sol:Controller":{source:"contracts/base/governance/Controller.sol",name:"Controller",title:"A central contract for control everything.        Governance should be a Multi-Sig Wallet",author:"belbix",details:"Use with TetuProxy",events:{"AddedToWhiteList(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"value",type:"address"}],name:"AddedToWhiteList",type:"event",notice:"Contract added to whitelist"},"ControllerTokenMoved(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"recipient",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"ControllerTokenMoved",type:"event",notice:"Tokens moved from Controller contract to Governance"},"FundKeeperTokenMoved(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"fund",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"FundKeeperTokenMoved",type:"event",notice:"Tokens moved from Fund contract to Controller"},"HardWorkerAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"value",type:"address"}],name:"HardWorkerAdded",type:"event",notice:"HardWorker added"},"HardWorkerRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"value",type:"address"}],name:"HardWorkerRemoved",type:"event",notice:"HardWorker removed"},"RemovedFromWhiteList(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"value",type:"address"}],name:"RemovedFromWhiteList",type:"event",notice:"Contract removed from whitelist"},"SharePriceChangeLog(address,address,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"},{indexed:!0,internalType:"address",name:"strategy",type:"address"},{indexed:!1,internalType:"uint256",name:"oldSharePrice",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newSharePrice",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"SharePriceChangeLog",type:"event",notice:"DoHardWork completed and PricePerFullShare changed"},"StrategyTokenMoved(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"strategy",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"StrategyTokenMoved",type:"event",notice:"Tokens moved from Strategy contract to Governance"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"},"UpdatedAddressSlot(string,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdatedAddressSlot",type:"event",notice:"Address changed the variable with `name`"},"UpdatedUint256Slot(string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"UpdatedUint256Slot",type:"event",notice:"Value changed the variable with `name`"},"VaultAndStrategyAdded(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"vault",type:"address"},{indexed:!1,internalType:"address",name:"strategy",type:"address"}],name:"VaultAndStrategyAdded",type:"event",notice:"Vault and Strategy pair registered"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"addHardWorker(address)":{inputs:[{internalType:"address",name:"_worker",type:"address"}],name:"addHardWorker",outputs:[],stateMutability:"nonpayable",type:"function",params:{_worker:"New HardWorker address"},notice:"Only Governance can do it. Add HardWorker address."},"addStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function",params:{_strategy:"Strategy addresses"},notice:"Only Vault can do it. Register Strategy. Vault call it when gov set a strategy"},"addToWhiteList(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"addToWhiteList",outputs:[],stateMutability:"nonpayable",type:"function",params:{_target:"Contract address"},notice:"Only Governance or DAO can do it. Add to whitelist a contract address"},"addToWhiteListMulti(address[])":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"}],name:"addToWhiteListMulti",outputs:[],stateMutability:"nonpayable",type:"function",params:{_targets:"An array of contracts"},notice:"Only Governance or DAO can do it. Add to whitelist an array of addresses"},"addVaultAndStrategy(address,address)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_strategy",type:"address"}],name:"addVaultAndStrategy",outputs:[],stateMutability:"nonpayable",type:"function",params:{_strategy:"Strategy addresses",_vault:"Vault addresses"},notice:"Only Governance can do it. Register a pair Vault/Strategy"},"addVaultsAndStrategies(address[],address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"},{internalType:"address[]",name:"_strategies",type:"address[]"}],name:"addVaultsAndStrategies",outputs:[],stateMutability:"nonpayable",type:"function",params:{_strategies:"Strategy addresses",_vaults:"Vault addresses"},notice:"Only Governance can do it. Register pairs Vault/Strategy"},"announcer()":{inputs:[],name:"announcer",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Announcer address"},notice:"Return Announcer address"},"bookkeeper()":{inputs:[],name:"bookkeeper",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Bookkeeper address"},notice:"Return Bookkeeper address"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"controllerTokenMove(address,address,uint256)":{inputs:[{internalType:"address",name:"_recipient",type:"address"},{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"controllerTokenMove",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Token amount",_recipient:"Recipient address",_token:"Token address"},notice:"Only Governance can do it. Transfer token from this contract to governance address"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"dao()":{inputs:[],name:"dao",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"DAO address"},notice:"Return DAO address"},"doHardWork(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",params:{_vault:"Vault addresses"},notice:"Only Governance or HardWorker can do it. Call doHardWork from given Vault"},"feeRewardForwarder()":{inputs:[],name:"feeRewardForwarder",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FeeRewardForwarder address"},notice:"Return FeeRewardForwarder address"},"fund()":{inputs:[],name:"fund",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper address"},notice:"Return FundKeeper address"},"fundDenominator()":{inputs:[],name:"fundDenominator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper ratio denominator"},notice:"Return FundKeeper ratio's denominator"},"fundKeeperTokenMove(address,address,uint256)":{inputs:[{internalType:"address",name:"_fund",type:"address"},{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"fundKeeperTokenMove",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Token amount",_fund:"FundKeeper address",_token:"Token address"},notice:"Only Governance can do it. Transfer token from FundKeeper to controller"},"fundNumerator()":{inputs:[],name:"fundNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper ratio numerator"},notice:"Return FundKeeper ratio's numerator"},"fundToken()":{inputs:[],name:"fundToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper's main token address"},notice:"Return a token address used for FundKeeper"},"governance()":{inputs:[],name:"governance",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Governance address"},notice:"Return governance address"},"hardWorkers(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"hardWorkers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"initialize()":{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup      Initialize Controllable with sender address      Setup default values for PS and Fund ratio",notice:"Initialize contract after setup it as proxy implementation"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"initializeControllerStorage(address)":{inputs:[{internalType:"address",name:"_governance",type:"address"}],name:"initializeControllerStorage",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_governance:"Governance address"},notice:"Initialize contract after setup it as proxy implementation"},"isAllowedUser(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isAllowedUser",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if the address allowed"},notice:"Return true if the given address:         - not smart contract         - added to whitelist         - governance address         - hardworker         - reward distributor         - registered vault         - registered strategy"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isDao(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isDao",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if it is a DAO address"},notice:"Return true if the given address is DAO"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"isHardWorker(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isHardWorker",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if it is a HardWorker or Governance"},notice:"Return true if the given address is a HardWorker or Governance"},"isPoorRewardConsumer(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isPoorRewardConsumer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Return true if the given address is allowed for claim rewards without penalties"},"isRewardDistributor(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isRewardDistributor",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if it is a Reward Distributor or Governance or Strategy"},notice:"Return true if the given address is a Reward Distributor or Governance or Strategy"},"isValidStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"isValidStrategy",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_strategy:"Address for check"},returns:{_0:"true if it is a registered strategy"},notice:"Return true if the given address is registered strategy"},"isValidVault(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"isValidVault",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_vault:"Address for check"},returns:{_0:"true if it is a registered vault"},notice:"Return true if the given address is registered vault"},"mintAndDistribute(uint256,address,address,bool)":{inputs:[{internalType:"uint256",name:"totalAmount",type:"uint256"},{internalType:"address",name:"_distributor",type:"address"},{internalType:"address",name:"_otherNetworkFund",type:"address"},{internalType:"bool",name:"mintAllAvailable",type:"bool"}],name:"mintAndDistribute",outputs:[],stateMutability:"nonpayable",type:"function",params:{_distributor:"Distributor address, usually NotifyHelper",_otherNetworkFund:"Fund address, usually FundKeeper",mintAllAvailable:"if true instead of amount will be used maxTotalSupplyForCurrentBlock - totalSupply",totalAmount:"Total amount to mint.                    33% will go to current network, 67% to FundKeeper for other networks"},notice:"Only Governance can do it. Call announced mint"},"mintHelper()":{inputs:[],name:"mintHelper",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"MintHelper address"},notice:"Return MintHelper address"},"psDenominator()":{inputs:[],name:"psDenominator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Profit Sharing pool ratio denominator"},notice:"Return Profit Sharing pool ratio's denominator"},"psNumerator()":{inputs:[],name:"psNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Profit Sharing pool ratio numerator"},notice:"Return Profit Sharing pool ratio's numerator"},"psVault()":{inputs:[],name:"psVault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Profit Sharing pool address"},notice:"Return Profit Sharing pool address"},"pureRewardConsumers(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"pureRewardConsumers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"removeFromWhiteList(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"removeFromWhiteList",outputs:[],stateMutability:"nonpayable",type:"function",params:{_target:"Contract address"},notice:"Only Governance or DAO can do it. Remove from whitelist a contract address"},"removeFromWhiteListMulti(address[])":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"}],name:"removeFromWhiteListMulti",outputs:[],stateMutability:"nonpayable",type:"function",params:{_targets:"An array of contracts"},notice:"Only Governance or DAO can do it. Remove from whitelist an array of addresses"},"removeHardWorker(address)":{inputs:[{internalType:"address",name:"_worker",type:"address"}],name:"removeHardWorker",outputs:[],stateMutability:"nonpayable",type:"function",params:{_worker:"Exist HardWorker address"},notice:"Only Governance can do it. Remove HardWorker address."},"rewardDistribution(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"rewardDistribution",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"rewardToken()":{inputs:[],name:"rewardToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"TETU address"},notice:"Return TETU address"},"setAnnouncer(address)":{inputs:[{internalType:"address",name:"_newValue",type:"address"}],name:"setAnnouncer",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newValue:"New Announcer address"},notice:"Only Governance can do it. Change Announcer address.         Has dedicated time-lock logic for avoiding collisions."},"setBookkeeper(address)":{inputs:[{internalType:"address",name:"_bookkeeper",type:"address"}],name:"setBookkeeper",outputs:[],stateMutability:"nonpayable",type:"function",params:{_bookkeeper:"New Bookkeeper address"},notice:"Only Governance can do it. Change Bookkeeper address."},"setDao(address)":{inputs:[{internalType:"address",name:"_dao",type:"address"}],name:"setDao",outputs:[],stateMutability:"nonpayable",type:"function",params:{_dao:"New DAO address"},notice:"Only Governance can do it. Change DAO address."},"setFeeRewardForwarder(address)":{inputs:[{internalType:"address",name:"_feeRewardForwarder",type:"address"}],name:"setFeeRewardForwarder",outputs:[],stateMutability:"nonpayable",type:"function",params:{_feeRewardForwarder:"New FeeRewardForwarder address"},notice:"Only Governance can do it. Change FeeRewardForwarder address."},"setFund(address)":{inputs:[{internalType:"address",name:"_newValue",type:"address"}],name:"setFund",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newValue:"New FundKeeper address"},notice:"Only Governance can do it. Change FundKeeper address."},"setFundNumeratorDenominator(uint256,uint256)":{inputs:[{internalType:"uint256",name:"numerator",type:"uint256"},{internalType:"uint256",name:"denominator",type:"uint256"}],name:"setFundNumeratorDenominator",outputs:[],stateMutability:"nonpayable",type:"function",params:{denominator:"Ratio denominator. Should be greater than zero",numerator:"Ratio numerator. Should be less than denominator"},notice:"Only Governance or DAO can do it. Change Fund fee ratio.         numerator/denominator = ratio"},"setFundToken(address)":{inputs:[{internalType:"address",name:"_newValue",type:"address"}],name:"setFundToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newValue:"New FundToken address"},notice:"Only Governance can do it. Change FundToken(USDC by default) address."},"setGovernance(address)":{inputs:[{internalType:"address",name:"_governance",type:"address"}],name:"setGovernance",outputs:[],stateMutability:"nonpayable",type:"function",params:{_governance:"New governance address"},notice:"Only Governance can do it. Change governance address."},"setMintHelper(address)":{inputs:[{internalType:"address",name:"_newValue",type:"address"}],name:"setMintHelper",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newValue:"New MintHelper address"},notice:"Only Governance can do it. Change MintHelper address."},"setPSNumeratorDenominator(uint256,uint256)":{inputs:[{internalType:"uint256",name:"numerator",type:"uint256"},{internalType:"uint256",name:"denominator",type:"uint256"}],name:"setPSNumeratorDenominator",outputs:[],stateMutability:"nonpayable",type:"function",params:{denominator:"Ratio denominator. Should be greater than zero",numerator:"Ratio numerator. Should be less than denominator"},notice:"Only Governance or DAO can do it. Change Profit Sharing fee ratio.         numerator/denominator = ratio"},"setPsVault(address)":{inputs:[{internalType:"address",name:"_newValue",type:"address"}],name:"setPsVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newValue:"New ProfitSharing vault address"},notice:"Only Governance can do it. Change ProfitSharing vault address."},"setPureRewardConsumers(address[],bool)":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"},{internalType:"bool",name:"_flag",type:"bool"}],name:"setPureRewardConsumers",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Only Governance can do it. Allow given addresses claim rewards without any penalty"},"setRewardDistribution(address[],bool)":{inputs:[{internalType:"address[]",name:"_newRewardDistribution",type:"address[]"},{internalType:"bool",name:"_flag",type:"bool"}],name:"setRewardDistribution",outputs:[],stateMutability:"nonpayable",type:"function",params:{_flag:"Reward Distributor's flags - true active, false deactivated",_newRewardDistribution:"Reward Distributor's addresses"},notice:"Only Governance can do it. Add/Remove Reward Distributor address"},"setRewardToken(address)":{inputs:[{internalType:"address",name:"_newValue",type:"address"}],name:"setRewardToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newValue:"New RewardToken address"},notice:"Only Governance can do it. Change RewardToken(TETU) address."},"setVaultController(address)":{inputs:[{internalType:"address",name:"_newValue",type:"address"}],name:"setVaultController",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newValue:"New FundKeeper address"},notice:"Only Governance can do it. Change FundKeeper address."},"setVaultStrategy(address,address)":{inputs:[{internalType:"address",name:"_target",type:"address"},{internalType:"address",name:"_strategy",type:"address"}],name:"setVaultStrategy",outputs:[],stateMutability:"nonpayable",type:"function",params:{_strategy:"Strategy address",_target:"Vault address"},notice:"Only Governance can do it. Set announced strategy for given vault"},"setVaultStrategyBatch(address[],address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"},{internalType:"address[]",name:"_strategies",type:"address[]"}],name:"setVaultStrategyBatch",outputs:[],stateMutability:"nonpayable",type:"function",params:{_strategies:"Strategy addresses",_vaults:"Vault addresses"},notice:"Only Governance can do it. Set announced strategies for given vaults"},"strategies(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"strategies",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"strategyTokenMove(address,address,uint256)":{inputs:[{internalType:"address",name:"_strategy",type:"address"},{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"strategyTokenMove",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Token amount",_strategy:"Strategy address",_token:"Token address"},notice:"Only Governance can do it. Transfer token from strategy to governance address"},"upgradeTetuProxy(address,address)":{inputs:[{internalType:"address",name:"_contract",type:"address"},{internalType:"address",name:"_implementation",type:"address"}],name:"upgradeTetuProxy",outputs:[],stateMutability:"nonpayable",type:"function",params:{_contract:"Proxy contract address for upgrade",_implementation:"New implementation address"},notice:"Only Governance can do it. Upgrade announced proxy"},"upgradeTetuProxyBatch(address[],address[])":{inputs:[{internalType:"address[]",name:"_contracts",type:"address[]"},{internalType:"address[]",name:"_implementations",type:"address[]"}],name:"upgradeTetuProxyBatch",outputs:[],stateMutability:"nonpayable",type:"function",params:{_contracts:"Array of Proxy contract addresses for upgrade",_implementations:"Array of New implementation addresses"},notice:"Only Governance can do it. Upgrade batch announced proxies"},"vaultController()":{inputs:[],name:"vaultController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper address"},notice:"Return FundKeeper address"},"vaults(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"vaults",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"whiteList(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"whiteList",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}}},"contracts/base/governance/ControllerStorage.sol:ControllerStorage":{source:"contracts/base/governance/ControllerStorage.sol",name:"ControllerStorage",title:"Eternal storage + getters and setters pattern",author:"belbix",details:"If you will change a key value it will require setup it again",events:{"UpdatedAddressSlot(string,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdatedAddressSlot",type:"event",notice:"Address changed the variable with `name`"},"UpdatedUint256Slot(string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"UpdatedUint256Slot",type:"event",notice:"Value changed the variable with `name`"}},methods:{"addStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},"addToWhiteList(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"addToWhiteList",outputs:[],stateMutability:"nonpayable",type:"function"},"addToWhiteListMulti(address[])":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"}],name:"addToWhiteListMulti",outputs:[],stateMutability:"nonpayable",type:"function"},"addVaultAndStrategy(address,address)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_strategy",type:"address"}],name:"addVaultAndStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},"announcer()":{inputs:[],name:"announcer",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Announcer address"},notice:"Return Announcer address"},"bookkeeper()":{inputs:[],name:"bookkeeper",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Bookkeeper address"},notice:"Return Bookkeeper address"},"dao()":{inputs:[],name:"dao",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"DAO address"},notice:"Return DAO address"},"feeRewardForwarder()":{inputs:[],name:"feeRewardForwarder",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FeeRewardForwarder address"},notice:"Return FeeRewardForwarder address"},"fund()":{inputs:[],name:"fund",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper address"},notice:"Return FundKeeper address"},"fundDenominator()":{inputs:[],name:"fundDenominator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper ratio denominator"},notice:"Return FundKeeper ratio's denominator"},"fundNumerator()":{inputs:[],name:"fundNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper ratio numerator"},notice:"Return FundKeeper ratio's numerator"},"fundToken()":{inputs:[],name:"fundToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper's main token address"},notice:"Return a token address used for FundKeeper"},"governance()":{inputs:[],name:"governance",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Governance address"},notice:"Return governance address"},"initializeControllerStorage(address)":{inputs:[{internalType:"address",name:"_governance",type:"address"}],name:"initializeControllerStorage",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_governance:"Governance address"},notice:"Initialize contract after setup it as proxy implementation"},"isAllowedUser(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isAllowedUser",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isDao(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isDao",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isHardWorker(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isHardWorker",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isPoorRewardConsumer(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isPoorRewardConsumer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isRewardDistributor(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isRewardDistributor",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isValidStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"isValidStrategy",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isValidVault(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"isValidVault",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mintHelper()":{inputs:[],name:"mintHelper",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"MintHelper address"},notice:"Return MintHelper address"},"psDenominator()":{inputs:[],name:"psDenominator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Profit Sharing pool ratio denominator"},notice:"Return Profit Sharing pool ratio's denominator"},"psNumerator()":{inputs:[],name:"psNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Profit Sharing pool ratio numerator"},notice:"Return Profit Sharing pool ratio's numerator"},"psVault()":{inputs:[],name:"psVault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Profit Sharing pool address"},notice:"Return Profit Sharing pool address"},"removeFromWhiteList(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"removeFromWhiteList",outputs:[],stateMutability:"nonpayable",type:"function"},"removeFromWhiteListMulti(address[])":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"}],name:"removeFromWhiteListMulti",outputs:[],stateMutability:"nonpayable",type:"function"},"rewardToken()":{inputs:[],name:"rewardToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"TETU address"},notice:"Return TETU address"},"setFundNumeratorDenominator(uint256,uint256)":{inputs:[{internalType:"uint256",name:"numerator",type:"uint256"},{internalType:"uint256",name:"denominator",type:"uint256"}],name:"setFundNumeratorDenominator",outputs:[],stateMutability:"nonpayable",type:"function"},"setPSNumeratorDenominator(uint256,uint256)":{inputs:[{internalType:"uint256",name:"numerator",type:"uint256"},{internalType:"uint256",name:"denominator",type:"uint256"}],name:"setPSNumeratorDenominator",outputs:[],stateMutability:"nonpayable",type:"function"},"strategies(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"strategies",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"vaultController()":{inputs:[],name:"vaultController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper address"},notice:"Return FundKeeper address"},"vaults(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"vaults",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"whiteList(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"whiteList",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}}},"contracts/base/governance/FeeRewardForwarder.sol:FeeRewardForwarder":{source:"contracts/base/governance/FeeRewardForwarder.sol",name:"FeeRewardForwarder",title:"Convert rewards from external projects to TETU and FundToken(USDC by default)        and send them to Profit Sharing pool, FundKeeper and vaults        After swap TETU tokens are deposited to the Profit Share pool and give xTETU tokens.        These tokens send to Vault as a reward for vesting (4 weeks).        If external rewards have a destination Profit Share pool        it is just sent to the contract as TETU tokens increasing share price.",author:"belbix",events:{"FeeMovedToFund(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"fund",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"FeeMovedToFund",type:"event",notice:"Fee distributed to FundKeeper"},"FeeMovedToPs(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"ps",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"FeeMovedToPs",type:"event",notice:"Fee distributed to Profit Sharing pool"},"FeeMovedToVault(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"vault",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"FeeMovedToVault",type:"event",notice:"Fee distributed to vault"},"Liquidated(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"tokenIn",type:"address"},{indexed:!0,internalType:"address",name:"tokenOut",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Liquidated",type:"event",notice:"Simple liquidation was done"},"LiquidityAdded(address,address,uint256,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"router",type:"address"},{indexed:!1,internalType:"address",name:"token0",type:"address"},{indexed:!1,internalType:"uint256",name:"token0Amount",type:"uint256"},{indexed:!1,internalType:"address",name:"token1",type:"address"},{indexed:!1,internalType:"uint256",name:"token1Amount",type:"uint256"}],name:"LiquidityAdded",type:"event"},"RouteAdded(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"tokenIn",type:"address"},{indexed:!0,internalType:"address",name:"tokenOut",type:"address"}],name:"RouteAdded",type:"event",notice:"Added or changed a route with routers"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"},"UpdatedAddressSlot(string,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdatedAddressSlot",type:"event",notice:"Address changed the variable with `name`"},"UpdatedUint256Slot(string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"UpdatedUint256Slot",type:"event",notice:"Value changed the variable with `name`"}},methods:{"LIQUIDITY_DENOMINATOR()":{inputs:[],name:"LIQUIDITY_DENOMINATOR",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"distribute(uint256,address,address)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"distribute",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of tokens for distribute",_token:"Token for distribute",_vault:"Target vault"},returns:{_0:"Amount of distributed Target(TETU) tokens + FundKeeper fee (approx)"},notice:"Only Reward Distributor or Governance or Controller can call it.         Distribute rewards for given vault, move fees to PS and Fund         Under normal circumstances, sender is the strategy"},"fund()":{inputs:[],name:"fund",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper address"},notice:"Return FundKeeper address"},"fundToken()":{inputs:[],name:"fundToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"FundKeeper's main token address (USDC by default)"},notice:"Return a token address used for FundKeeper (USDC by default)"},"hasValidRoute(address,address)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_targetToken",type:"address"}],name:"hasValidRoute",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_targetToken:"Final token",_token:"Start token"},returns:{_0:"True if all fine"},notice:"Check a rout path and return true if valid"},"initialize(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup      Initialize Controllable with sender address",notice:"Initialize contract after setup it as proxy implementation"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"isMultiRouter(address,address)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_targetToken",type:"address"}],name:"isMultiRouter",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_targetToken:"Final token",_token:"Start token"},returns:{_0:"True if more than 1 router"},notice:"Check a rout path and return true if it has multiple routers"},"liquidate(address,address,uint256)":{inputs:[{internalType:"address",name:"tokenIn",type:"address"},{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"liquidate",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"Simple function for liquidate and send back the given token      No strict access"},"liquidityNumerator()":{inputs:[],name:"liquidityNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Numerator for part of profit that goes to TETU liquidity"},"liquidityRouter()":{inputs:[],name:"liquidityRouter",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Router address for adding liquidity"},"notifyCustomPool(address,address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_rewardPool",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"notifyCustomPool",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of token for liquidation",_rewardPool:"Vault address",_token:"Token for liquidation"},returns:{_0:"Amount of distributed Target(TETU) tokens"},notice:"Liquidate the token amount and send to the given vault.         Under normal circumstances, sender is the strategy"},"notifyPsPool(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"notifyPsPool",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of token for liquidation",_token:"Token for liquidation"},returns:{_0:"Amount of distributed Target(TETU) tokens"},notice:"Liquidate the token amount and send to the Profit Sharing pool.         Under normal circumstances, sender is the strategy"},"psVault()":{inputs:[],name:"psVault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Profit Sharing pool address"},notice:"Return Profit Sharing pool address"},"routers(address,address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"routers",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Routers for token liquidations"},"routes(address,address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"routes",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Routes for token liquidations"},"setConversionPath(address[],address[])":{inputs:[{internalType:"address[]",name:"_route",type:"address[]"},{internalType:"address[]",name:"_routers",type:"address[]"}],name:"setConversionPath",outputs:[],stateMutability:"nonpayable",type:"function",params:{_route:"Array with tokens that need to swap where first               is external project reward and final is Target/Fund token",_routers:"Swap platform routers. 1 for each swap operation in the route"},notice:"Only Governance or Controller can call it.         Sets the path for swapping tokens to the Target/Fund token address"},"setConversionPathMulti(address[][],address[][])":{inputs:[{internalType:"address[][]",name:"_routes",type:"address[][]"},{internalType:"address[][]",name:"_routers",type:"address[][]"}],name:"setConversionPathMulti",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Only Governance or Controller can call it.         Call setConversionPath for each route of given array"},"setLiquidityNumerator(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setLiquidityNumerator",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Only Governance or Controller can call it.         Sets numerator for a part of profit that goes instead of PS to TETU liquidity"},"setLiquidityRouter(address)":{inputs:[{internalType:"address",name:"_value",type:"address"}],name:"setLiquidityRouter",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Only Governance or Controller can call it.         Sets router for a pair with TETU liquidity"},"targetToken()":{inputs:[],name:"targetToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Target token (TETU) address"},notice:"Return Target token (TETU) address"}}},"contracts/base/governance/ForwarderStorage.sol:ForwarderStorage":{source:"contracts/base/governance/ForwarderStorage.sol",name:"ForwarderStorage",title:"Eternal storage + getters and setters pattern",author:"belbix",details:"If you will change a key value it will require setup it again",events:{"UpdatedAddressSlot(string,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdatedAddressSlot",type:"event",notice:"Address changed the variable with `name`"},"UpdatedUint256Slot(string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"UpdatedUint256Slot",type:"event",notice:"Value changed the variable with `name`"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"LIQUIDITY_DENOMINATOR()":{inputs:[],name:"LIQUIDITY_DENOMINATOR",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"liquidityNumerator()":{inputs:[],name:"liquidityNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Numerator for part of profit that goes to TETU liquidity"},"liquidityRouter()":{inputs:[],name:"liquidityRouter",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Router address for adding liquidity"},"routers(address,address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"routers",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Routers for token liquidations"},"routes(address,address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"routes",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Routes for token liquidations"}}},"contracts/base/governance/FundKeeper.sol:FundKeeper":{source:"contracts/base/governance/FundKeeper.sol",name:"FundKeeper",title:"Upgradable contract that holds money for further implementations",author:"belbix",details:"Use with TetuProxy",events:{"TokenWithdrawn(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenWithdrawn",type:"event",notice:"Governance moved token to Controller"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"initialize(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:"Initialize contract after setup it as proxy implementation"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"withdrawToController(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToController",outputs:[],stateMutability:"nonpayable",type:"function",params:{_token:"Token address",amount:"Token amount"},notice:"Move tokens to controller where money will be protected with time lock"}}},"contracts/base/governance/VaultController.sol:VaultController":{source:"contracts/base/governance/VaultController.sol",name:"VaultController",title:"Keep vaults settings and provide interface for vault actions        Governance should be a Multi-Sig Wallet",author:"belbix",details:"Use with TetuProxy",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"},"UpdatedAddressSlot(string,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdatedAddressSlot",type:"event",notice:"Address changed the variable with `name`"},"UpdatedUint256Slot(string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"UpdatedUint256Slot",type:"event",notice:"Value changed the variable with `name`"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"addRewardTokens(address[],address)":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"},{internalType:"address",name:"_rt",type:"address"}],name:"addRewardTokens",outputs:[],stateMutability:"nonpayable",type:"function",params:{_rt:"Reward token",_vaults:"Vault addresses"},notice:"Only Governance can do it. Add reward token for given vaults"},"changePpfsDecreasePermissions(address[],bool)":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"},{internalType:"bool",name:"_value",type:"bool"}],name:"changePpfsDecreasePermissions",outputs:[],stateMutability:"nonpayable",type:"function",params:{_targets:"Vault addresses",_value:"New value"},notice:"Only Governance can do it. Change permissions for ppfs decrease"},"changeVaultsStatuses(address[],bool[])":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"},{internalType:"bool[]",name:"_statuses",type:"bool[]"}],name:"changeVaultsStatuses",outputs:[],stateMutability:"nonpayable",type:"function",params:{_statuses:"Vault statuses",_targets:"Vault addresses"},notice:"Only Governance can do it. Change statuses of given vaults"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"initialize(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup      Initialize Controllable with sender address",notice:"Initialize contract after setup it as proxy implementation"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"initializeVaultControllerStorage()":{inputs:[],name:"initializeVaultControllerStorage",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",notice:"Initialize contract after setup it as proxy implementation"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"removeRewardTokens(address[],address)":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"},{internalType:"address",name:"_rt",type:"address"}],name:"removeRewardTokens",outputs:[],stateMutability:"nonpayable",type:"function",params:{_rt:"Reward token",_vaults:"Vault addresses"},notice:"Only Governance can do it. Remove reward token for given vaults"},"rewardBoostDuration()":{inputs:[],name:"rewardBoostDuration",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return vault reward boost duration"},"rewardRatioWithoutBoost()":{inputs:[],name:"rewardRatioWithoutBoost",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return vault reward base ration without any boost"},"setRewardBoostDuration(uint256)":{inputs:[{internalType:"uint256",name:"duration",type:"uint256"}],name:"setRewardBoostDuration",outputs:[],stateMutability:"nonpayable",type:"function",params:{duration:"Duration value in seconds"},notice:"Only Governance can do it         Change vaults reward boost duration"},"setRewardRatioWithoutBoost(uint256)":{inputs:[{internalType:"uint256",name:"ratio",type:"uint256"}],name:"setRewardRatioWithoutBoost",outputs:[],stateMutability:"nonpayable",type:"function",params:{ratio:"Ratio value in a range 0-100"},notice:"Only Governance can do it         Change vaults reward boost ratio"},"stopVault(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"stopVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{_vault:"Vault address"},notice:"Only Governance can do it. Stop vault and move reward tokens to controller"},"stopVaultsBatch(address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"stopVaultsBatch",outputs:[],stateMutability:"nonpayable",type:"function",params:{_vaults:"Vault addresses"},notice:"Only Governance can do it. Stop vaults and move reward tokens to controller"}}},"contracts/base/governance/VaultControllerStorage.sol:VaultControllerStorage":{source:"contracts/base/governance/VaultControllerStorage.sol",name:"VaultControllerStorage",title:"Eternal storage + getters and setters pattern",author:"belbix",details:"If you will change a key value it will require setup it again",events:{"UpdatedAddressSlot(string,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdatedAddressSlot",type:"event",notice:"Address changed the variable with `name`"},"UpdatedUint256Slot(string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"UpdatedUint256Slot",type:"event",notice:"Value changed the variable with `name`"}},methods:{"initializeVaultControllerStorage()":{inputs:[],name:"initializeVaultControllerStorage",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",notice:"Initialize contract after setup it as proxy implementation"},"rewardBoostDuration()":{inputs:[],name:"rewardBoostDuration",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return vault reward boost duration"},"rewardRatioWithoutBoost()":{inputs:[],name:"rewardRatioWithoutBoost",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return vault reward base ration without any boost"}}},"contracts/base/interface/IAnnouncer.sol:IAnnouncer":{source:"contracts/base/interface/IAnnouncer.sol",name:"IAnnouncer",methods:{"announceRatioChange(uint8,uint256,uint256)":{inputs:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"uint256",name:"numerator",type:"uint256"},{internalType:"uint256",name:"denominator",type:"uint256"}],name:"announceRatioChange",outputs:[],stateMutability:"nonpayable",type:"function"},"clearAnnounce(bytes32,uint8,address)":{inputs:[{internalType:"bytes32",name:"opHash",type:"bytes32"},{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"address",name:"target",type:"address"}],name:"clearAnnounce",outputs:[],stateMutability:"nonpayable",type:"function"},"timeLockInfo(uint256)":{inputs:[{internalType:"uint256",name:"idx",type:"uint256"}],name:"timeLockInfo",outputs:[{components:[{internalType:"enum IAnnouncer.TimeLockOpCodes",name:"opCode",type:"uint8"},{internalType:"bytes32",name:"opHash",type:"bytes32"},{internalType:"address",name:"target",type:"address"},{internalType:"address[]",name:"adrValues",type:"address[]"},{internalType:"uint256[]",name:"numValues",type:"uint256[]"}],internalType:"struct IAnnouncer.TimeLockInfo",name:"",type:"tuple"}],stateMutability:"nonpayable",type:"function"},"timeLockSchedule(bytes32)":{inputs:[{internalType:"bytes32",name:"opHash",type:"bytes32"}],name:"timeLockSchedule",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"}}},"contracts/base/interface/IBookkeeper.sol:IBookkeeper":{source:"contracts/base/interface/IBookkeeper.sol",name:"IBookkeeper",methods:{"addStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},"addVault(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"addVault",outputs:[],stateMutability:"nonpayable",type:"function"},"fundKeeperEarned(address)":{inputs:[{internalType:"address",name:"vault",type:"address"}],name:"fundKeeperEarned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lastHardWork(address)":{inputs:[{internalType:"address",name:"vault",type:"address"}],name:"lastHardWork",outputs:[{components:[{internalType:"address",name:"strategy",type:"address"},{internalType:"uint256",name:"block",type:"uint256"},{internalType:"uint256",name:"time",type:"uint256"},{internalType:"uint256",name:"targetTokenAmount",type:"uint256"}],internalType:"struct IBookkeeper.HardWork",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"lastPpfsChange(address)":{inputs:[{internalType:"address",name:"vault",type:"address"}],name:"lastPpfsChange",outputs:[{components:[{internalType:"address",name:"vault",type:"address"},{internalType:"uint256",name:"block",type:"uint256"},{internalType:"uint256",name:"time",type:"uint256"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"oldBlock",type:"uint256"},{internalType:"uint256",name:"oldTime",type:"uint256"},{internalType:"uint256",name:"oldValue",type:"uint256"}],internalType:"struct IBookkeeper.PpfsChange",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"registerFundKeeperEarned(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_fundTokenAmount",type:"uint256"}],name:"registerFundKeeperEarned",outputs:[],stateMutability:"nonpayable",type:"function"},"registerPpfsChange(address,uint256)":{inputs:[{internalType:"address",name:"vault",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"registerPpfsChange",outputs:[],stateMutability:"nonpayable",type:"function"},"registerRewardDistribution(address,address,uint256)":{inputs:[{internalType:"address",name:"vault",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"registerRewardDistribution",outputs:[],stateMutability:"nonpayable",type:"function"},"registerStrategyEarned(uint256)":{inputs:[{internalType:"uint256",name:"_targetTokenAmount",type:"uint256"}],name:"registerStrategyEarned",outputs:[],stateMutability:"nonpayable",type:"function"},"registerUserAction(address,uint256,bool)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"bool",name:"_deposit",type:"bool"}],name:"registerUserAction",outputs:[],stateMutability:"nonpayable",type:"function"},"registerUserEarned(address,address,address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_rt",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"registerUserEarned",outputs:[],stateMutability:"nonpayable",type:"function"},"registerVaultTransfer(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"registerVaultTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},"strategies()":{inputs:[],name:"strategies",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"strategiesLength()":{inputs:[],name:"strategiesLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"strategyEarnedSnapshots(address,uint256)":{inputs:[{internalType:"address",name:"strategy",type:"address"},{internalType:"uint256",name:"idx",type:"uint256"}],name:"strategyEarnedSnapshots",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"strategyEarnedSnapshotsLength(address)":{inputs:[{internalType:"address",name:"strategy",type:"address"}],name:"strategyEarnedSnapshotsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"strategyEarnedSnapshotsTime(address,uint256)":{inputs:[{internalType:"address",name:"strategy",type:"address"},{internalType:"uint256",name:"idx",type:"uint256"}],name:"strategyEarnedSnapshotsTime",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"targetTokenEarned(address)":{inputs:[{internalType:"address",name:"vault",type:"address"}],name:"targetTokenEarned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Should be incremented after strategy rewards distribution",params:{vault:"Strategy address"},returns:{_0:"Earned TETU tokens"},notice:"Return total earned TETU tokens for strategy"},"userEarned(address,address,address)":{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"address",name:"vault",type:"address"},{internalType:"address",name:"token",type:"address"}],name:"userEarned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Fills when user claim rewards",params:{token:"Token address",user:"User address",vault:"Vault address"},returns:{_0:"User's earned tokens amount"},notice:"Return earned token amount for given token and user"},"vaultRewards(address,address,uint256)":{inputs:[{internalType:"address",name:"vault",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"idx",type:"uint256"}],name:"vaultRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultRewardsLength(address,address)":{inputs:[{internalType:"address",name:"vault",type:"address"},{internalType:"address",name:"token",type:"address"}],name:"vaultRewardsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultUsersBalances(address,address)":{inputs:[{internalType:"address",name:"vault",type:"address"},{internalType:"address",name:"user",type:"address"}],name:"vaultUsersBalances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Should be calculated for each xToken transfer",params:{user:"User address",vault:"Vault address"},returns:{_0:"User share (xToken) balance"},notice:"Return share(xToken) balance of given user"},"vaultUsersQuantity(address)":{inputs:[{internalType:"address",name:"vault",type:"address"}],name:"vaultUsersQuantity",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Calculation based in Bookkeeper user balances",params:{vault:"Vault address"},returns:{_0:"Users quantity"},notice:"Return users quantity for given Vault"},"vaults()":{inputs:[],name:"vaults",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"vaultsLength()":{inputs:[],name:"vaultsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/IControllable.sol:IControllable":{source:"contracts/base/interface/IControllable.sol",name:"IControllable",methods:{"isController(address)":{inputs:[{internalType:"address",name:"_contract",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_contract",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/IController.sol:IController":{source:"contracts/base/interface/IController.sol",name:"IController",methods:{"addStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},"addToWhiteList(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"addToWhiteList",outputs:[],stateMutability:"nonpayable",type:"function"},"addToWhiteListMulti(address[])":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"}],name:"addToWhiteListMulti",outputs:[],stateMutability:"nonpayable",type:"function"},"addVaultAndStrategy(address,address)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_strategy",type:"address"}],name:"addVaultAndStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},"announcer()":{inputs:[],name:"announcer",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"bookkeeper()":{inputs:[],name:"bookkeeper",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"dao()":{inputs:[],name:"dao",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"feeRewardForwarder()":{inputs:[],name:"feeRewardForwarder",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"fund()":{inputs:[],name:"fund",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"fundDenominator()":{inputs:[],name:"fundDenominator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"fundNumerator()":{inputs:[],name:"fundNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"fundToken()":{inputs:[],name:"fundToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"governance()":{inputs:[],name:"governance",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"isAllowedUser(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isAllowedUser",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isDao(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isDao",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isHardWorker(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isHardWorker",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isPoorRewardConsumer(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isPoorRewardConsumer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isRewardDistributor(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isRewardDistributor",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isValidStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"isValidStrategy",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isValidVault(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"isValidVault",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mintHelper()":{inputs:[],name:"mintHelper",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"psDenominator()":{inputs:[],name:"psDenominator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"psNumerator()":{inputs:[],name:"psNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"psVault()":{inputs:[],name:"psVault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"removeFromWhiteList(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"removeFromWhiteList",outputs:[],stateMutability:"nonpayable",type:"function"},"removeFromWhiteListMulti(address[])":{inputs:[{internalType:"address[]",name:"_targets",type:"address[]"}],name:"removeFromWhiteListMulti",outputs:[],stateMutability:"nonpayable",type:"function"},"rewardToken()":{inputs:[],name:"rewardToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setFundNumeratorDenominator(uint256,uint256)":{inputs:[{internalType:"uint256",name:"numerator",type:"uint256"},{internalType:"uint256",name:"denominator",type:"uint256"}],name:"setFundNumeratorDenominator",outputs:[],stateMutability:"nonpayable",type:"function"},"setPSNumeratorDenominator(uint256,uint256)":{inputs:[{internalType:"uint256",name:"numerator",type:"uint256"},{internalType:"uint256",name:"denominator",type:"uint256"}],name:"setPSNumeratorDenominator",outputs:[],stateMutability:"nonpayable",type:"function"},"strategies(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"strategies",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"vaultController()":{inputs:[],name:"vaultController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaults(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"vaults",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"whiteList(address)":{inputs:[{internalType:"address",name:"_target",type:"address"}],name:"whiteList",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/IFeeRewardForwarder.sol:IFeeRewardForwarder":{source:"contracts/base/interface/IFeeRewardForwarder.sol",name:"IFeeRewardForwarder",methods:{"distribute(uint256,address,address)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"distribute",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"liquidate(address,address,uint256)":{inputs:[{internalType:"address",name:"tokenIn",type:"address"},{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"liquidate",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"notifyCustomPool(address,address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_rewardPool",type:"address"},{internalType:"uint256",name:"_maxBuyback",type:"uint256"}],name:"notifyCustomPool",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"notifyPsPool(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"notifyPsPool",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"}}},"contracts/base/interface/IFundKeeper.sol:IFundKeeper":{source:"contracts/base/interface/IFundKeeper.sol",name:"IFundKeeper",methods:{"withdrawToController(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToController",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/base/interface/IMasterChefStrategyCafe.sol:IMasterChefStrategyCafe":{source:"contracts/base/interface/IMasterChefStrategyCafe.sol",name:"IMasterChefStrategyCafe",methods:{"masterChefPool()":{inputs:[],name:"masterChefPool",outputs:[{internalType:"contract ICafeMasterChef",name:"",type:"address"}],stateMutability:"view",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/IMasterChefStrategyV1.sol:IMasterChefStrategyV1":{source:"contracts/base/interface/IMasterChefStrategyV1.sol",name:"IMasterChefStrategyV1",methods:{"masterChefPool()":{inputs:[],name:"masterChefPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/IMasterChefStrategyV2.sol:IMasterChefStrategyV2":{source:"contracts/base/interface/IMasterChefStrategyV2.sol",name:"IMasterChefStrategyV2",methods:{"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/IMasterChefStrategyV3.sol:IMasterChefStrategyV3":{source:"contracts/base/interface/IMasterChefStrategyV3.sol",name:"IMasterChefStrategyV3",methods:{"mcRewardPool()":{inputs:[],name:"mcRewardPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/IMintHelper.sol:IMintHelper":{source:"contracts/base/interface/IMintHelper.sol",name:"IMintHelper",methods:{"devFundsList(uint256)":{inputs:[{internalType:"uint256",name:"idx",type:"uint256"}],name:"devFundsList",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"},"mintAndDistribute(uint256,address,address,bool)":{inputs:[{internalType:"uint256",name:"totalAmount",type:"uint256"},{internalType:"address",name:"_distributor",type:"address"},{internalType:"address",name:"_otherNetworkFund",type:"address"},{internalType:"bool",name:"mintAllAvailable",type:"bool"}],name:"mintAndDistribute",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/base/interface/IRewardToken.sol:IRewardToken":{source:"contracts/base/interface/IRewardToken.sol",name:"IRewardToken",methods:{"HARD_CAP()":{inputs:[],name:"HARD_CAP",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MINTING_PERIOD()":{inputs:[],name:"MINTING_PERIOD",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"_log2(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"_log2",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"currentWeek()":{inputs:[],name:"currentWeek",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"maxTotalSupplyForCurrentBlock()":{inputs:[],name:"maxTotalSupplyForCurrentBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"startMinting()":{inputs:[],name:"startMinting",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/base/interface/ISNXStrategy.sol:ISNXStrategy":{source:"contracts/base/interface/ISNXStrategy.sol",name:"ISNXStrategy",methods:{"rewardPool()":{inputs:[],name:"rewardPool",outputs:[{internalType:"contract SNXRewardInterface",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/ISmartVault.sol:ISmartVault":{source:"contracts/base/interface/ISmartVault.sol",name:"ISmartVault",methods:{"active()":{inputs:[],name:"active",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"addRewardToken(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"addRewardToken",outputs:[],stateMutability:"nonpayable",type:"function"},"availableToInvestOut()":{inputs:[],name:"availableToInvestOut",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"changeActivityStatus(bool)":{inputs:[{internalType:"bool",name:"_active",type:"bool"}],name:"changeActivityStatus",outputs:[],stateMutability:"nonpayable",type:"function"},"changePpfsDecreaseAllowed(bool)":{inputs:[{internalType:"bool",name:"_value",type:"bool"}],name:"changePpfsDecreaseAllowed",outputs:[],stateMutability:"nonpayable",type:"function"},"deposit(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"depositAndInvest(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositAndInvest",outputs:[],stateMutability:"nonpayable",type:"function"},"depositFor(uint256,address)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"holder",type:"address"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function"},"duration()":{inputs:[],name:"duration",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"earned(address,address)":{inputs:[{internalType:"address",name:"rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"earned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"earnedWithBoost(address,address)":{inputs:[{internalType:"address",name:"rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"earnedWithBoost",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"exit()":{inputs:[],name:"exit",outputs:[],stateMutability:"nonpayable",type:"function"},"getAllRewards()":{inputs:[],name:"getAllRewards",outputs:[],stateMutability:"nonpayable",type:"function"},"getPricePerFullShare()":{inputs:[],name:"getPricePerFullShare",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getReward(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"getReward",outputs:[],stateMutability:"nonpayable",type:"function"},"getRewardTokenIndex(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"getRewardTokenIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lastTimeRewardApplicable(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"lastTimeRewardApplicable",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lastUpdateTimeForToken(address)":{inputs:[{internalType:"address",name:"_rt",type:"address"}],name:"lastUpdateTimeForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lockAllowed()":{inputs:[],name:"lockAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"lockPenalty()":{inputs:[],name:"lockPenalty",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lockPeriod()":{inputs:[],name:"lockPeriod",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"notifyRewardWithoutPeriodChange(address,uint256)":{inputs:[{internalType:"address",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"reward",type:"uint256"}],name:"notifyRewardWithoutPeriodChange",outputs:[],stateMutability:"nonpayable",type:"function"},"notifyTargetRewardAmount(address,uint256)":{inputs:[{internalType:"address",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"reward",type:"uint256"}],name:"notifyTargetRewardAmount",outputs:[],stateMutability:"nonpayable",type:"function"},"periodFinishForToken(address)":{inputs:[{internalType:"address",name:"_rt",type:"address"}],name:"periodFinishForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"ppfsDecreaseAllowed()":{inputs:[],name:"ppfsDecreaseAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"removeRewardToken(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"removeRewardToken",outputs:[],stateMutability:"nonpayable",type:"function"},"rewardPerToken(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"rewardPerToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardPerTokenStoredForToken(address)":{inputs:[{internalType:"address",name:"_rt",type:"address"}],name:"rewardPerTokenStoredForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardRateForToken(address)":{inputs:[{internalType:"address",name:"_rt",type:"address"}],name:"rewardRateForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"rewardTokensLength()":{inputs:[],name:"rewardTokensLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardsForToken(address,address)":{inputs:[{internalType:"address",name:"_rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"rewardsForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setLockPenalty(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setLockPenalty",outputs:[],stateMutability:"nonpayable",type:"function"},"setLockPeriod(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setLockPeriod",outputs:[],stateMutability:"nonpayable",type:"function"},"setStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"setStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},"stop()":{inputs:[],name:"stop",outputs:[],stateMutability:"nonpayable",type:"function"},"strategy()":{inputs:[],name:"strategy",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"underlyingBalanceInVault()":{inputs:[],name:"underlyingBalanceInVault",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"underlyingBalanceWithInvestment()":{inputs:[],name:"underlyingBalanceWithInvestment",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"underlyingBalanceWithInvestmentForHolder(address)":{inputs:[{internalType:"address",name:"holder",type:"address"}],name:"underlyingBalanceWithInvestmentForHolder",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"underlyingUnit()":{inputs:[],name:"underlyingUnit",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userBoostTs(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"userBoostTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"userLastDepositTs(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"userLastDepositTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"userLastWithdrawTs(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"userLastWithdrawTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"userLockTs(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"userLockTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"userRewardPerTokenPaidForToken(address,address)":{inputs:[{internalType:"address",name:"_rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"userRewardPerTokenPaidForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"numberOfShares",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/base/interface/IStrategy.sol:IStrategy":{source:"contracts/base/interface/IStrategy.sol",name:"IStrategy",methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function"},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/base/interface/IStrategyWithPool.sol:IStrategyWithPool":{source:"contracts/base/interface/IStrategyWithPool.sol",name:"IStrategyWithPool",methods:{"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/ITetuProxy.sol:ITetuProxy":{source:"contracts/base/interface/ITetuProxy.sol",name:"ITetuProxy",methods:{"implementation()":{inputs:[],name:"implementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"},"upgrade(address)":{inputs:[{internalType:"address",name:"_newImplementation",type:"address"}],name:"upgrade",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/base/interface/IUpgradeSource.sol:IUpgradeSource":{source:"contracts/base/interface/IUpgradeSource.sol",name:"IUpgradeSource",methods:{"finalizeUpgrade()":{inputs:[],name:"finalizeUpgrade",outputs:[],stateMutability:"nonpayable",type:"function"},"scheduleUpgrade(address)":{inputs:[{internalType:"address",name:"impl",type:"address"}],name:"scheduleUpgrade",outputs:[],stateMutability:"nonpayable",type:"function"},"shouldUpgrade()":{inputs:[],name:"shouldUpgrade",outputs:[{internalType:"bool",name:"",type:"bool"},{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/base/interface/IVaultController.sol:IVaultController":{source:"contracts/base/interface/IVaultController.sol",name:"IVaultController",methods:{"rewardBoostDuration()":{inputs:[],name:"rewardBoostDuration",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardRatioWithoutBoost()":{inputs:[],name:"rewardRatioWithoutBoost",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/base/strategies/NoopStrategy.sol:NoopStrategy":{source:"contracts/base/strategies/NoopStrategy.sol",name:"NoopStrategy",title:"Stubbing implementation of Base Strategy.        Use with Vaults that do nothing with underlying (like Profit Sharing)",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address[]",name:"__rewardTokens",type:"address[]"},{internalType:"address[]",name:"__assets",type:"address[]"},{internalType:"uint256",name:"__platform",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",details:"Single Tokens that need to have for investing. Using for statistical purposes",returns:{_0:"Array of assets"}},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",details:"Stub function for Strategy Base implementation"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function",details:"Platform name for statistical purposes",returns:{_0:"Platform enum index"}},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function",details:"Stub function for Strategy Base implementation"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"pure",type:"function",details:"Stub function for Strategy Base implementation"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"pure",type:"function",details:"Stub function for Strategy Base implementation"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/StrategyBase.sol:StrategyBase":{source:"contracts/base/strategies/StrategyBase.sol",name:"StrategyBase",title:"Abstract contract for base strategy functionality",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"stateVariable",details:"When this flag is true, the strategy will not be able to invest. But users should be able to withdraw."}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/curve/CurveStrategyFullBuyback.sol:CurveStrategyFullBuyback":{source:"contracts/base/strategies/curve/CurveStrategyFullBuyback.sol",name:"CurveStrategyFullBuyback",title:"Contract for Curve strategy implementation",author:"Oleg N",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"gague()":{inputs:[],name:"gague",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Curve gauge rewards pool"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the curve gauge pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes.  To get the result need to call claimable_reward_write from Gauge contract first,  otherwise returns 0",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Gauge pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the Gauge pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/iron-fold/IronFoldStrategyBase.sol:IronFoldStrategyBase":{source:"contracts/base/strategies/iron-fold/IronFoldStrategyBase.sol",name:"IronFoldStrategyBase",title:"Abstract contract for Iron lending strategy implementation with folding functionality",author:"JasperS13belbix",receive:{stateMutability:"payable",type:"receive"},events:{"BorrowTargetFactorNumeratorChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"BorrowTargetFactorNumeratorChanged",type:"event"},"CollateralFactorNumeratorChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"CollateralFactorNumeratorChanged",type:"event"},"FoldChanged(bool)":{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"value",type:"bool"}],name:"FoldChanged",type:"event"},"FoldStarted(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"borrowTargetFactorNumerator",type:"uint256"}],name:"FoldStarted",type:"event"},"FoldStopped()":{anonymous:!1,inputs:[],name:"FoldStopped",type:"event"},"MaxDepthReached()":{anonymous:!1,inputs:[],name:"MaxDepthReached",type:"event"},"NoMoneyForLiquidateUnderlying()":{anonymous:!1,inputs:[],name:"NoMoneyForLiquidateUnderlying",type:"event"},"Rebalanced(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"supplied",type:"uint256"},{indexed:!1,internalType:"uint256",name:"borrowed",type:"uint256"},{indexed:!1,internalType:"uint256",name:"borrowTarget",type:"uint256"}],name:"Rebalanced",type:"event"},"UnderlyingLiquidationFailed()":{anonymous:!1,inputs:[],name:"UnderlyingLiquidationFailed",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"ICE_R_TOKEN()":{inputs:[],name:"ICE_R_TOKEN",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"stateVariable",details:"ICE rToken address for reward price determination"},"MAX_DEPTH()":{inputs:[],name:"MAX_DEPTH",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Maximum folding loops"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"R_ETHER()":{inputs:[],name:"R_ETHER",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"W_MATIC()":{inputs:[],name:"W_MATIC",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"borrowTargetFactorNumerator()":{inputs:[],name:"borrowTargetFactorNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"borrowTargetFactorNumeratorStored()":{inputs:[],name:"borrowTargetFactorNumeratorStored",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Numerator value for the targeted borrow rate"},"borrowedInUnderlying()":{inputs:[],name:"borrowedInUnderlying",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"collateralFactorNumerator()":{inputs:[],name:"collateralFactorNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Numerator value for the asset market collateral value"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"factorDenominator()":{inputs:[],name:"factorDenominator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Denominator value for the both above mentioned ratios"},"fold()":{inputs:[],name:"fold",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Use folding"},"foldCostRatePerToken()":{inputs:[],name:"foldCostRatePerToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return a normalized to 18 decimal cost of folding"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"ironController()":{inputs:[],name:"ironController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Iron Controller address"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isFoldingProfitable()":{inputs:[],name:"isFoldingProfitable",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Return true if we can gain profit with folding"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the rToken contract"},"rToken()":{inputs:[],name:"rToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"RToken address"},"rTokenUnderlyingPrice(address)":{inputs:[{internalType:"address",name:"_rToken",type:"address"}],name:"rTokenUnderlyingPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return rToken price from Iron Oracle solution. Can be used on-chain safely"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"pure",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Iron MasterChef contract"},"rebalance()":{inputs:[],name:"rebalance",outputs:[],stateMutability:"nonpayable",type:"function",details:"Rebalances the borrow ratio"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"bal Balance amount in underlying tokens"},notice:"Strategy balance supplied minus borrowed"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"rewardsRateNormalised()":{inputs:[],name:"rewardsRateNormalised",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Calculate expected rewards rate for reward token"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"setBorrowTargetFactorNumeratorStored(uint256)":{inputs:[{internalType:"uint256",name:"_target",type:"uint256"}],name:"setBorrowTargetFactorNumeratorStored",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set borrow rate target"},"setCollateralFactorNumerator(uint256)":{inputs:[{internalType:"uint256",name:"_target",type:"uint256"}],name:"setCollateralFactorNumerator",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set collateral rate for asset market"},"setFold(bool)":{inputs:[{internalType:"bool",name:"_fold",type:"bool"}],name:"setFold",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set use folding"},"startFolding()":{inputs:[],name:"startFolding",outputs:[],stateMutability:"nonpayable",type:"function"},"stopFolding()":{inputs:[],name:"stopFolding",outputs:[],stateMutability:"nonpayable",type:"function"},"suppliedInUnderlying()":{inputs:[],name:"suppliedInUnderlying",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Strategy balance parameters to be tracked"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/masterchef-base/CafeStrategyBase.sol:CafeStrategyBase":{source:"contracts/base/strategies/masterchef-base/CafeStrategyBase.sol",name:"CafeStrategyBase",title:"Abstract contract for CafeSwap strategy implementation",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"masterChefPool()":{inputs:[],name:"masterChefPool",outputs:[{internalType:"contract ICafeMasterChef",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the MasterChef pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in MasterChef pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"bal Balance amount in underlying tokens"},notice:"Strategy balance in the MasterChef pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/masterchef-base/CosmicStrategyBase.sol:CosmicStrategyBase":{source:"contracts/base/strategies/masterchef-base/CosmicStrategyBase.sol",name:"CosmicStrategyBase",title:"Abstract contract for Cosmic strategy implementation",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"masterChefPool()":{inputs:[],name:"masterChefPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the MasterChef pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in MasterChef pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"bal Balance amount in underlying tokens"},notice:"Strategy balance in the MasterChef pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/masterchef-base/DinoStrategyFullBuyback.sol:DinoStrategyFullBuyback":{source:"contracts/base/strategies/masterchef-base/DinoStrategyFullBuyback.sol",name:"DinoStrategyFullBuyback",title:"Abstract contract for Dino strategy implementation",author:"belbix, bogdoslav",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"computeWeeklyPoolReward()":{inputs:[],name:"computeWeeklyPoolReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Weekly reward amount of DINO"},notice:"Calculate approximately weekly reward amounts for DINO"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Dino rewards pool"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Dino FossilFarms rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Dino FossilFarms pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Dino FossilFarms pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the Dino FossilFarms pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/masterchef-base/HermesStrategyFullBuyback.sol:HermesStrategyFullBuyback":{source:"contracts/base/strategies/masterchef-base/HermesStrategyFullBuyback.sol",name:"HermesStrategyFullBuyback",title:"Abstract contract for Hermes strategy implementation",author:"belbix, bogdoslav",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Hermes rewards pool"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Hermes MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Hermes MasterChef pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Hermes MasterChef pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the Hermes MasterChef pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/masterchef-base/IronMcStrategyBase.sol:IronMcStrategyBase":{source:"contracts/base/strategies/masterchef-base/IronMcStrategyBase.sol",name:"IronMcStrategyBase",title:"Abstract contract for Iron strategy implementation",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"mcRewardPool()":{inputs:[],name:"mcRewardPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Iron MasterChef contract"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Iron MasterChef contract"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"bal Balance amount in underlying tokens"},notice:"Strategy balance in the Iron MasterChef contract"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/masterchef-base/MCv2StrategyFullBuyback.sol:MCv2StrategyFullBuyback":{source:"contracts/base/strategies/masterchef-base/MCv2StrategyFullBuyback.sol",name:"MCv2StrategyFullBuyback",title:"Abstract contract for MasterChef strategy implementation",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"mcRewardPool()":{inputs:[],name:"mcRewardPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Master Chef pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Master Chef pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the Master Chef pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/masterchef-base/WaultStrategyFullBuyback.sol:WaultStrategyFullBuyback":{source:"contracts/base/strategies/masterchef-base/WaultStrategyFullBuyback.sol",name:"WaultStrategyFullBuyback",title:"Abstract contract for Wault strategy implementation",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Wault rewards pool"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"WexPolyMaster rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the WexPolyMaster pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in WexPolyMaster pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the WexPolyMaster pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/snx-base/QuickStrategyBaseV2.sol:QuickStrategyBaseV2":{source:"contracts/base/strategies/snx-base/QuickStrategyBaseV2.sol",name:"QuickStrategyBaseV2",title:"Abstract contract for Quick Swap strategy implementation",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"D_QUICK()":{inputs:[],name:"D_QUICK",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"QUICK()":{inputs:[],name:"QUICK",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Synthetix pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in the Synthetix pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPool()":{inputs:[],name:"rewardPool",outputs:[{internalType:"contract SNXRewardInterface",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Synthetix like pool with rewards"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance amount in underlying tokens"},notice:"Strategy balance in the Synthetix pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/snx-base/QuickStrategyDualBase.sol:QuickStrategyDualBase":{source:"contracts/base/strategies/snx-base/QuickStrategyDualBase.sol",name:"QuickStrategyDualBase",title:"Abstract contract for Quick Swap strategy implementation",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"D_QUICK()":{inputs:[],name:"D_QUICK",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"QUICK()":{inputs:[],name:"QUICK",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"WMATIC()":{inputs:[],name:"WMATIC",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"QuickSwap Dual farm pool"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Synthetix pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in the Synthetix pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance amount in underlying tokens"},notice:"Strategy balance in the Synthetix pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/snx-base/SNXStrategyFullBuyback.sol:SNXStrategyFullBuyback":{source:"contracts/base/strategies/snx-base/SNXStrategyFullBuyback.sol",name:"SNXStrategyFullBuyback",title:"Abstract contract for Synthetix strategy implementation",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Synthetix pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in the Synthetix pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPool()":{inputs:[],name:"rewardPool",outputs:[{internalType:"contract SNXRewardInterface",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Synthetix like poll with rewards"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance amount in underlying tokens"},notice:"Strategy balance in the Synthetix pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/strategies/tetu/TetuSwapStrategyBase.sol:TetuSwapStrategyBase":{source:"contracts/base/strategies/tetu/TetuSwapStrategyBase.sol",name:"TetuSwapStrategyBase",title:"Abstract contract for Tetu swap strategy implementation",author:"belbix",events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pair()":{inputs:[],name:"pair",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"TetuSwap pair"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Pair total supply"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",notice:"Stabbed to 0"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function",notice:"Stabbed to 0"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/base/token/MintHelper.sol:MintHelper":{source:"contracts/base/token/MintHelper.sol",name:"MintHelper",title:"Contract for interacting with RewardToken(TETU) contract. Owner of TETU.",author:"belbix",details:"Use with TetuProxy",events:{"FundsChanged(address[],uint256[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address[]",name:"funds",type:"address[]"},{indexed:!1,internalType:"uint256[]",name:"fractions",type:"uint256[]"}],name:"FundsChanged",type:"event",notice:"Dev Funds changed"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"BASE_RATIO()":{inputs:[],name:"BASE_RATIO",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"70% goes to Vault rewards"},"FIRST_NETWORK_RATIO()":{inputs:[],name:"FIRST_NETWORK_RATIO",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"33% goes to rewards for first network"},"FUNDS_RATIO()":{inputs:[],name:"FUNDS_RATIO",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"30% goes to different teams and the op fund"},"TOTAL_NETWORK_RATIO()":{inputs:[],name:"TOTAL_NETWORK_RATIO",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"67% goes to rewards for other networks"},"TOTAL_RATIO()":{inputs:[],name:"TOTAL_RATIO",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Total ratio should be 100%"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"devFunds(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"devFunds",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Dev Funds fraction mapping, be default contains only GnosisSafe Wallet"},"devFundsLength()":{inputs:[],name:"devFundsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Length of dev funds array"},notice:"Dev Funds array size"},"devFundsList(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"devFundsList",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"List of all Dev Funds"},"initialize(address,address[],uint256[])":{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address[]",name:"_funds",type:"address[]"},{internalType:"uint256[]",name:"_fundsFractions",type:"uint256[]"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address",_funds:"Dev Funds addresses, by default only one - GnosisSafe Wallet",_fundsFractions:"Dev Funds fractions"},notice:"Initialize contract after setup it as proxy implementation"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"mintAndDistribute(uint256,address,address,bool)":{inputs:[{internalType:"uint256",name:"totalAmount",type:"uint256"},{internalType:"address",name:"_distributor",type:"address"},{internalType:"address",name:"_otherNetworkFund",type:"address"},{internalType:"bool",name:"mintAllAvailable",type:"bool"}],name:"mintAndDistribute",outputs:[],stateMutability:"nonpayable",type:"function",details:"We will split weekly emission to two parts and use second part on other networks      Until we create a bridge contract we will send non polygon parts to FundKeeper contract",params:{_distributor:"Holder for a part of emission for Vault vesting. NotifyHelper by default",_otherNetworkFund:"Holder for a part for other networks. FundKeeper by default",mintAllAvailable:"if true instead of amount will be used maxTotalSupplyForCurrentBlock - totalSupply",totalAmount:"Total amount of tokens for mint.                    If mintAllAvailable=true must be zero.                    If mintAllAvailable=true maxTotalSupplyForCurrentBlock will be used"}},"setDevFunds(address[],uint256[])":{inputs:[{internalType:"address[]",name:"_funds",type:"address[]"},{internalType:"uint256[]",name:"_fractions",type:"uint256[]"}],name:"setDevFunds",outputs:[],stateMutability:"nonpayable",type:"function",params:{_fractions:"Funds fractions",_funds:"Funds addresses"},notice:"Set up new Dev Funds. Both arrays should have the same length"},"token()":{inputs:[],name:"token",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Token address"},notice:"Token linked to this contract. TETU by default"}}},"contracts/base/token/RewardToken.sol:RewardToken":{source:"contracts/base/token/RewardToken.sol",name:"RewardToken",title:"TETU token contract. Has strict weekly emission algorithm",author:"belbix",details:"Use with TetuProxy",constructor:{inputs:[{internalType:"address",name:"_owner",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"HARD_CAP()":{inputs:[],name:"HARD_CAP",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Maximum total supply -  1 billion"},"MINTING_PERIOD()":{inputs:[],name:"MINTING_PERIOD",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Vesting period - 4 years"},"_log2(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"_log2",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function",details:"Based on the iterative approximation algorithm. https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation Requirements: - x must be greater than or equal to SCALE, otherwise the result would be negative. Caveats: - The results are nor perfectly accurate to the last decimal,   due to the lossy precision of the iterative approximation.",params:{x:"The unsigned 60.18-decimal fixed-point number for which           to calculate the binary logarithm."},returns:{result:"The binary logarithm as an unsigned 60.18-decimal fixed-point number."},notice:"Calculates the binary logarithm of x."},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function",details:"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"cap()":{inputs:[],name:"cap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the cap on the token's total supply."},"currentWeek()":{inputs:[],name:"currentWeek",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Quantity of weeks"},notice:"Return quantity of weeks since minting started"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"maxTotalSupplyForCurrentBlock()":{inputs:[],name:"maxTotalSupplyForCurrentBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Maximum allowed supply"},notice:"Return maximum Total Supply for the current week.         The contract can't mint more than this value"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Amount of mint",to:"Mint destination"},notice:"Mint given amount for given address"},"mintingEndTs()":{inputs:[],name:"mintingEndTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"End date of minting"},"mintingStartTs()":{inputs:[],name:"mintingStartTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Start date of minting"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Immutable owner of the contract"},"startMinting()":{inputs:[],name:"startMinting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Strat vesting period"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}},"contracts/base/vault/SmartVault.sol:SmartVault":{source:"contracts/base/vault/SmartVault.sol",name:"SmartVault",title:"Smart Vault is a combination of implementations drawn from Synthetix pool        for their innovative reward vesting and Yearn vault for their share price model",author:"belbix",details:"Use with TetuProxy",events:{"AddedRewardToken(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"}],name:"AddedRewardToken",type:"event"},"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Deposit(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"beneficiary",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},"Invest(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Invest",type:"event"},"RemovedRewardToken(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"}],name:"RemovedRewardToken",type:"event"},"RewardAdded(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"rewardToken",type:"address"},{indexed:!1,internalType:"uint256",name:"reward",type:"uint256"}],name:"RewardAdded",type:"event"},"RewardDenied(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"address",name:"rewardToken",type:"address"},{indexed:!1,internalType:"uint256",name:"reward",type:"uint256"}],name:"RewardDenied",type:"event"},"RewardMovedToController(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"rewardToken",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"RewardMovedToController",type:"event"},"RewardPaid(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"address",name:"rewardToken",type:"address"},{indexed:!1,internalType:"uint256",name:"reward",type:"uint256"}],name:"RewardPaid",type:"event"},"RewardRecirculated(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"RewardRecirculated",type:"event"},"RewardSentToController(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"RewardSentToController",type:"event"},"Staked(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Staked",type:"event"},"StrategyAnnounced(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newStrategy",type:"address"},{indexed:!1,internalType:"uint256",name:"time",type:"uint256"}],name:"StrategyAnnounced",type:"event"},"StrategyChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newStrategy",type:"address"},{indexed:!1,internalType:"address",name:"oldStrategy",type:"address"}],name:"StrategyChanged",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"},"UpdatedAddressSlot(string,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdatedAddressSlot",type:"event",notice:"Address changed the variable with `name`"},"UpdatedBoolSlot(string,bool,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"bool",name:"oldValue",type:"bool"},{indexed:!1,internalType:"bool",name:"newValue",type:"bool"}],name:"UpdatedBoolSlot",type:"event",notice:"Boolean value changed the variable with `name`"},"UpdatedUint256Slot(string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"UpdatedUint256Slot",type:"event",notice:"Value changed the variable with `name`"},"Withdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"beneficiary",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"},"Withdrawn(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdrawn",type:"event"}},stateVariables:{"LOCK_PENALTY_DENOMINATOR()":{inputs:[],name:"LOCK_PENALTY_DENOMINATOR",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Denominator for penalty numerator"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"active()":{inputs:[],name:"active",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Vault status"},"addRewardToken(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"addRewardToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{rt:"Reward token address"},notice:"Add a reward token to the internal array"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"availableToInvestOut()":{inputs:[],name:"availableToInvestOut",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return amount of the underlying asset ready to invest to the strategy"},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"changeActivityStatus(bool)":{inputs:[{internalType:"bool",name:"_active",type:"bool"}],name:"changeActivityStatus",outputs:[],stateMutability:"nonpayable",type:"function",params:{_active:"Status true - active, false - deactivated"},notice:"Change the active state marker"},"changePpfsDecreaseAllowed(bool)":{inputs:[{internalType:"bool",name:"_value",type:"bool"}],name:"changePpfsDecreaseAllowed",outputs:[],stateMutability:"nonpayable",type:"function",params:{_value:"true - allowed, false - disallowed"},notice:"Change permission for decreasing ppfs during hard work process"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",notice:"ERC20 compatible decimals value. Should be the same as underlying"},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"deposit(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Allows for depositing the underlying asset in exchange for shares.         Approval is assumed."},"depositAndInvest(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositAndInvest",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Allows for depositing the underlying asset in exchange for shares.         Approval is assumed. Immediately invests the asset to the strategy"},"depositFor(uint256,address)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"holder",type:"address"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Allows for depositing the underlying asset in exchange for shares assigned to the holder.         This facilitates depositing for someone else"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Earn some money for honest work"},"duration()":{inputs:[],name:"duration",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Rewards vesting period"},"earned(address,address)":{inputs:[{internalType:"address",name:"rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"earned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return earned rewards for specific token and account (with 100% boost)         Accurate value returns only after updateRewards call         ((balanceOf(account)           * (rewardPerToken - userRewardPerTokenPaidForToken)) / 10**18) + rewardsForToken"},"earnedWithBoost(address,address)":{inputs:[{internalType:"address",name:"rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"earnedWithBoost",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return amount ready to claim, calculated with actual boost         Accurate value returns only after updateRewards call"},"exit()":{inputs:[],name:"exit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraw all and claim rewards"},"getAllRewards()":{inputs:[],name:"getAllRewards",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Update and Claim all rewards"},"getPricePerFullShare()":{inputs:[],name:"getPricePerFullShare",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Price per full share (PPFS)         Vaults with 100% buybacks have a value of 1 constantly         (underlyingUnit() * underlyingBalanceWithInvestment()) / totalSupply()"},"getReward(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"getReward",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Update and Claim rewards for specific token"},"getRewardTokenIndex(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"getRewardTokenIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return reward token index         If the return value is MAX_UINT256, it means that         the specified reward token is not in the list"},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"initializeSmartVault(string,string,address,address,uint256,bool,address)":{inputs:[{internalType:"string",name:"_name",type:"string"},{internalType:"string",name:"_symbol",type:"string"},{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"uint256",name:"_duration",type:"uint256"},{internalType:"bool",name:"_lockAllowed",type:"bool"},{internalType:"address",name:"_rewardToken",type:"address"}],name:"initializeSmartVault",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address",_duration:"Rewards duration",_lockAllowed:"Set true with lock mechanic requires",_name:"ERC20 name",_rewardToken:"Reward token address. Set zero address if not requires",_symbol:"ERC20 symbol",_underlying:"Vault underlying address"},notice:"Initialize contract after setup it as proxy implementation"},"initializeVaultStorage(address,uint256,bool)":{inputs:[{internalType:"address",name:"_underlyingToken",type:"address"},{internalType:"uint256",name:"_durationValue",type:"uint256"},{internalType:"bool",name:"_lockAllowed",type:"bool"}],name:"initializeVaultStorage",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_durationValue:"Reward vesting period",_underlyingToken:"Vault underlying token"},notice:"Initialize contract after setup it as proxy implementation"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"lastTimeRewardApplicable(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"lastTimeRewardApplicable",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return periodFinishForToken or block.timestamp by reward token address"},"lastUpdateTimeForToken(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"lastUpdateTimeForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lockAllowed()":{inputs:[],name:"lockAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Lock functionality allowed for this contract or not"},"lockPenalty()":{inputs:[],name:"lockPenalty",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Base penalty if funds locked"},"lockPeriod()":{inputs:[],name:"lockPeriod",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Deposit lock period"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"notifyRewardWithoutPeriodChange(address,uint256)":{inputs:[{internalType:"address",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"notifyRewardWithoutPeriodChange",outputs:[],stateMutability:"nonpayable",type:"function",details:"Assume approve      Add reward amount without changing reward duration"},"notifyTargetRewardAmount(address,uint256)":{inputs:[{internalType:"address",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"notifyTargetRewardAmount",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Update rewardRateForToken         If period ended: reward / duration         else add leftover to the reward amount and refresh the period         (reward + ((periodFinishForToken - block.timestamp) * rewardRateForToken)) / duration"},"periodFinishForToken(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"periodFinishForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"ppfsDecreaseAllowed()":{inputs:[],name:"ppfsDecreaseAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Vault status"},"rebalance()":{inputs:[],name:"rebalance",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraw all from strategy to the vault and invest again"},"removeRewardToken(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"removeRewardToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{rt:"Reward token address"},notice:"Remove reward token. Last token removal is not allowed"},"rewardPerToken(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"rewardPerToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return reward per token ratio by reward token address                rewardPerTokenStoredForToken + (                (lastTimeRewardApplicable - lastUpdateTimeForToken)                 * rewardRateForToken * 10**18 / totalSupply)"},"rewardPerTokenStoredForToken(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"rewardPerTokenStoredForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardRateForToken(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"rewardRateForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",notice:"Return reward token array length"},"rewardTokensLength()":{inputs:[],name:"rewardTokensLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return reward token array length"},"rewardsForToken(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"rewardsForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setLockPenalty(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setLockPenalty",outputs:[],stateMutability:"nonpayable",type:"function",params:{_value:"Penalty denominator, should be in range 0 - (LOCK_PENALTY_DENOMINATOR / 2)"},notice:"Set lock initial penalty nominator. Can be called only once"},"setLockPeriod(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setLockPeriod",outputs:[],stateMutability:"nonpayable",type:"function",params:{_value:"Timestamp value"},notice:"Set lock period for funds. Can be called only once"},"setStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"setStrategy",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Check the strategy time lock, withdraw all to the vault and change the strategy         Should be called via controller"},"stop()":{inputs:[],name:"stop",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Disable strategy and move rewards to controller"},"strategy()":{inputs:[],name:"strategy",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Current strategy that vault use for farming"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Vault underlying"},"underlyingBalanceInVault()":{inputs:[],name:"underlyingBalanceInVault",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Returns the cash balance across all users in this contract."},"underlyingBalanceWithInvestment()":{inputs:[],name:"underlyingBalanceWithInvestment",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Returns the current underlying (e.g., DAI's) balance together with         the invested amount (if DAI is invested elsewhere by the strategy)."},"underlyingBalanceWithInvestmentForHolder(address)":{inputs:[{internalType:"address",name:"holder",type:"address"}],name:"underlyingBalanceWithInvestmentForHolder",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Get the user's share (in underlying)         underlyingBalanceWithInvestment() * balanceOf(holder) / totalSupply()"},"underlyingUnit()":{inputs:[],name:"underlyingUnit",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Return underlying precision units"},"userBoostTs(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userBoostTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userLastDepositTs(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userLastDepositTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userLastWithdrawTs(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userLastWithdrawTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userLockTs(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userLockTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userRewardPerTokenPaidForToken(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"userRewardPerTokenPaidForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"numberOfShares",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraw shares partially without touching rewards"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraw all from strategy to the vault"}}},"contracts/base/vault/VaultStorage.sol:VaultStorage":{source:"contracts/base/vault/VaultStorage.sol",name:"VaultStorage",title:"Eternal storage + getters and setters pattern",author:"belbix",details:"If you will change a key value it will require setup it again      Implements IVault interface for reducing code base",events:{"UpdatedAddressSlot(string,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdatedAddressSlot",type:"event",notice:"Address changed the variable with `name`"},"UpdatedBoolSlot(string,bool,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"bool",name:"oldValue",type:"bool"},{indexed:!1,internalType:"bool",name:"newValue",type:"bool"}],name:"UpdatedBoolSlot",type:"event",notice:"Boolean value changed the variable with `name`"},"UpdatedUint256Slot(string,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"uint256",name:"oldValue",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"UpdatedUint256Slot",type:"event",notice:"Value changed the variable with `name`"}},methods:{"active()":{inputs:[],name:"active",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Vault status"},"addRewardToken(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"addRewardToken",outputs:[],stateMutability:"nonpayable",type:"function"},"availableToInvestOut()":{inputs:[],name:"availableToInvestOut",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"changeActivityStatus(bool)":{inputs:[{internalType:"bool",name:"_active",type:"bool"}],name:"changeActivityStatus",outputs:[],stateMutability:"nonpayable",type:"function"},"changePpfsDecreaseAllowed(bool)":{inputs:[{internalType:"bool",name:"_value",type:"bool"}],name:"changePpfsDecreaseAllowed",outputs:[],stateMutability:"nonpayable",type:"function"},"deposit(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"depositAndInvest(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositAndInvest",outputs:[],stateMutability:"nonpayable",type:"function"},"depositFor(uint256,address)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"holder",type:"address"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function"},"duration()":{inputs:[],name:"duration",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Rewards vesting period"},"earned(address,address)":{inputs:[{internalType:"address",name:"rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"earned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"earnedWithBoost(address,address)":{inputs:[{internalType:"address",name:"rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"earnedWithBoost",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"exit()":{inputs:[],name:"exit",outputs:[],stateMutability:"nonpayable",type:"function"},"getAllRewards()":{inputs:[],name:"getAllRewards",outputs:[],stateMutability:"nonpayable",type:"function"},"getPricePerFullShare()":{inputs:[],name:"getPricePerFullShare",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getReward(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"getReward",outputs:[],stateMutability:"nonpayable",type:"function"},"getRewardTokenIndex(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"getRewardTokenIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initializeVaultStorage(address,uint256,bool)":{inputs:[{internalType:"address",name:"_underlyingToken",type:"address"},{internalType:"uint256",name:"_durationValue",type:"uint256"},{internalType:"bool",name:"_lockAllowed",type:"bool"}],name:"initializeVaultStorage",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_durationValue:"Reward vesting period",_underlyingToken:"Vault underlying token"},notice:"Initialize contract after setup it as proxy implementation"},"lastTimeRewardApplicable(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"lastTimeRewardApplicable",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lastUpdateTimeForToken(address)":{inputs:[{internalType:"address",name:"_rt",type:"address"}],name:"lastUpdateTimeForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lockAllowed()":{inputs:[],name:"lockAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Lock functionality allowed for this contract or not"},"lockPenalty()":{inputs:[],name:"lockPenalty",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Base penalty if funds locked"},"lockPeriod()":{inputs:[],name:"lockPeriod",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Deposit lock period"},"notifyRewardWithoutPeriodChange(address,uint256)":{inputs:[{internalType:"address",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"reward",type:"uint256"}],name:"notifyRewardWithoutPeriodChange",outputs:[],stateMutability:"nonpayable",type:"function"},"notifyTargetRewardAmount(address,uint256)":{inputs:[{internalType:"address",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"reward",type:"uint256"}],name:"notifyTargetRewardAmount",outputs:[],stateMutability:"nonpayable",type:"function"},"periodFinishForToken(address)":{inputs:[{internalType:"address",name:"_rt",type:"address"}],name:"periodFinishForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"ppfsDecreaseAllowed()":{inputs:[],name:"ppfsDecreaseAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Vault status"},"removeRewardToken(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"removeRewardToken",outputs:[],stateMutability:"nonpayable",type:"function"},"rewardPerToken(address)":{inputs:[{internalType:"address",name:"rt",type:"address"}],name:"rewardPerToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardPerTokenStoredForToken(address)":{inputs:[{internalType:"address",name:"_rt",type:"address"}],name:"rewardPerTokenStoredForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardRateForToken(address)":{inputs:[{internalType:"address",name:"_rt",type:"address"}],name:"rewardRateForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"rewardTokensLength()":{inputs:[],name:"rewardTokensLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardsForToken(address,address)":{inputs:[{internalType:"address",name:"_rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"rewardsForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setLockPenalty(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setLockPenalty",outputs:[],stateMutability:"nonpayable",type:"function"},"setLockPeriod(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setLockPeriod",outputs:[],stateMutability:"nonpayable",type:"function"},"setStrategy(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"setStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},"stop()":{inputs:[],name:"stop",outputs:[],stateMutability:"nonpayable",type:"function"},"strategy()":{inputs:[],name:"strategy",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Current strategy that vault use for farming"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Vault underlying"},"underlyingBalanceInVault()":{inputs:[],name:"underlyingBalanceInVault",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"underlyingBalanceWithInvestment()":{inputs:[],name:"underlyingBalanceWithInvestment",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"underlyingBalanceWithInvestmentForHolder(address)":{inputs:[{internalType:"address",name:"holder",type:"address"}],name:"underlyingBalanceWithInvestmentForHolder",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"underlyingUnit()":{inputs:[],name:"underlyingUnit",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userBoostTs(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"userBoostTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"userLastDepositTs(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"userLastDepositTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"userLastWithdrawTs(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"userLastWithdrawTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"userLockTs(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"userLockTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"userRewardPerTokenPaidForToken(address,address)":{inputs:[{internalType:"address",name:"_rt",type:"address"},{internalType:"address",name:"account",type:"address"}],name:"userRewardPerTokenPaidForToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"numberOfShares",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/infrastructure/liquidity/LiquidityBalancer.sol:LiquidityBalancer":{source:"contracts/infrastructure/liquidity/LiquidityBalancer.sol",name:"LiquidityBalancer",title:"LiquidityBalancer sells a portion of the available amount of        TETU Tokens when the price hits the target price and immediately        adds equilibrated amount of both tokens to liquidity.        After each sale the target price increases.",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"LiqAdded(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"lp",type:"address"},{indexed:!1,internalType:"uint256",name:"amount0",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1",type:"uint256"}],name:"LiqAdded",type:"event"},"LiqRemoved(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"lp",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"LiqRemoved",type:"event"},"LpTvlTargetChanged(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"lp",type:"address"},{indexed:!1,internalType:"uint256",name:"target",type:"uint256"}],name:"LpTvlTargetChanged",type:"event"},"PriceNumeratorChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"PriceNumeratorChanged",type:"event"},"PriceTargetChanged(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"target",type:"uint256"}],name:"PriceTargetChanged",type:"event"},"RemLiqNumeratorChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"RemLiqNumeratorChanged",type:"event"},"RouterChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"lp",type:"address"},{indexed:!1,internalType:"address",name:"router",type:"address"}],name:"RouterChanged",type:"event"},"Swap(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"tokenIn",type:"address"},{indexed:!1,internalType:"address",name:"tokenOut",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Swap",type:"event"},"TokenMoved(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenMoved",type:"event"},"TvlNumeratorChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"TvlNumeratorChanged",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"DENOMINATOR()":{inputs:[],name:"DENOMINATOR",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"changeLiquidity(address,address)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_lp",type:"address"}],name:"changeLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"lpTvlTargets(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"lpTvlTargets",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"moveTokensToController(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"moveTokensToController",outputs:[],stateMutability:"nonpayable",type:"function"},"needToRemove(address,address)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_lp",type:"address"}],name:"needToRemove",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"needToSell(address,address)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"address",name:"_lp",type:"address"}],name:"needToSell",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"priceTargets(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"priceTargets",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"removeLiqRatioNumerator()":{inputs:[],name:"removeLiqRatioNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"routers(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"routers",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setRemoveLiqRatioNumerator(uint256)":{inputs:[{internalType:"uint256",name:"_numerator",type:"uint256"}],name:"setRemoveLiqRatioNumerator",outputs:[],stateMutability:"nonpayable",type:"function"},"setRouter(address,address)":{inputs:[{internalType:"address",name:"_lp",type:"address"},{internalType:"address",name:"_router",type:"address"}],name:"setRouter",outputs:[],stateMutability:"nonpayable",type:"function"},"setTargetLpTvl(address,uint256)":{inputs:[{internalType:"address",name:"_lp",type:"address"},{internalType:"uint256",name:"_target",type:"uint256"}],name:"setTargetLpTvl",outputs:[],stateMutability:"nonpayable",type:"function"},"setTargetPrice(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_target",type:"uint256"}],name:"setTargetPrice",outputs:[],stateMutability:"nonpayable",type:"function"},"setTargetPriceUpdateNumerator(uint256)":{inputs:[{internalType:"uint256",name:"_numerator",type:"uint256"}],name:"setTargetPriceUpdateNumerator",outputs:[],stateMutability:"nonpayable",type:"function"},"setTargetTvlUpdateNumerator(uint256)":{inputs:[{internalType:"uint256",name:"_numerator",type:"uint256"}],name:"setTargetTvlUpdateNumerator",outputs:[],stateMutability:"nonpayable",type:"function"},"targetPriceUpdateNumerator()":{inputs:[],name:"targetPriceUpdateNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"targetTvlUpdateNumerator()":{inputs:[],name:"targetTvlUpdateNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/infrastructure/price/IPriceCalculator.sol:IPriceCalculator":{source:"contracts/infrastructure/price/IPriceCalculator.sol",name:"IPriceCalculator",methods:{"getLargestPool(address,address[])":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address[]",name:"usedLps",type:"address[]"}],name:"getLargestPool",outputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPrice(address,address)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"outputToken",type:"address"}],name:"getPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getPriceFromLp(address,address)":{inputs:[{internalType:"address",name:"lpAddress",type:"address"},{internalType:"address",name:"token",type:"address"}],name:"getPriceFromLp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getPriceWithDefaultOutput(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"getPriceWithDefaultOutput",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/infrastructure/price/PriceCalculator.sol:PriceCalculator":{source:"contracts/infrastructure/price/PriceCalculator.sol",name:"PriceCalculator",title:"Calculate current price for token using data from swap platforms",author:"belbix",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"DefaultTokenChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldToken",type:"address"},{indexed:!1,internalType:"address",name:"newToken",type:"address"}],name:"DefaultTokenChanged",type:"event"},"KeyTokenAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newKeyToken",type:"address"}],name:"KeyTokenAdded",type:"event"},"KeyTokenRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"keyToken",type:"address"}],name:"KeyTokenRemoved",type:"event"},"ReplacementTokenUpdated(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"address",name:"replacementToken",type:"address"}],name:"ReplacementTokenUpdated",type:"event"},"SwapPlatformAdded(address,string)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"factoryAddress",type:"address"},{indexed:!1,internalType:"string",name:"name",type:"string"}],name:"SwapPlatformAdded",type:"event"},"SwapPlatformRemoved(address,string)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"factoryAddress",type:"address"},{indexed:!1,internalType:"string",name:"name",type:"string"}],name:"SwapPlatformRemoved",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"DEPTH()":{inputs:[],name:"DEPTH",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"FIREBIRD_FACTORY()":{inputs:[],name:"FIREBIRD_FACTORY",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"IRON_IS3USD()":{inputs:[],name:"IRON_IS3USD",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"IS3USD()":{inputs:[],name:"IS3USD",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"PRECISION_DECIMALS()":{inputs:[],name:"PRECISION_DECIMALS",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"addKeyToken(address)":{inputs:[{internalType:"address",name:"newToken",type:"address"}],name:"addKeyToken",outputs:[],stateMutability:"nonpayable",type:"function"},"addKeyTokens(address[])":{inputs:[{internalType:"address[]",name:"newTokens",type:"address[]"}],name:"addKeyTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"addSwapPlatform(address,string)":{inputs:[{internalType:"address",name:"_factoryAddress",type:"address"},{internalType:"string",name:"_name",type:"string"}],name:"addSwapPlatform",outputs:[],stateMutability:"nonpayable",type:"function"},"checkFactory(address,address)":{inputs:[{internalType:"contract IUniswapV2Pair",name:"pair",type:"address"},{internalType:"address",name:"compareFactory",type:"address"}],name:"checkFactory",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"computePrice(address,address,address[],uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"outputToken",type:"address"},{internalType:"address[]",name:"usedLps",type:"address[]"},{internalType:"uint256",name:"deep",type:"uint256"}],name:"computePrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"defaultToken()":{inputs:[],name:"defaultToken",outputs:[{internalType:"address",name:"value",type:"address"}],stateMutability:"view",type:"function"},"getLargestPool(address,address[])":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address[]",name:"usedLps",type:"address[]"}],name:"getLargestPool",outputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getLpForFactory(address,address,address)":{inputs:[{internalType:"address",name:"_factory",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"tokenOpposite",type:"address"}],name:"getLpForFactory",outputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getLpSize(address,address)":{inputs:[{internalType:"address",name:"pairAddress",type:"address"},{internalType:"address",name:"token",type:"address"}],name:"getLpSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getLpUnderlying(address)":{inputs:[{internalType:"address",name:"lpAddress",type:"address"}],name:"getLpUnderlying",outputs:[{internalType:"address[2]",name:"",type:"address[2]"},{internalType:"uint256[2]",name:"",type:"uint256[2]"}],stateMutability:"view",type:"function"},"getPrice(address,address)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"outputToken",type:"address"}],name:"getPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getPriceFromLp(address,address)":{inputs:[{internalType:"address",name:"lpAddress",type:"address"},{internalType:"address",name:"token",type:"address"}],name:"getPriceFromLp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getPriceWithDefaultOutput(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"getPriceWithDefaultOutput",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"isIronPair(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"isIronPair",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isKeyToken(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"isKeyToken",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isSwapFactoryToken(address)":{inputs:[{internalType:"address",name:"adr",type:"address"}],name:"isSwapFactoryToken",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isSwapName(string)":{inputs:[{internalType:"string",name:"name",type:"string"}],name:"isSwapName",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isSwapPlatform(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"isSwapPlatform",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"keyTokens(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"keyTokens",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"keyTokensSize()":{inputs:[],name:"keyTokensSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"modifyReplacementTokens(address,address)":{inputs:[{internalType:"address",name:"_inputToken",type:"address"},{internalType:"address",name:"_replacementToken",type:"address"}],name:"modifyReplacementTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"removeKeyToken(address)":{inputs:[{internalType:"address",name:"keyToken",type:"address"}],name:"removeKeyToken",outputs:[],stateMutability:"nonpayable",type:"function"},"removeSwapPlatform(address,string)":{inputs:[{internalType:"address",name:"_factoryAddress",type:"address"},{internalType:"string",name:"_name",type:"string"}],name:"removeSwapPlatform",outputs:[],stateMutability:"nonpayable",type:"function"},"setDefaultToken(address)":{inputs:[{internalType:"address",name:"_newDefaultToken",type:"address"}],name:"setDefaultToken",outputs:[],stateMutability:"nonpayable",type:"function"},"swapFactories(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"swapFactories",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"swapFactoriesSize()":{inputs:[],name:"swapFactoriesSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"swapLpNames(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"swapLpNames",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}}},"contracts/infrastructure/reward/AutoRewarder.sol:AutoRewarder":{source:"contracts/infrastructure/reward/AutoRewarder.sol",name:"AutoRewarder",title:"Calculate recommended reward amount for vaults and distribute it",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_rewardCalculator",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"DistributedTetu(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"vault",type:"address"},{indexed:!1,internalType:"uint256",name:"toDistribute",type:"uint256"}],name:"DistributedTetu",type:"event"},"NetworkRatioChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"NetworkRatioChanged",type:"event"},"ResetCycle(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"lastDistributedId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"distributed",type:"uint256"}],name:"ResetCycle",type:"event"},"RewardPerDayChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"RewardPerDayChanged",type:"event"},"TokenMoved(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenMoved",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"distributed()":{inputs:[],name:"distributed",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Distributed amount for avoiding over spending during period"},"lastDistributedId()":{inputs:[],name:"lastDistributedId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Vault list counter for ordered distribution. Refresh when cycle ended"},"networkRatio()":{inputs:[],name:"networkRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Emission ratio for current distributor contract"},"rewardsPerDay()":{inputs:[],name:"rewardsPerDay",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Capacity for daily distribution. Gov set it manually"},"totalStrategyRewards()":{inputs:[],name:"totalStrategyRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Actual sum of all strategy rewards"}},methods:{"NETWORK_RATIO_DENOMINATOR()":{inputs:[],name:"NETWORK_RATIO_DENOMINATOR",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PERIOD()":{inputs:[],name:"PERIOD",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PRECISION()":{inputs:[],name:"PRECISION",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"collectAndStoreInfo(address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"collectAndStoreInfo",outputs:[],stateMutability:"nonpayable",type:"function",details:"Fetch information and store for further distributions.      This process has unpredictable gas cost and should be made as independent transactions      Only after updating information a vault can be rewarded"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"distribute(uint256)":{inputs:[{internalType:"uint256",name:"count",type:"uint256"}],name:"distribute",outputs:[],stateMutability:"nonpayable",type:"function",details:"Distribute rewards for given amount of vaults. Start with lastDistributedId"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"lastDistributedAmount(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"lastDistributedAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lastDistributionTs(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"lastDistributionTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lastInfo(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"lastInfo",outputs:[{internalType:"address",name:"vault",type:"address"},{internalType:"uint256",name:"time",type:"uint256"},{internalType:"uint256",name:"strategyRewardsUsd",type:"uint256"}],stateMutability:"view",type:"function"},"maxRewardsPerDay()":{inputs:[],name:"maxRewardsPerDay",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Capacity for daily distribution. Calculates based on TETU vesting logic"},"moveTokensToController(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"moveTokensToController",outputs:[],stateMutability:"nonpayable",type:"function",details:"Move tokens to controller where money will be protected with time lock"},"psVault()":{inputs:[],name:"psVault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"reset()":{inputs:[],name:"reset",outputs:[],stateMutability:"nonpayable",type:"function",details:"Manual reset. In normal circumstances rest calls in the end of cycle"},"rewardCalculator()":{inputs:[],name:"rewardCalculator",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setNetworkRatio(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setNetworkRatio",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set network ratio"},"setRewardPerDay(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setRewardPerDay",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set rewards amount for daily distribution"},"tetuToken()":{inputs:[],name:"tetuToken",outputs:[{internalType:"contract IRewardToken",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaults(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"vaults",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaultsSize()":{inputs:[],name:"vaultsSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/infrastructure/reward/IRewardCalculator.sol:IRewardCalculator":{source:"contracts/infrastructure/reward/IRewardCalculator.sol",name:"IRewardCalculator",events:{"ToolAddressUpdated(string,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"ToolAddressUpdated",type:"event"}},methods:{"getPrice(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"getPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"kpi(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"kpi",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardsPerTvl(address,uint256)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"uint256",name:"_period",type:"uint256"}],name:"rewardsPerTvl",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"strategyEarnedSinceLastDistribution(address)":{inputs:[{internalType:"address",name:"strategy",type:"address"}],name:"strategyEarnedSinceLastDistribution",outputs:[{internalType:"uint256",name:"earned",type:"uint256"},{internalType:"uint256",name:"lastEarnedTs",type:"uint256"}],stateMutability:"view",type:"function"},"strategyRewardsUsd(address,uint256)":{inputs:[{internalType:"address",name:"_strategy",type:"address"},{internalType:"uint256",name:"_period",type:"uint256"}],name:"strategyRewardsUsd",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultLastReward(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultLastReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultTVLRatio(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultTVLRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/infrastructure/reward/NotifyHelper.sol:NotifyHelper":{source:"contracts/infrastructure/reward/NotifyHelper.sol",name:"NotifyHelper",title:"Disperse weekly rewards to vaults",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"TokenMoved(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenMoved",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"alreadyNotified(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"alreadyNotified",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"alreadyNotifiedList(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"alreadyNotifiedList",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"alreadyNotifiedListLength()":{inputs:[],name:"alreadyNotifiedListLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"clearNotifiedStatuses()":{inputs:[],name:"clearNotifiedStatuses",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Clear statuses. Need to use after full cycle of reward distribution"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"dxTetu()":{inputs:[],name:"dxTetu",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"moveTokensToController(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"moveTokensToController",outputs:[],stateMutability:"nonpayable",type:"function"},"notifyVaults(uint256[],address[],uint256,address)":{inputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"address[]",name:"vaults",type:"address[]"},{internalType:"uint256",name:"sum",type:"uint256"},{internalType:"address",name:"token",type:"address"}],name:"notifyVaults",outputs:[],stateMutability:"nonpayable",type:"function"},"psVault()":{inputs:[],name:"psVault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setDXTetu(address)":{inputs:[{internalType:"address",name:"_value",type:"address"}],name:"setDXTetu",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/infrastructure/reward/RewardCalculator.sol:RewardCalculator":{source:"contracts/infrastructure/reward/RewardCalculator.sol",name:"RewardCalculator",title:"Calculate estimated strategy rewards",author:"belbix",events:{"ToolAddressUpdated(string,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"ToolAddressUpdated",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"BLOCKS_PER_MINUTE()":{inputs:[],name:"BLOCKS_PER_MINUTE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"D_QUICK()":{inputs:[],name:"D_QUICK",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"MULTIPLIER_DENOMINATOR()":{inputs:[],name:"MULTIPLIER_DENOMINATOR",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PRECISION()":{inputs:[],name:"PRECISION",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"cafe(address,uint256)":{inputs:[{internalType:"address",name:"_pool",type:"address"},{internalType:"uint256",name:"_poolID",type:"uint256"}],name:"cafe",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately reward amounts for Cafe swap"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"cosmic(address,uint256)":{inputs:[{internalType:"address",name:"_pool",type:"address"},{internalType:"uint256",name:"_poolID",type:"uint256"}],name:"cosmic",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately rewards amounts for Cosmic Swap"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"dino(address,uint256)":{inputs:[{internalType:"address",name:"_pool",type:"address"},{internalType:"uint256",name:"_poolID",type:"uint256"}],name:"dino",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately rewards amounts for Dino Swap"},"getPrice(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"getPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"hermes(address,uint256)":{inputs:[{internalType:"address",name:"_pool",type:"address"},{internalType:"uint256",name:"_poolID",type:"uint256"}],name:"hermes",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately reward amounts for HERMES"},"initialize(address,address)":{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_calculator",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"ironMc(address,uint256)":{inputs:[{internalType:"address",name:"_pool",type:"address"},{internalType:"uint256",name:"_poolID",type:"uint256"}],name:"ironMc",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately reward amounts for Iron MC"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"kpi(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"kpi",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"mcRewardPerSecond(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"allocPoint",type:"uint256"},{internalType:"uint256",name:"rewardPerSecond",type:"uint256"},{internalType:"uint256",name:"totalAllocPoint",type:"uint256"}],name:"mcRewardPerSecond",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},"mcRewarder(address,uint256)":{inputs:[{internalType:"address",name:"_pool",type:"address"},{internalType:"uint256",name:"_poolID",type:"uint256"}],name:"mcRewarder",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately rewards amounts for Sushi rewarder"},"miniChefSushi(address,uint256)":{inputs:[{internalType:"address",name:"_pool",type:"address"},{internalType:"uint256",name:"_poolID",type:"uint256"}],name:"miniChefSushi",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately rewards amounts for SushiSwap"},"priceCalculator()":{inputs:[],name:"priceCalculator",outputs:[{internalType:"contract IPriceCalculator",name:"",type:"address"}],stateMutability:"view",type:"function"},"quick(address)":{inputs:[{internalType:"address",name:"_pool",type:"address"}],name:"quick",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately reward amounts for Quick swap"},"quickDualFarm(address)":{inputs:[{internalType:"address",name:"_pool",type:"address"}],name:"quickDualFarm",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately reward amounts for Quick swap"},"rewardPerBlockToPerSecond(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"rewardPerBlockToPerSecond",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},"rewardsPerTvl(address,uint256)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"uint256",name:"_period",type:"uint256"}],name:"rewardsPerTvl",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return recommended USD amount of rewards for this vault based on TVL ratio"},"setPlatformMultiplier(uint8,uint256)":{inputs:[{internalType:"enum IStrategy.Platform",name:"_platform",type:"uint8"},{internalType:"uint256",name:"_value",type:"uint256"}],name:"setPlatformMultiplier",outputs:[],stateMutability:"nonpayable",type:"function"},"setPriceCalculator(address)":{inputs:[{internalType:"address",name:"newValue",type:"address"}],name:"setPriceCalculator",outputs:[],stateMutability:"nonpayable",type:"function"},"strategyEarnedSinceLastDistribution(address)":{inputs:[{internalType:"address",name:"strategy",type:"address"}],name:"strategyEarnedSinceLastDistribution",outputs:[{internalType:"uint256",name:"earned",type:"uint256"},{internalType:"uint256",name:"lastEarnedTs",type:"uint256"}],stateMutability:"view",type:"function"},"strategyRewardsUsd(address,uint256)":{inputs:[{internalType:"address",name:"_strategy",type:"address"},{internalType:"uint256",name:"_period",type:"uint256"}],name:"strategyRewardsUsd",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultLastReward(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultLastReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultTVLRatio(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultTVLRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"wault(address,uint256)":{inputs:[{internalType:"address",name:"_pool",type:"address"},{internalType:"uint256",name:"_poolID",type:"uint256"}],name:"wault",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Calculate approximately rewards amounts for Wault Swap"}}},"contracts/infrastructure/salary/PayrollClerk.sol:PayrollClerk":{source:"contracts/infrastructure/salary/PayrollClerk.sol",name:"PayrollClerk",title:"Disperse salary to workers",author:"belbix",events:{"SalaryPaid(address,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"worker",type:"address"},{indexed:!1,internalType:"uint256",name:"usdAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"workedHours",type:"uint256"},{indexed:!1,internalType:"uint256",name:"rate",type:"uint256"}],name:"SalaryPaid",type:"event"},"TokenChanged(address[],uint256[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address[]",name:"tokens",type:"address[]"},{indexed:!1,internalType:"uint256[]",name:"ratios",type:"uint256[]"}],name:"TokenChanged",type:"event"},"TokenMoved(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenMoved",type:"event"},"UpdateCalculator(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateCalculator",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"},"WorkerNameUpdated(address,string)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"worker",type:"address"},{indexed:!1,internalType:"string",name:"value",type:"string"}],name:"WorkerNameUpdated",type:"event"},"WorkerRateUpdated(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"worker",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"WorkerRateUpdated",type:"event"},"WorkerRoleUpdated(address,string)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"worker",type:"address"},{indexed:!1,internalType:"string",name:"value",type:"string"}],name:"WorkerRoleUpdated",type:"event"}},methods:{"BUST_STEP()":{inputs:[],name:"BUST_STEP",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"FULL_RATIO()":{inputs:[],name:"FULL_RATIO",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MAX_BOOST()":{inputs:[],name:"MAX_BOOST",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MAX_HOURLY_RATE()":{inputs:[],name:"MAX_HOURLY_RATE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"addWorker(address,uint256,string,string,bool)":{inputs:[{internalType:"address",name:"worker",type:"address"},{internalType:"uint256",name:"rate",type:"uint256"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"role",type:"string"},{internalType:"bool",name:"boost",type:"bool"}],name:"addWorker",outputs:[],stateMutability:"nonpayable",type:"function"},"addWorkers(address[],uint256[],string[],string[],bool[])":{inputs:[{internalType:"address[]",name:"_workers",type:"address[]"},{internalType:"uint256[]",name:"rates",type:"uint256[]"},{internalType:"string[]",name:"names",type:"string[]"},{internalType:"string[]",name:"roles",type:"string[]"},{internalType:"bool[]",name:"boosts",type:"bool[]"}],name:"addWorkers",outputs:[],stateMutability:"nonpayable",type:"function"},"allWorkers()":{inputs:[],name:"allWorkers",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"baseHourlyRates(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"baseHourlyRates",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"boostActivated(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"boostActivated",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"calculator()":{inputs:[],name:"calculator",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function"},"changeTokens(address[],uint256[])":{inputs:[{internalType:"address[]",name:"_tokens",type:"address[]"},{internalType:"uint256[]",name:"ratios",type:"uint256[]"}],name:"changeTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"changeWorkerAddress(address,address)":{inputs:[{internalType:"address",name:"oldWallet",type:"address"},{internalType:"address",name:"newWallet",type:"address"}],name:"changeWorkerAddress",outputs:[],stateMutability:"nonpayable",type:"function",notice:"if a wallet changed we need a way to migration"},"computeSalary(address,uint256,address)":{inputs:[{internalType:"address",name:"worker",type:"address"},{internalType:"uint256",name:"_workedHours",type:"uint256"},{internalType:"address",name:"token",type:"address"}],name:"computeSalary",outputs:[{internalType:"uint256",name:"salaryUsd",type:"uint256"},{internalType:"uint256",name:"salaryToken",type:"uint256"}],stateMutability:"view",type:"function"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"earned(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"earned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"hourlyRate(address)":{inputs:[{internalType:"address",name:"worker",type:"address"}],name:"hourlyRate",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize(address,address)":{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_calculator",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"moveTokensToGovernance(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"moveTokensToGovernance",outputs:[],stateMutability:"nonpayable",type:"function",details:"Move tokens to governance      This contract should contain only governance funds"},"multiplePay(address[],uint256[])":{inputs:[{internalType:"address[]",name:"_workers",type:"address[]"},{internalType:"uint256[]",name:"_workedHours",type:"uint256[]"}],name:"multiplePay",outputs:[],stateMutability:"nonpayable",type:"function"},"pay(address,uint256)":{inputs:[{internalType:"address",name:"worker",type:"address"},{internalType:"uint256",name:"_workedHours",type:"uint256"}],name:"pay",outputs:[],stateMutability:"nonpayable",type:"function"},"setBaseHourlyRate(address,uint256)":{inputs:[{internalType:"address",name:"worker",type:"address"},{internalType:"uint256",name:"rate",type:"uint256"}],name:"setBaseHourlyRate",outputs:[],stateMutability:"nonpayable",type:"function"},"setCalculator(address)":{inputs:[{internalType:"address",name:"_newValue",type:"address"}],name:"setCalculator",outputs:[],stateMutability:"nonpayable",type:"function"},"setWorkerName(address,string)":{inputs:[{internalType:"address",name:"worker",type:"address"},{internalType:"string",name:"name",type:"string"}],name:"setWorkerName",outputs:[],stateMutability:"nonpayable",type:"function"},"setWorkerRole(address,string)":{inputs:[{internalType:"address",name:"worker",type:"address"},{internalType:"string",name:"role",type:"string"}],name:"setWorkerRole",outputs:[],stateMutability:"nonpayable",type:"function"},"switchBoost(address,bool)":{inputs:[{internalType:"address",name:"worker",type:"address"},{internalType:"bool",name:"active",type:"bool"}],name:"switchBoost",outputs:[],stateMutability:"nonpayable",type:"function"},"tokenRatios(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"tokenRatios",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"tokens(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"tokens",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"workedHours(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"workedHours",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"workerIndex(address)":{inputs:[{internalType:"address",name:"worker",type:"address"}],name:"workerIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"workerNames(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"workerNames",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"workerRoles(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"workerRoles",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"workers(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"workers",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"workersLength()":{inputs:[],name:"workersLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/infrastructure/salary/PayrollClerkStorage.sol:PayrollClerkStorage":{source:"contracts/infrastructure/salary/PayrollClerkStorage.sol",name:"PayrollClerkStorage",title:"Storage for any PayrollClerk variables",author:"belbix",details:"If you will change a key value it will require setup it again",events:{"UpdateCalculator(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateCalculator",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"BUST_STEP()":{inputs:[],name:"BUST_STEP",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"FULL_RATIO()":{inputs:[],name:"FULL_RATIO",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MAX_BOOST()":{inputs:[],name:"MAX_BOOST",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MAX_HOURLY_RATE()":{inputs:[],name:"MAX_HOURLY_RATE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"baseHourlyRates(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"baseHourlyRates",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"boostActivated(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"boostActivated",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"calculator()":{inputs:[],name:"calculator",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"earned(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"earned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"setCalculator(address)":{inputs:[{internalType:"address",name:"_newValue",type:"address"}],name:"setCalculator",outputs:[],stateMutability:"nonpayable",type:"function"},"tokenRatios(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"tokenRatios",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"tokens(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"tokens",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"workedHours(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"workedHours",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"workerNames(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"workerNames",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"workerRoles(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"workerRoles",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"workers(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"workers",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/infrastructure/zap/IMultiSwap.sol:IMultiSwap":{source:"contracts/infrastructure/zap/IMultiSwap.sol",name:"IMultiSwap",methods:{"findLpsForSwaps(address,address)":{inputs:[{internalType:"address",name:"_tokenIn",type:"address"},{internalType:"address",name:"_tokenOut",type:"address"}],name:"findLpsForSwaps",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"multiSwap(address[],address,address,uint256,uint256)":{inputs:[{internalType:"address[]",name:"lps",type:"address[]"},{internalType:"address",name:"tokenIn",type:"address"},{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"slippageTolerance",type:"uint256"}],name:"multiSwap",outputs:[],stateMutability:"nonpayable",type:"function"},"routerForPair(address)":{inputs:[{internalType:"address",name:"pair",type:"address"}],name:"routerForPair",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/infrastructure/zap/MultiSwap.sol:MultiSwap":{source:"contracts/infrastructure/zap/MultiSwap.sol",name:"MultiSwap",title:"Contract for complex swaps across multiple platforms",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_calculator",type:"address"},{internalType:"address[]",name:"_factories",type:"address[]"},{internalType:"address[]",name:"_routers",type:"address[]"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"calculator()":{inputs:[],name:"calculator",outputs:[{internalType:"contract IPriceCalculator",name:"",type:"address"}],stateMutability:"view",type:"stateVariable",details:"PriceCalculator contract for determinate the best liquidity pool across swap platforms"}},methods:{"MAX_ROUTES()":{inputs:[],name:"MAX_ROUTES",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"factoryToRouter(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"factoryToRouter",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"findLpsForSwaps(address,address)":{inputs:[{internalType:"address",name:"_tokenIn",type:"address"},{internalType:"address",name:"_tokenOut",type:"address"}],name:"findLpsForSwaps",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",details:"Return an array with lp pairs that reflect a route for given tokens"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"multiSwap(address[],address,address,uint256,uint256)":{inputs:[{internalType:"address[]",name:"lps",type:"address[]"},{internalType:"address",name:"tokenIn",type:"address"},{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"slippageTolerance",type:"uint256"}],name:"multiSwap",outputs:[],stateMutability:"nonpayable",type:"function",details:"Approval for token is assumed.      Swap tokenIn to tokenOut using given lp path      Input token should supported in PriceCalculator contract      Slippage tolerance is a number from 0 to 100 that reflect is a percent of acceptable slippage"},"routerForPair(address)":{inputs:[{internalType:"address",name:"pair",type:"address"}],name:"routerForPair",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"salvage(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Token amount",_token:"Token address"},notice:"Controller or Governance can claim coins that are somehow transferred into the contract"}}},"contracts/infrastructure/zap/ZapContract.sol:ZapContract":{source:"contracts/infrastructure/zap/ZapContract.sol",name:"ZapContract",title:"Dedicated solution for interacting with Tetu vaults.        Able to zap in/out assets to vaults",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_multiSwap",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"multiSwap()":{inputs:[],name:"multiSwap",outputs:[{internalType:"contract IMultiSwap",name:"",type:"address"}],stateMutability:"view",type:"function"},"salvage(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Token amount",_token:"Token address"},notice:"Controller or Governance can claim coins that are somehow transferred into the contract"},"zapInto(address,address,address,address[],uint256,uint256)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_tokenIn",type:"address"},{internalType:"address",name:"_asset",type:"address"},{internalType:"address[]",name:"_assetRoute",type:"address[]"},{internalType:"uint256",name:"_tokenInAmount",type:"uint256"},{internalType:"uint256",name:"slippageTolerance",type:"uint256"}],name:"zapInto",outputs:[],stateMutability:"nonpayable",type:"function",params:{_asset:"Token address required for adding liquidity",_assetRoute:"Pair addresses for buying asset0",_tokenIn:"This token will be swapped to required token for adding liquidity",_tokenInAmount:"Amount of token for deposit",_vault:"A target vault for deposit",slippageTolerance:"A number in 0-100 range that reflect is a percent of acceptable slippage"},notice:"Approval for token is assumed.      Buy token and deposit to given vault      TokenIn should be declared as a keyToken in the PriceCalculator"},"zapIntoLp(address,address,address,address[],address,address[],uint256,uint256)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_tokenIn",type:"address"},{internalType:"address",name:"_asset0",type:"address"},{internalType:"address[]",name:"_asset0Route",type:"address[]"},{internalType:"address",name:"_asset1",type:"address"},{internalType:"address[]",name:"_asset1Route",type:"address[]"},{internalType:"uint256",name:"_tokenInAmount",type:"uint256"},{internalType:"uint256",name:"slippageTolerance",type:"uint256"}],name:"zapIntoLp",outputs:[],stateMutability:"nonpayable",type:"function",params:{_asset0:"Token address required for adding liquidity",_asset0Route:"Pair addresses for buying asset0",_asset1:"Token address required for adding liquidity",_asset1Route:"Pair addresses for buying asset1",_tokenIn:"This token will be swapped to required token for adding liquidity",_tokenInAmount:"Amount of token for deposit",_vault:"A target vault for deposit",slippageTolerance:"A number in 0-100 range that reflect is a percent of acceptable slippage"},notice:"Approval for token is assumed.      Add liquidity and deposit to given vault with Uin pair underlying      TokenIn should be declared as a keyToken in the PriceCalculator"},"zapOut(address,address,address,address[],uint256,uint256)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_tokenOut",type:"address"},{internalType:"address",name:"_asset",type:"address"},{internalType:"address[]",name:"_assetRoute",type:"address[]"},{internalType:"uint256",name:"_shareTokenAmount",type:"uint256"},{internalType:"uint256",name:"slippageTolerance",type:"uint256"}],name:"zapOut",outputs:[],stateMutability:"nonpayable",type:"function",params:{_asset:"Token address required selling removed assets",_assetRoute:"Pair addresses for selling asset0",_shareTokenAmount:"Amount of share token for withdraw",_tokenOut:"This token will be a target for swaps",_vault:"A target vault for withdraw",slippageTolerance:"A number in 0-100 range that reflect is a percent of acceptable slippage"},notice:"Approval for share token is assumed.         Withdraw from given vault underlying and sell tokens for given tokenOut"},"zapOutLp(address,address,address,address[],address,address[],uint256,uint256)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_tokenOut",type:"address"},{internalType:"address",name:"_asset0",type:"address"},{internalType:"address[]",name:"_asset0Route",type:"address[]"},{internalType:"address",name:"_asset1",type:"address"},{internalType:"address[]",name:"_asset1Route",type:"address[]"},{internalType:"uint256",name:"_shareTokenAmount",type:"uint256"},{internalType:"uint256",name:"slippageTolerance",type:"uint256"}],name:"zapOutLp",outputs:[],stateMutability:"nonpayable",type:"function",params:{_asset0:"Token address required selling removed assets",_asset0Route:"Pair addresses for selling asset0",_asset1:"Token address required selling removed assets",_asset1Route:"Pair addresses for selling asset1",_shareTokenAmount:"Amount of share token for withdraw",_tokenOut:"This token will be a target for swaps",_vault:"A target vault for withdraw",slippageTolerance:"A number in 0-100 range that reflect is a percent of acceptable slippage"},notice:"Approval for share token is assumed.      Withdraw from given vault underlying, remove liquidity and sell tokens for given tokenOut"}}},"contracts/loan/ITetuPawnShop.sol:ITetuPawnShop":{source:"contracts/loan/ITetuPawnShop.sol",name:"ITetuPawnShop",title:"Interface for Tetu PawnShop contract",author:"belbix",events:{"AuctionBidAccepted(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bidId",type:"uint256"}],name:"AuctionBidAccepted",type:"event"},"AuctionBidClosed(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bidId",type:"uint256"}],name:"AuctionBidClosed",type:"event"},"AuctionBidOpened(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bidId",type:"uint256"}],name:"AuctionBidOpened",type:"event"},"BidExecuted(uint256,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"},{indexed:!1,internalType:"address",name:"lender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"BidExecuted",type:"event"},"PositionClaimed(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"}],name:"PositionClaimed",type:"event"},"PositionClosed(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"}],name:"PositionClosed",type:"event"},"PositionOpened(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"}],name:"PositionOpened",type:"event"},"PositionRedeemed(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"}],name:"PositionRedeemed",type:"event"}},methods:{"acceptAuctionBid(uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"}],name:"acceptAuctionBid",outputs:[],stateMutability:"nonpayable",type:"function",details:"Borrower action. Assume that auction ended.      Transfer acquired token to borrower"},"auctionBidCounter()":{inputs:[],name:"auctionBidCounter",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"BidId counter. Should start from 1 for keep 0 as empty value"},"auctionBidSize(uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"}],name:"auctionBidSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return size of all auction bids for given position"},"bid(uint256,uint256)":{inputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"bid",outputs:[],stateMutability:"nonpayable",type:"function",details:"Lender action. Assume approve for acquired token      Place a bid for given position ID      It can be an auction bid if acquired amount is zero"},"borrowerPositions(address,uint256)":{inputs:[{internalType:"address",name:"borrower",type:"address"},{internalType:"uint256",name:"index",type:"uint256"}],name:"borrowerPositions",outputs:[{internalType:"uint256",name:"posId",type:"uint256"}],stateMutability:"view",type:"function",details:"Borrower token => PosIds"},"borrowerPositionsSize(address)":{inputs:[{internalType:"address",name:"borrower",type:"address"}],name:"borrowerPositionsSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"claim(uint256)":{inputs:[{internalType:"uint256",name:"id",type:"uint256"}],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function",details:"Lender action      Transfer collateral to lender if borrower didn't return the loan      Deposit will be returned to borrower"},"closeAuctionBid(uint256)":{inputs:[{internalType:"uint256",name:"bidId",type:"uint256"}],name:"closeAuctionBid",outputs:[],stateMutability:"nonpayable",type:"function",details:"Lender action. Requires ended auction, or not the last bid      Close auction bid and transfer acquired tokens to lender"},"closePosition(uint256)":{inputs:[{internalType:"uint256",name:"id",type:"uint256"}],name:"closePosition",outputs:[],stateMutability:"nonpayable",type:"function",details:"Borrower action      Close not executed position. Return collateral and deposit to borrower"},"getAssetType(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"getAssetType",outputs:[{internalType:"enum ITetuPawnShop.AssetType",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Return asset type ERC20 or ERC721"},"getAuctionBid(uint256)":{inputs:[{internalType:"uint256",name:"bidId",type:"uint256"}],name:"getAuctionBid",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"posId",type:"uint256"},{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"}],internalType:"struct ITetuPawnShop.AuctionBid",name:"",type:"tuple"}],stateMutability:"view",type:"function",details:"AbiEncoder not able to auto generate functions for mapping with structs",notice:"Return auction bid for given id"},"getPosition(uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"}],name:"getPosition",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address",name:"borrower",type:"address"},{internalType:"address",name:"depositToken",type:"address"},{internalType:"uint256",name:"depositAmount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"},{components:[{internalType:"uint256",name:"posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"posFee",type:"uint256"},{internalType:"uint256",name:"createdBlock",type:"uint256"},{internalType:"uint256",name:"createdTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionInfo",name:"info",type:"tuple"},{components:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"enum ITetuPawnShop.AssetType",name:"collateralType",type:"uint8"},{internalType:"uint256",name:"collateralAmount",type:"uint256"},{internalType:"uint256",name:"collateralTokenId",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionCollateral",name:"collateral",type:"tuple"},{components:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"acquiredAmount",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionAcquired",name:"acquired",type:"tuple"},{components:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posStartBlock",type:"uint256"},{internalType:"uint256",name:"posStartTs",type:"uint256"},{internalType:"uint256",name:"posEndTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionExecution",name:"execution",type:"tuple"}],internalType:"struct ITetuPawnShop.Position",name:"",type:"tuple"}],stateMutability:"view",type:"function",details:"AbiEncoder not able to auto generate functions for mapping with structs",notice:"Return Position for given id"},"isERC20(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"isERC20",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isERC721(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"isERC721",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"lastAuctionBidTs(uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"}],name:"lastAuctionBidTs",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",details:"PosId => timestamp. Timestamp of the last bid for the auction"},"lenderOpenBids(address,uint256)":{inputs:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posId",type:"uint256"}],name:"lenderOpenBids",outputs:[{internalType:"uint256",name:"index",type:"uint256"}],stateMutability:"view",type:"function",details:"lender => PosId => positionToBidIds + 1      Lender auction position for given PosId. 0 keep for empty position"},"lenderPositions(address,uint256)":{inputs:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"index",type:"uint256"}],name:"lenderPositions",outputs:[{internalType:"uint256",name:"posId",type:"uint256"}],stateMutability:"view",type:"function",details:"Lender token => PosIds"},"lenderPositionsSize(address)":{inputs:[{internalType:"address",name:"lender",type:"address"}],name:"lenderPositionsSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"openPosition(address,uint256,uint256,address,uint256,uint256,uint256)":{inputs:[{internalType:"address",name:"_collateralToken",type:"address"},{internalType:"uint256",name:"_collateralAmount",type:"uint256"},{internalType:"uint256",name:"_collateralTokenId",type:"uint256"},{internalType:"address",name:"_acquiredToken",type:"address"},{internalType:"uint256",name:"_acquiredAmount",type:"uint256"},{internalType:"uint256",name:"_posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"_posFee",type:"uint256"}],name:"openPosition",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"Borrower action. Assume approve      Open a position with multiple options - loan / instant deal / auction"},"openPositions(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"openPositions",outputs:[{internalType:"uint256",name:"posId",type:"uint256"}],stateMutability:"view",type:"function",details:"Hold open positions ids. Removed when position closed"},"openPositionsSize()":{inputs:[],name:"openPositionsSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return size of active positions"},"posIndexes(uint8,uint256)":{inputs:[{internalType:"enum ITetuPawnShop.IndexType",name:"typeId",type:"uint8"},{internalType:"uint256",name:"posId",type:"uint256"}],name:"posIndexes",outputs:[{internalType:"uint256",name:"index",type:"uint256"}],stateMutability:"view",type:"function",details:"index type => PosId => index      Hold array positions for given type of array"},"positionCounter()":{inputs:[],name:"positionCounter",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"PosId counter. Should start from 1 for keep 0 as empty value"},"positionToBidIds(uint256,uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"},{internalType:"uint256",name:"index",type:"uint256"}],name:"positionToBidIds",outputs:[{internalType:"uint256",name:"bidId",type:"uint256"}],stateMutability:"view",type:"function",details:"PosId => bidIds. All open and close bids for the given position"},"positionsByAcquired(address,uint256)":{inputs:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"index",type:"uint256"}],name:"positionsByAcquired",outputs:[{internalType:"uint256",name:"posId",type:"uint256"}],stateMutability:"view",type:"function",details:"Acquired token => PosIds"},"positionsByAcquiredSize(address)":{inputs:[{internalType:"address",name:"acquiredToken",type:"address"}],name:"positionsByAcquiredSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"positionsByCollateral(address,uint256)":{inputs:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"uint256",name:"index",type:"uint256"}],name:"positionsByCollateral",outputs:[{internalType:"uint256",name:"posId",type:"uint256"}],stateMutability:"view",type:"function",details:"Collateral token => PosIds"},"positionsByCollateralSize(address)":{inputs:[{internalType:"address",name:"collateral",type:"address"}],name:"positionsByCollateralSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"redeem(uint256)":{inputs:[{internalType:"uint256",name:"id",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function",details:"Borrower action. Assume approve on acquired token      Return the loan to lender, transfer collateral and deposit to borrower"},"setPlatformFee(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setPlatformFee",outputs:[],stateMutability:"nonpayable",type:"function",details:"Platform fee in range 0 - 500, with denominator 10000"},"setPositionDepositAmount(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setPositionDepositAmount",outputs:[],stateMutability:"nonpayable",type:"function",details:"Tokens amount that need to deposit for a new position      Will be returned when position closed"},"setPositionDepositToken(address)":{inputs:[{internalType:"address",name:"_value",type:"address"}],name:"setPositionDepositToken",outputs:[],stateMutability:"nonpayable",type:"function",details:"Tokens that need to deposit for a new position"},"toRedeem(uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"}],name:"toRedeem",outputs:[{internalType:"uint256",name:"amount",type:"uint256"}],stateMutability:"view",type:"function",details:"Return amount required for redeem position"}}},"contracts/loan/TetuPawnShop.sol:TetuPawnShop":{source:"contracts/loan/TetuPawnShop.sol",name:"TetuPawnShop",title:"Contract for handling deals between two parties",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_depositToken",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"AuctionBidAccepted(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bidId",type:"uint256"}],name:"AuctionBidAccepted",type:"event"},"AuctionBidClosed(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bidId",type:"uint256"}],name:"AuctionBidClosed",type:"event"},"AuctionBidOpened(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bidId",type:"uint256"}],name:"AuctionBidOpened",type:"event"},"BidExecuted(uint256,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"},{indexed:!1,internalType:"address",name:"lender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"BidExecuted",type:"event"},"PositionClaimed(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"}],name:"PositionClaimed",type:"event"},"PositionClosed(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"}],name:"PositionClosed",type:"event"},"PositionOpened(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"}],name:"PositionOpened",type:"event"},"PositionRedeemed(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"posId",type:"uint256"}],name:"PositionRedeemed",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"AUCTION_DURATION()":{inputs:[],name:"AUCTION_DURATION",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Standard auction duration that refresh when a new bid placed"},"DENOMINATOR()":{inputs:[],name:"DENOMINATOR",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Denominator for any internal computation with low precision"},"PLATFORM_FEE_MAX()":{inputs:[],name:"PLATFORM_FEE_MAX",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Governance can't set fee more than this value"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"},"auctionBidCounter()":{inputs:[],name:"auctionBidCounter",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"BidId counter. Should start from 1 for keep 0 as empty value"},"platformFee()":{inputs:[],name:"platformFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"1% by default, percent of acquired tokens that will be used for buybacks"},"positionCounter()":{inputs:[],name:"positionCounter",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"PosId counter. Should start from 1 for keep 0 as empty value"},"positionDepositAmount()":{inputs:[],name:"positionDepositAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"stateVariable",details:"Amount of tokens for open position. Protection against spam      1000 TETU by default"},"positionDepositToken()":{inputs:[],name:"positionDepositToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"stateVariable",details:"Token for antispam protection. TETU assumed      Zero address means no protection"}},methods:{"acceptAuctionBid(uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"}],name:"acceptAuctionBid",outputs:[],stateMutability:"nonpayable",type:"function",details:"Borrower action. Assume that auction ended.      Transfer acquired token to borrower"},"auctionBidSize(uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"}],name:"auctionBidSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return size of all auction bids for given position"},"auctionBids(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"auctionBids",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"posId",type:"uint256"},{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"}],stateMutability:"view",type:"function"},"bid(uint256,uint256)":{inputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"bid",outputs:[],stateMutability:"nonpayable",type:"function",details:"Lender action. Assume approve for acquired token      Place a bid for given position ID      It can be an auction bid if acquired amount is zero"},"borrowerPositions(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"borrowerPositions",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"borrowerPositionsSize(address)":{inputs:[{internalType:"address",name:"borrower",type:"address"}],name:"borrowerPositionsSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"claim(uint256)":{inputs:[{internalType:"uint256",name:"id",type:"uint256"}],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function",details:"Lender action      Transfer collateral to lender if borrower didn't return the loan      Deposit will be returned to borrower"},"closeAuctionBid(uint256)":{inputs:[{internalType:"uint256",name:"bidId",type:"uint256"}],name:"closeAuctionBid",outputs:[],stateMutability:"nonpayable",type:"function",details:"Lender action. Requires ended auction, or not the last bid      Close auction bid and transfer acquired tokens to lender"},"closePosition(uint256)":{inputs:[{internalType:"uint256",name:"id",type:"uint256"}],name:"closePosition",outputs:[],stateMutability:"nonpayable",type:"function",details:"Borrower action      Close not executed position. Return collateral and deposit to borrower"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"getAssetType(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"getAssetType",outputs:[{internalType:"enum ITetuPawnShop.AssetType",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Return asset type ERC20 or ERC721"},"getAuctionBid(uint256)":{inputs:[{internalType:"uint256",name:"bidId",type:"uint256"}],name:"getAuctionBid",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"posId",type:"uint256"},{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"}],internalType:"struct ITetuPawnShop.AuctionBid",name:"",type:"tuple"}],stateMutability:"view",type:"function",details:"AbiEncoder not able to auto generate functions for mapping with structs",notice:"Return auction bid for given id"},"getPosition(uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"}],name:"getPosition",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address",name:"borrower",type:"address"},{internalType:"address",name:"depositToken",type:"address"},{internalType:"uint256",name:"depositAmount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"},{components:[{internalType:"uint256",name:"posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"posFee",type:"uint256"},{internalType:"uint256",name:"createdBlock",type:"uint256"},{internalType:"uint256",name:"createdTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionInfo",name:"info",type:"tuple"},{components:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"enum ITetuPawnShop.AssetType",name:"collateralType",type:"uint8"},{internalType:"uint256",name:"collateralAmount",type:"uint256"},{internalType:"uint256",name:"collateralTokenId",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionCollateral",name:"collateral",type:"tuple"},{components:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"acquiredAmount",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionAcquired",name:"acquired",type:"tuple"},{components:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posStartBlock",type:"uint256"},{internalType:"uint256",name:"posStartTs",type:"uint256"},{internalType:"uint256",name:"posEndTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionExecution",name:"execution",type:"tuple"}],internalType:"struct ITetuPawnShop.Position",name:"",type:"tuple"}],stateMutability:"view",type:"function",details:"AbiEncoder not able to auto generate functions for mapping with structs",notice:"Return Position for given id"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isERC20(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"isERC20",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isERC721(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"isERC721",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"lastAuctionBidTs(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"lastAuctionBidTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lenderOpenBids(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"lenderOpenBids",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lenderPositions(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"lenderPositions",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lenderPositionsSize(address)":{inputs:[{internalType:"address",name:"lender",type:"address"}],name:"lenderPositionsSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"onERC721Received(address,address,uint256,bytes)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC721Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function",details:"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."},"openPosition(address,uint256,uint256,address,uint256,uint256,uint256)":{inputs:[{internalType:"address",name:"_collateralToken",type:"address"},{internalType:"uint256",name:"_collateralAmount",type:"uint256"},{internalType:"uint256",name:"_collateralTokenId",type:"uint256"},{internalType:"address",name:"_acquiredToken",type:"address"},{internalType:"uint256",name:"_acquiredAmount",type:"uint256"},{internalType:"uint256",name:"_posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"_posFee",type:"uint256"}],name:"openPosition",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"Borrower action. Assume approve      Open a position with multiple options - loan / instant deal / auction"},"openPositions(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"openPositions",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"openPositionsSize()":{inputs:[],name:"openPositionsSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return size of active positions"},"posIndexes(uint8,uint256)":{inputs:[{internalType:"enum ITetuPawnShop.IndexType",name:"",type:"uint8"},{internalType:"uint256",name:"",type:"uint256"}],name:"posIndexes",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"positionToBidIds(uint256,uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],name:"positionToBidIds",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"positions(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"positions",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address",name:"borrower",type:"address"},{internalType:"address",name:"depositToken",type:"address"},{internalType:"uint256",name:"depositAmount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"},{components:[{internalType:"uint256",name:"posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"posFee",type:"uint256"},{internalType:"uint256",name:"createdBlock",type:"uint256"},{internalType:"uint256",name:"createdTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionInfo",name:"info",type:"tuple"},{components:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"enum ITetuPawnShop.AssetType",name:"collateralType",type:"uint8"},{internalType:"uint256",name:"collateralAmount",type:"uint256"},{internalType:"uint256",name:"collateralTokenId",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionCollateral",name:"collateral",type:"tuple"},{components:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"acquiredAmount",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionAcquired",name:"acquired",type:"tuple"},{components:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posStartBlock",type:"uint256"},{internalType:"uint256",name:"posStartTs",type:"uint256"},{internalType:"uint256",name:"posEndTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionExecution",name:"execution",type:"tuple"}],stateMutability:"view",type:"function"},"positionsByAcquired(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"positionsByAcquired",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"positionsByAcquiredSize(address)":{inputs:[{internalType:"address",name:"acquiredToken",type:"address"}],name:"positionsByAcquiredSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"positionsByCollateral(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"positionsByCollateral",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"positionsByCollateralSize(address)":{inputs:[{internalType:"address",name:"collateral",type:"address"}],name:"positionsByCollateralSize",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"redeem(uint256)":{inputs:[{internalType:"uint256",name:"id",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function",details:"Borrower action. Assume approve on acquired token      Return the loan to lender, transfer collateral and deposit to borrower"},"setPlatformFee(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setPlatformFee",outputs:[],stateMutability:"nonpayable",type:"function",details:"Platform fee in range 0 - 500, with denominator 10000"},"setPositionDepositAmount(uint256)":{inputs:[{internalType:"uint256",name:"_value",type:"uint256"}],name:"setPositionDepositAmount",outputs:[],stateMutability:"nonpayable",type:"function",details:"Tokens amount that need to deposit for a new position      Will be returned when position closed"},"setPositionDepositToken(address)":{inputs:[{internalType:"address",name:"_value",type:"address"}],name:"setPositionDepositToken",outputs:[],stateMutability:"nonpayable",type:"function",details:"Tokens that need to deposit for a new position"},"toRedeem(uint256)":{inputs:[{internalType:"uint256",name:"id",type:"uint256"}],name:"toRedeem",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return amount required for redeem position"}}},"contracts/strategies/matic/cafe/StrategyCafeSwapLp.sol:StrategyCafeSwapLp":{source:"contracts/strategies/matic/cafe/StrategyCafeSwapLp.sol",name:"StrategyCafeSwapLp",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_poolId",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"MASTER_CHEF()":{inputs:[],name:"MASTER_CHEF",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"masterChefPool()":{inputs:[],name:"masterChefPool",outputs:[{internalType:"contract ICafeMasterChef",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the MasterChef pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in MasterChef pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"bal Balance amount in underlying tokens"},notice:"Strategy balance in the MasterChef pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/cosmic/StrategyCosmicSwapLp.sol:StrategyCosmicSwapLp":{source:"contracts/strategies/matic/cosmic/StrategyCosmicSwapLp.sol",name:"StrategyCosmicSwapLp",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_poolId",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"_MASTER_CHEF_REWARD_POOL()":{inputs:[],name:"_MASTER_CHEF_REWARD_POOL",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"masterChefPool()":{inputs:[],name:"masterChefPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the MasterChef pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in MasterChef pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"bal Balance amount in underlying tokens"},notice:"Strategy balance in the MasterChef pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/curve/CurveAaveStrategy.sol:CurveAaveStrategy":{source:"contracts/strategies/matic/curve/CurveAaveStrategy.sol",name:"CurveAaveStrategy",title:"Contract for Curve aave strategy implementation",author:"Oleg N",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_vault",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"CURVE_AAVE_GAUGE()":{inputs:[],name:"CURVE_AAVE_GAUGE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Curve gauge rewards pool"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",notice:"assets should reflect underlying tokens need to investing"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"gague()":{inputs:[],name:"gague",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Curve gauge rewards pool"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the curve gauge pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes.  To get the result need to call claimable_reward_write from Gauge contract first,  otherwise returns 0",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Gauge pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the Gauge pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/curve/CurveRenStrategy.sol:CurveRenStrategy":{source:"contracts/strategies/matic/curve/CurveRenStrategy.sol",name:"CurveRenStrategy",title:"Contract for Curve REN strategy implementation",author:"Oleg N",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_vault",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"CURVE_REN_GAUGE()":{inputs:[],name:"CURVE_REN_GAUGE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Curve gauge rewards pool"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",notice:"assets should reflect underlying tokens need to investing"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"gague()":{inputs:[],name:"gague",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Curve gauge rewards pool"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the curve gauge pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes.  To get the result need to call claimable_reward_write from Gauge contract first,  otherwise returns 0",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Gauge pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the Gauge pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/dino/StrategyDinoSwapLp.sol:StrategyDinoSwapLp":{source:"contracts/strategies/matic/dino/StrategyDinoSwapLp.sol",name:"StrategyDinoSwapLp",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_poolId",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"MASTER_CHEF()":{inputs:[],name:"MASTER_CHEF",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"computeWeeklyPoolReward()":{inputs:[],name:"computeWeeklyPoolReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Weekly reward amount of DINO"},notice:"Calculate approximately weekly reward amounts for DINO"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Dino rewards pool"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Dino FossilFarms rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Dino FossilFarms pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Dino FossilFarms pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the Dino FossilFarms pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/hermes/StrategyHermesSwapLp.sol:StrategyHermesSwapLp":{source:"contracts/strategies/matic/hermes/StrategyHermesSwapLp.sol",name:"StrategyHermesSwapLp",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_poolId",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"MASTER_CHEF()":{inputs:[],name:"MASTER_CHEF",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Hermes rewards pool"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Hermes MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Hermes MasterChef pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Hermes MasterChef pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the Hermes MasterChef pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/iron/StrategyIronFold.sol:StrategyIronFold":{source:"contracts/strategies/matic/iron/StrategyIronFold.sol",name:"StrategyIronFold",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_rToken",type:"address"},{internalType:"uint256",name:"_borrowTargetFactorNumerator",type:"uint256"},{internalType:"uint256",name:"_collateralFactorNumerator",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},events:{"BorrowTargetFactorNumeratorChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"BorrowTargetFactorNumeratorChanged",type:"event"},"CollateralFactorNumeratorChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"CollateralFactorNumeratorChanged",type:"event"},"FoldChanged(bool)":{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"value",type:"bool"}],name:"FoldChanged",type:"event"},"FoldStarted(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"borrowTargetFactorNumerator",type:"uint256"}],name:"FoldStarted",type:"event"},"FoldStopped()":{anonymous:!1,inputs:[],name:"FoldStopped",type:"event"},"MaxDepthReached()":{anonymous:!1,inputs:[],name:"MaxDepthReached",type:"event"},"NoMoneyForLiquidateUnderlying()":{anonymous:!1,inputs:[],name:"NoMoneyForLiquidateUnderlying",type:"event"},"Rebalanced(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"supplied",type:"uint256"},{indexed:!1,internalType:"uint256",name:"borrowed",type:"uint256"},{indexed:!1,internalType:"uint256",name:"borrowTarget",type:"uint256"}],name:"Rebalanced",type:"event"},"UnderlyingLiquidationFailed()":{anonymous:!1,inputs:[],name:"UnderlyingLiquidationFailed",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"ICE_R_TOKEN()":{inputs:[],name:"ICE_R_TOKEN",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"MAX_DEPTH()":{inputs:[],name:"MAX_DEPTH",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"R_ETHER()":{inputs:[],name:"R_ETHER",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"W_MATIC()":{inputs:[],name:"W_MATIC",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"_IRON_CONTROLLER()":{inputs:[],name:"_IRON_CONTROLLER",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"borrowTargetFactorNumerator()":{inputs:[],name:"borrowTargetFactorNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"borrowTargetFactorNumeratorStored()":{inputs:[],name:"borrowTargetFactorNumeratorStored",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Numerator value for the targeted borrow rate"},"borrowedInUnderlying()":{inputs:[],name:"borrowedInUnderlying",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"collateralFactorNumerator()":{inputs:[],name:"collateralFactorNumerator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Numerator value for the asset market collateral value"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"factorDenominator()":{inputs:[],name:"factorDenominator",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Denominator value for the both above mentioned ratios"},"fold()":{inputs:[],name:"fold",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Use folding"},"foldCostRatePerToken()":{inputs:[],name:"foldCostRatePerToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return a normalized to 18 decimal cost of folding"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"ironController()":{inputs:[],name:"ironController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Iron Controller address"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isFoldingProfitable()":{inputs:[],name:"isFoldingProfitable",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Return true if we can gain profit with folding"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the rToken contract"},"rToken()":{inputs:[],name:"rToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"RToken address"},"rTokenUnderlyingPrice(address)":{inputs:[{internalType:"address",name:"_rToken",type:"address"}],name:"rTokenUnderlyingPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Return rToken price from Iron Oracle solution. Can be used on-chain safely"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"pure",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Iron MasterChef contract"},"rebalance()":{inputs:[],name:"rebalance",outputs:[],stateMutability:"nonpayable",type:"function",details:"Rebalances the borrow ratio"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"bal Balance amount in underlying tokens"},notice:"Strategy balance supplied minus borrowed"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"rewardsRateNormalised()":{inputs:[],name:"rewardsRateNormalised",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Calculate expected rewards rate for reward token"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"setBorrowTargetFactorNumeratorStored(uint256)":{inputs:[{internalType:"uint256",name:"_target",type:"uint256"}],name:"setBorrowTargetFactorNumeratorStored",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set borrow rate target"},"setCollateralFactorNumerator(uint256)":{inputs:[{internalType:"uint256",name:"_target",type:"uint256"}],name:"setCollateralFactorNumerator",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set collateral rate for asset market"},"setFold(bool)":{inputs:[{internalType:"bool",name:"_fold",type:"bool"}],name:"setFold",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set use folding"},"startFolding()":{inputs:[],name:"startFolding",outputs:[],stateMutability:"nonpayable",type:"function"},"stopFolding()":{inputs:[],name:"stopFolding",outputs:[],stateMutability:"nonpayable",type:"function"},"suppliedInUnderlying()":{inputs:[],name:"suppliedInUnderlying",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Strategy balance parameters to be tracked"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/iron/StrategyIronSwap.sol:StrategyIronSwap":{source:"contracts/strategies/matic/iron/StrategyIronSwap.sol",name:"StrategyIronSwap",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address[]",name:"_tokens",type:"address[]"},{internalType:"uint256",name:"_poolId",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"_MASTER_CHEF_REWARD_POOL()":{inputs:[],name:"_MASTER_CHEF_REWARD_POOL",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"mcRewardPool()":{inputs:[],name:"mcRewardPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Iron MasterChef contract"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Iron MasterChef contract"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"bal Balance amount in underlying tokens"},notice:"Strategy balance in the Iron MasterChef contract"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/iron/StrategyIronUniPair.sol:StrategyIronUniPair":{source:"contracts/strategies/matic/iron/StrategyIronUniPair.sol",name:"StrategyIronUniPair",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_poolId",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"_MASTER_CHEF_REWARD_POOL()":{inputs:[],name:"_MASTER_CHEF_REWARD_POOL",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"mcRewardPool()":{inputs:[],name:"mcRewardPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Iron MasterChef contract"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Iron MasterChef contract"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"bal Balance amount in underlying tokens"},notice:"Strategy balance in the Iron MasterChef contract"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/quick/StrategyQuickSwapLp.sol:StrategyQuickSwapLp":{source:"contracts/strategies/matic/quick/StrategyQuickSwapLp.sol",name:"StrategyQuickSwapLp",title:"SNXStrategyFullBuyback implementation for QuickSwap platform",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"address",name:"_quickRewardPool",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Synthetix pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in the Synthetix pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPool()":{inputs:[],name:"rewardPool",outputs:[{internalType:"contract SNXRewardInterface",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Synthetix like poll with rewards"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance amount in underlying tokens"},notice:"Strategy balance in the Synthetix pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/quick/StrategyQuickSwapLpDual.sol:StrategyQuickSwapLpDual":{source:"contracts/strategies/matic/quick/StrategyQuickSwapLpDual.sol",name:"StrategyQuickSwapLpDual",title:"QuickStrategyBaseV2 implementation for QuickSwap platform",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"address",name:"_quickRewardPool",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"D_QUICK()":{inputs:[],name:"D_QUICK",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"QUICK()":{inputs:[],name:"QUICK",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"WMATIC()":{inputs:[],name:"WMATIC",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"QuickSwap Dual farm pool"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Synthetix pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in the Synthetix pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance amount in underlying tokens"},notice:"Strategy balance in the Synthetix pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/quick/StrategyQuickSwapLpV2.sol:StrategyQuickSwapLpV2":{source:"contracts/strategies/matic/quick/StrategyQuickSwapLpV2.sol",name:"StrategyQuickSwapLpV2",title:"QuickStrategyBaseV2 implementation for QuickSwap platform",author:"belbix",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"address",name:"_quickRewardPool",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"D_QUICK()":{inputs:[],name:"D_QUICK",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"QUICK()":{inputs:[],name:"QUICK",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Synthetix pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in the Synthetix pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPool()":{inputs:[],name:"rewardPool",outputs:[{internalType:"contract SNXRewardInterface",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Synthetix like pool with rewards"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance amount in underlying tokens"},notice:"Strategy balance in the Synthetix pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/sushiswap/StrategySushiSwapLp.sol:StrategySushiSwapLp":{source:"contracts/strategies/matic/sushiswap/StrategySushiSwapLp.sol",name:"StrategySushiSwapLp",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_poolId",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"_MASTER_CHEF_REWARD_POOL()":{inputs:[],name:"_MASTER_CHEF_REWARD_POOL",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"mcRewardPool()":{inputs:[],name:"mcRewardPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"MasterChef rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the Master Chef pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in Master Chef pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the Master Chef pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/tetu/StrategyTetuSwap.sol:StrategyTetuSwap":{source:"contracts/strategies/matic/tetu/StrategyTetuSwap.sol",name:"StrategyTetuSwap",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"X_TETU()":{inputs:[],name:"X_TETU",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pair()":{inputs:[],name:"pair",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"TetuSwap pair"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"Pair total supply"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",notice:"Stabbed to 0"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function",notice:"Stabbed to 0"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/wault/StrategyWaultLp.sol:StrategyWaultLp":{source:"contracts/strategies/matic/wault/StrategyWaultLp.sol",name:"StrategyWaultLp",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_poolId",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"WEX_POLY_MASTER()":{inputs:[],name:"WEX_POLY_MASTER",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Wault rewards pool"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"WexPolyMaster rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the WexPolyMaster pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in WexPolyMaster pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the WexPolyMaster pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/strategies/matic/wault/StrategyWaultSingle.sol:StrategyWaultSingle":{source:"contracts/strategies/matic/wault/StrategyWaultSingle.sol",name:"StrategyWaultSingle",constructor:{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"_underlying",type:"address"},{internalType:"uint256",name:"_poolId",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"STRATEGY_NAME()":{inputs:[],name:"STRATEGY_NAME",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Strategy type for statistical purposes"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Version of the contract"},"WEX_POLY_MASTER()":{inputs:[],name:"WEX_POLY_MASTER",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"assets()":{inputs:[],name:"assets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"buyBackRatio()":{inputs:[],name:"buyBackRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Buy back ratio"},notice:"Strategy buy back ratio. Currently stubbed to 100%"},"continueInvesting()":{inputs:[],name:"continueInvesting",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Resumes the ability to invest into the underlying reward pools"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"doHardWork()":{inputs:[],name:"doHardWork",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claim rewards from external project and send them to FeeRewardForwarder"},"emergencyExit()":{inputs:[],name:"emergencyExit",outputs:[],stateMutability:"nonpayable",type:"function",notice:"In case there are some issues discovered about the pool or underlying asset         Governance can exit the pool properly         The function is only used for emergency to exit the pool         Pause investing"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"investAllUnderlying()":{inputs:[],name:"investAllUnderlying",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Stakes everything the strategy holds into the reward pool"},"investedUnderlyingBalance()":{inputs:[],name:"investedUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Sum of underlying balances"},notice:"Return underlying balance + balance in the reward pool"},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"pausedInvesting()":{inputs:[],name:"pausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"platform()":{inputs:[],name:"platform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Wault rewards pool"},"poolID()":{inputs:[],name:"poolID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"WexPolyMaster rewards pool ID"},"poolTotalAmount()":{inputs:[],name:"poolTotalAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Only for statistic",returns:{_0:"Pool TVL"},notice:"TVL of the underlying in the WexPolyMaster pool"},"readyToClaim()":{inputs:[],name:"readyToClaim",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"Don't use it in any internal logic, only for statistical purposes",returns:{_0:"Array with amounts ready to claim"},notice:"Return approximately amount of reward tokens ready to claim in WexPolyMaster pool"},"rewardBalance(uint256)":{inputs:[{internalType:"uint256",name:"rewardTokenIdx",type:"uint256"}],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of given token"},notice:"Balance of given token on this contract"},"rewardPoolBalance()":{inputs:[],name:"rewardPoolBalance",outputs:[{internalType:"uint256",name:"bal",type:"uint256"}],stateMutability:"view",type:"function",returns:{bal:"Balance amount in underlying tokens"},notice:"Strategy balance in the WexPolyMaster pool"},"rewardTokens()":{inputs:[],name:"rewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"Reward tokens array"},notice:"Reward tokens of external project"},"salvage(address,address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"salvage",outputs:[],stateMutability:"nonpayable",type:"function",params:{recipient:"Token amount"},notice:"Controller can claim coins that are somehow transferred into the contract         Note that they cannot come in take away coins that are used and defined in the strategy itself"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Strategy underlying token"},notice:"Strategy underlying, the same in the Vault"},"underlyingBalance()":{inputs:[],name:"underlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"Balance of underlying token"},notice:"Underlying balance of this contract"},"unsalvageableTokens(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"unsalvageableTokens",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",returns:{_0:"True if given token unsalvageable"},notice:"Return true for tokens that governance can't touch"},"vault()":{inputs:[],name:"vault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Vault address"},notice:"SmartVault address linked to this strategy"},"withdrawAllToVault()":{inputs:[],name:"withdrawAllToVault",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraws all the asset to the vault"},"withdrawToVault(uint256)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawToVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Asset amount"},notice:"Withdraws some asset to the vault"}}},"contracts/swap/FactoryStorage.sol:FactoryStorage":{source:"contracts/swap/FactoryStorage.sol",name:"FactoryStorage",title:"Eternal storage + getters and setters pattern",author:"belbix",details:"If you will change a key value it will require setup it again",methods:{"allPairs(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"allPairs",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"allPairsLength()":{inputs:[],name:"allPairsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"createPair(address,address)":{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"}],name:"createPair",outputs:[{internalType:"address",name:"pair",type:"address"}],stateMutability:"nonpayable",type:"function"},"getPair(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"getPair",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"validPairs(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"validPairs",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}}},"contracts/swap/TetuSwapERC20.sol:TetuSwapERC20":{source:"contracts/swap/TetuSwapERC20.sol",name:"TetuSwapERC20",title:"Uniswap implementation of ERC20 token with permit        https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2ERC20.sol",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"PERMIT_TYPEHASH()":{inputs:[],name:"PERMIT_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"balanceOf(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"nonces(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}}},"contracts/swap/TetuSwapFactory.sol:TetuSwapFactory":{source:"contracts/swap/TetuSwapFactory.sol",name:"TetuSwapFactory",title:"Tetu swap factory based on Uniswap code",author:"belbix",details:"Use with TetuProxyControlled.sol",events:{"PairCreated(address,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token0",type:"address"},{indexed:!0,internalType:"address",name:"token1",type:"address"},{indexed:!1,internalType:"address",name:"pair",type:"address"},{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"PairCreated",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"DEFAULT_FEE()":{inputs:[],name:"DEFAULT_FEE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"TIME_LOCK()":{inputs:[],name:"TIME_LOCK",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"allPairs(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"allPairs",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"allPairsLength()":{inputs:[],name:"allPairsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"announceVaultsChange(address,address)":{inputs:[{internalType:"address",name:"_vaultA",type:"address"},{internalType:"address",name:"_vaultB",type:"address"}],name:"announceVaultsChange",outputs:[],stateMutability:"nonpayable",type:"function"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"createPair(address,address)":{inputs:[{internalType:"address",name:"vaultA",type:"address"},{internalType:"address",name:"vaultB",type:"address"}],name:"createPair",outputs:[{internalType:"address",name:"pair",type:"address"}],stateMutability:"nonpayable",type:"function"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"getPair(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"getPair",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"initialize(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup      Initialize Controllable with sender address",notice:"Initialize contract after setup it as proxy implementation"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"setPairFee(address,uint256)":{inputs:[{internalType:"address",name:"_pair",type:"address"},{internalType:"uint256",name:"_fee",type:"uint256"}],name:"setPairFee",outputs:[],stateMutability:"nonpayable",type:"function"},"setPairRewardRecipient(address,address)":{inputs:[{internalType:"address",name:"_pair",type:"address"},{internalType:"address",name:"_recipient",type:"address"}],name:"setPairRewardRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},"setVaultsForPair(address,address)":{inputs:[{internalType:"address",name:"_vaultA",type:"address"},{internalType:"address",name:"_vaultB",type:"address"}],name:"setVaultsForPair",outputs:[],stateMutability:"nonpayable",type:"function"},"validPairs(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"validPairs",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}}},"contracts/swap/TetuSwapPair.sol:TetuSwapPair":{source:"contracts/swap/TetuSwapPair.sol",name:"TetuSwapPair",title:"Tetu swap pair based on Uniswap solution        Invest underlying assets to Tetu SmartVaults",author:"belbix",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Burn(address,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount0",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1",type:"uint256"},{indexed:!0,internalType:"address",name:"to",type:"address"}],name:"Burn",type:"event"},"Claimed(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"blockTs",type:"uint256"}],name:"Claimed",type:"event"},"FeeChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newFee",type:"uint256"}],name:"FeeChanged",type:"event"},"Mint(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount0",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1",type:"uint256"}],name:"Mint",type:"event"},"RewardRecipientChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldRecipient",type:"address"},{indexed:!1,internalType:"address",name:"newRecipient",type:"address"}],name:"RewardRecipientChanged",type:"event"},"Swap(address,uint256,uint256,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount0In",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1In",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount0Out",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1Out",type:"uint256"},{indexed:!0,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},"Sync(uint112,uint112)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint112",name:"reserve0",type:"uint112"},{indexed:!1,internalType:"uint112",name:"reserve1",type:"uint112"}],name:"Sync",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"VaultsChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"vault0",type:"address"},{indexed:!1,internalType:"address",name:"vault1",type:"address"}],name:"VaultsChanged",type:"event"}},stateVariables:{"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"stateVariable",details:"Should be incremented when contract changed",notice:"Version of the contract"}},methods:{"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MAX_FEE()":{inputs:[],name:"MAX_FEE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MINIMUM_LIQUIDITY()":{inputs:[],name:"MINIMUM_LIQUIDITY",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PERMIT_TYPEHASH()":{inputs:[],name:"PERMIT_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"PRECISION()":{inputs:[],name:"PRECISION",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"balanceOf(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"balanceOfVaultUnderlying(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"balanceOfVaultUnderlying",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns vault underlying balance, or zero if it is not a underlying token"},"burn(address)":{inputs:[{internalType:"address",name:"to",type:"address"}],name:"burn",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"Assume lp token already sent to this contract      Burn LP tokens and send back underlying assets. Based on vault shares"},"claimAll()":{inputs:[],name:"claimAll",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only reward recipient able to call it      Claims vaults rewards and send it to recipient"},"createdBlock()":{inputs:[],name:"createdBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"createdTs()":{inputs:[],name:"createdTs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"fee()":{inputs:[],name:"fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getAmountIn(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns expected input amount for given output amount"},"getFeeAmount(uint256,uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"},{internalType:"uint256",name:"amountOutWithFee",type:"uint256"}],name:"getFeeAmount",outputs:[{internalType:"uint256",name:"amountFee",type:"uint256"}],stateMutability:"pure",type:"function",details:"Calculates fee amount assuming that amountOutWithFee includes actual fee      Keep 1/10 of fee for auto-compounding      In case of 0 fees we will not able to use vaults with deposited amount fluctuations"},"getReserves()":{inputs:[],name:"getReserves",outputs:[{internalType:"uint112",name:"_reserve0",type:"uint112"},{internalType:"uint112",name:"_reserve1",type:"uint112"},{internalType:"uint32",name:"_blockTimestampLast",type:"uint32"}],stateMutability:"view",type:"function",details:"Return saved reserves. Be aware that reserves always fluctuate!      For actual values need to call update"},"initialize(address,address,uint256)":{inputs:[{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_fee",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Called once by the factory at time of deployment"},"mint(address)":{inputs:[{internalType:"address",name:"to",type:"address"}],name:"mint",outputs:[{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"Assume underlying tokens already sent to this contract      Mint new LP tokens to sender. Based on vault shares"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"nonces(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},"price0CumulativeLast()":{inputs:[],name:"price0CumulativeLast",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"price1CumulativeLast()":{inputs:[],name:"price1CumulativeLast",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardRecipient()":{inputs:[],name:"rewardRecipient",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setFee(uint256)":{inputs:[{internalType:"uint256",name:"_fee",type:"uint256"}],name:"setFee",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set fee in range 0-0.3%"},"setRewardRecipient(address)":{inputs:[{internalType:"address",name:"_recipient",type:"address"}],name:"setRewardRecipient",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set rewards recipient. This address will able to claim vault rewards and get swap fees"},"setVaults(address,address)":{inputs:[{internalType:"address",name:"_vault0",type:"address"},{internalType:"address",name:"_vault1",type:"address"}],name:"setVaults",outputs:[],stateMutability:"nonpayable",type:"function",details:"Called by fee setter after pair initialization"},"swap(uint256,uint256,address,bytes)":{inputs:[{internalType:"uint256",name:"amount0Out",type:"uint256"},{internalType:"uint256",name:"amount1Out",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"bytes",name:"data",type:"bytes"}],name:"swap",outputs:[],stateMutability:"nonpayable",type:"function",details:"Assume tokenIn already sent to this contract      During swap process underlying assets will be deposited and withdrew from vaults      Depends on vault logic, underlying asset can be deposited with little reducing of amount      For keeping healthy K we are auto-compounding 1/10 of fees"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"sync()":{inputs:[],name:"sync",outputs:[],stateMutability:"nonpayable",type:"function",details:"Force update"},"token0()":{inputs:[],name:"token0",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"token1()":{inputs:[],name:"token1",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"vault0()":{inputs:[],name:"vault0",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vault1()":{inputs:[],name:"vault1",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaultReserve0()":{inputs:[],name:"vaultReserve0",outputs:[{internalType:"uint112",name:"",type:"uint112"}],stateMutability:"view",type:"function",details:"Returns vault underlying balance for this contract"},"vaultReserve1()":{inputs:[],name:"vaultReserve1",outputs:[{internalType:"uint112",name:"",type:"uint112"}],stateMutability:"view",type:"function",details:"Returns vault underlying balance for this contract"}}},"contracts/swap/TetuSwapRouter.sol:TetuSwapRouter":{source:"contracts/swap/TetuSwapRouter.sol",name:"TetuSwapRouter",title:"UniswapV2Router02 https://github.com/Uniswap/v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol",details:"Few changes for compatability with Tetu Swap",constructor:{inputs:[{internalType:"address",name:"_factory",type:"address"},{internalType:"address",name:"_WETH",type:"address"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},methods:{"WETH()":{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountTokenDesired",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"payable",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getAmountIn(uint256,uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountOut(uint256,uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountsIn(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"getAmountsOut(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"quote(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETHSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermit",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityWithPermit",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"swapETHForExactTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"payable",type:"function"},"swapExactTokensForETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETHSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"swapTokensForExactETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"}}},"contracts/swap/interfaces/ITetuSwapERC20.sol:ITetuSwapERC20":{source:"contracts/swap/interfaces/ITetuSwapERC20.sol",name:"ITetuSwapERC20",methods:{"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"PERMIT_TYPEHASH()":{inputs:[],name:"PERMIT_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"pure",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"balanceOf(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function"},"nonces(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}}},"contracts/swap/interfaces/ITetuSwapFactory.sol:ITetuSwapFactory":{source:"contracts/swap/interfaces/ITetuSwapFactory.sol",name:"ITetuSwapFactory",methods:{"allPairs(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"allPairs",outputs:[{internalType:"address",name:"pair",type:"address"}],stateMutability:"view",type:"function"},"allPairsLength()":{inputs:[],name:"allPairsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"createPair(address,address)":{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"}],name:"createPair",outputs:[{internalType:"address",name:"pair",type:"address"}],stateMutability:"nonpayable",type:"function"},"getPair(address,address)":{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"}],name:"getPair",outputs:[{internalType:"address",name:"pair",type:"address"}],stateMutability:"view",type:"function"},"validPairs(address)":{inputs:[{internalType:"address",name:"_pair",type:"address"}],name:"validPairs",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}}},"contracts/swap/interfaces/ITetuSwapPair.sol:ITetuSwapPair":{source:"contracts/swap/interfaces/ITetuSwapPair.sol",name:"ITetuSwapPair",methods:{"MINIMUM_LIQUIDITY()":{inputs:[],name:"MINIMUM_LIQUIDITY",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},"balanceOfVaultUnderlying(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"balanceOfVaultUnderlying",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"burn(address)":{inputs:[{internalType:"address",name:"to",type:"address"}],name:"burn",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"claimAll()":{inputs:[],name:"claimAll",outputs:[],stateMutability:"nonpayable",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"fee()":{inputs:[],name:"fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getReserves()":{inputs:[],name:"getReserves",outputs:[{internalType:"uint112",name:"reserve0",type:"uint112"},{internalType:"uint112",name:"reserve1",type:"uint112"},{internalType:"uint32",name:"blockTimestampLast",type:"uint32"}],stateMutability:"view",type:"function"},"initialize(address,address,uint256)":{inputs:[{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_fee",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"mint(address)":{inputs:[{internalType:"address",name:"to",type:"address"}],name:"mint",outputs:[{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"price0CumulativeLast()":{inputs:[],name:"price0CumulativeLast",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"price1CumulativeLast()":{inputs:[],name:"price1CumulativeLast",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardRecipient()":{inputs:[],name:"rewardRecipient",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setFee(uint256)":{inputs:[{internalType:"uint256",name:"_fee",type:"uint256"}],name:"setFee",outputs:[],stateMutability:"nonpayable",type:"function"},"setRewardRecipient(address)":{inputs:[{internalType:"address",name:"_recipient",type:"address"}],name:"setRewardRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},"setVaults(address,address)":{inputs:[{internalType:"address",name:"_vault0",type:"address"},{internalType:"address",name:"_vault1",type:"address"}],name:"setVaults",outputs:[],stateMutability:"nonpayable",type:"function"},"swap(uint256,uint256,address,bytes)":{inputs:[{internalType:"uint256",name:"amount0Out",type:"uint256"},{internalType:"uint256",name:"amount1Out",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"bytes",name:"data",type:"bytes"}],name:"swap",outputs:[],stateMutability:"nonpayable",type:"function"},"sync()":{inputs:[],name:"sync",outputs:[],stateMutability:"nonpayable",type:"function"},"token0()":{inputs:[],name:"token0",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"token1()":{inputs:[],name:"token1",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vault0()":{inputs:[],name:"vault0",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vault1()":{inputs:[],name:"vault1",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/swap/interfaces/ITetuSwapRouter.sol:ITetuSwapRouter":{source:"contracts/swap/interfaces/ITetuSwapRouter.sol",name:"ITetuSwapRouter",methods:{"WETH()":{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountTokenDesired",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"payable",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getAmountIn(uint256,uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountOut(uint256,uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountsIn(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"getAmountsOut(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"quote(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETHSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermit",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityWithPermit",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"swapETHForExactTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"payable",type:"function"},"swapExactTokensForETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETHSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"swapTokensForExactETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"}}},"contracts/swap/interfaces/IWETH.sol:IWETH":{source:"contracts/swap/interfaces/IWETH.sol",name:"IWETH",methods:{"deposit()":{inputs:[],name:"deposit",outputs:[],stateMutability:"payable",type:"function"},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/swap/libraries/Math.sol:Math":{source:"contracts/swap/libraries/Math.sol",name:"Math",title:"Uniswap Math https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/Math.sol        A library for performing various math operations"},"contracts/swap/libraries/TetuSwapLibrary.sol:TetuSwapLibrary":{source:"contracts/swap/libraries/TetuSwapLibrary.sol",name:"TetuSwapLibrary",title:"UniswapV2Library https://github.com/Uniswap/v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol"},"contracts/swap/libraries/TransferHelper.sol:TransferHelper":{source:"contracts/swap/libraries/TransferHelper.sol",name:"TransferHelper",title:"helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false"},"contracts/swap/libraries/UQ112x112.sol:UQ112x112":{source:"contracts/swap/libraries/UQ112x112.sol",name:"UQ112x112",title:"Uniswap UQ112x112 solution https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/UQ112x112.sol        A library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))",details:"range: [0, 2**112 - 1]      resolution: 1 / 2**112"},"contracts/tools/ContractReader.sol:ContractReader":{source:"contracts/tools/ContractReader.sol",name:"ContractReader",title:"View data reader for using on website UI and other integrations",author:"belbix",events:{"ToolAddressUpdated(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"ToolAddressUpdated",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"PRECISION()":{inputs:[],name:"PRECISION",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"bookkeeper()":{inputs:[],name:"bookkeeper",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"computeApr(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"tvl",type:"uint256"},{internalType:"uint256",name:"rewards",type:"uint256"},{internalType:"uint256",name:"duration",type:"uint256"}],name:"computeApr",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},"computeRewardApr(address,address)":{inputs:[{internalType:"address",name:"_vault",type:"address"},{internalType:"address",name:"rt",type:"address"}],name:"computeRewardApr",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"getPrice(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"getPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize(address,address)":{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_calculator",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"priceCalculator()":{inputs:[],name:"priceCalculator",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setPriceCalculator(address)":{inputs:[{internalType:"address",name:"newValue",type:"address"}],name:"setPriceCalculator",outputs:[],stateMutability:"nonpayable",type:"function"},"strategies()":{inputs:[],name:"strategies",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"strategiesLength()":{inputs:[],name:"strategiesLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"strategyAssets(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"strategyAssets",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"strategyCreated(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"strategyCreated",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"strategyEarned(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"strategyEarned",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"strategyPausedInvesting(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"strategyPausedInvesting",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"strategyPlatform(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"strategyPlatform",outputs:[{internalType:"enum IStrategy.Platform",name:"",type:"uint8"}],stateMutability:"view",type:"function"},"strategyRewardTokens(address)":{inputs:[{internalType:"address",name:"_strategy",type:"address"}],name:"strategyRewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"tetuTokenValues()":{inputs:[],name:"tetuTokenValues",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"totalTetuBoughBack(address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"totalTetuBoughBack",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalTetuBoughBack2(address[])":{inputs:[{internalType:"address[]",name:"_strategies",type:"address[]"}],name:"totalTetuBoughBack2",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalTvlUsdc(address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"totalTvlUsdc",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalUsers(address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"totalUsers",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalUsersForAllVaults()":{inputs:[],name:"totalUsersForAllVaults",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userDepositedShare(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userDepositedShare",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userDepositedUnderlying(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userDepositedUnderlying",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userDepositedUnderlyingUsdc(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userDepositedUnderlyingUsdc",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userInfo(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userInfo",outputs:[{components:[{internalType:"address",name:"wallet",type:"address"},{internalType:"address",name:"vault",type:"address"},{internalType:"uint256",name:"underlyingBalance",type:"uint256"},{internalType:"uint256",name:"underlyingBalanceUsdc",type:"uint256"},{internalType:"uint256",name:"depositedUnderlying",type:"uint256"},{internalType:"uint256",name:"depositedUnderlyingUsdc",type:"uint256"},{internalType:"uint256",name:"depositedShare",type:"uint256"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewards",type:"uint256[]"},{internalType:"uint256[]",name:"rewardsUsdc",type:"uint256[]"},{internalType:"uint256[]",name:"rewardsBoost",type:"uint256[]"},{internalType:"uint256[]",name:"rewardsBoostUsdc",type:"uint256[]"}],internalType:"struct ContractReader.UserInfo",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"userInfoLight(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userInfoLight",outputs:[{components:[{internalType:"uint256",name:"depositedUnderlying",type:"uint256"},{internalType:"uint256",name:"depositedUnderlyingUsdc",type:"uint256"},{internalType:"uint256",name:"depositedShare",type:"uint256"}],internalType:"struct ContractReader.UserInfoLight",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"userInfosLight(address,address[])":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"userInfosLight",outputs:[{components:[{internalType:"uint256",name:"depositedUnderlying",type:"uint256"},{internalType:"uint256",name:"depositedUnderlyingUsdc",type:"uint256"},{internalType:"uint256",name:"depositedShare",type:"uint256"}],internalType:"struct ContractReader.UserInfoLight[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"userRewards(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userRewards",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"userRewardsBoost(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userRewardsBoost",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"userRewardsBoostUsdc(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userRewardsBoostUsdc",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"userRewardsUsdc(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userRewardsUsdc",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"userUnderlyingBalance(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userUnderlyingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userUnderlyingBalanceUsdc(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"userUnderlyingBalanceUsdc",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultActive(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultActive",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"vaultCreated(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultCreated",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultDecimals(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultDecimals",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultDuration(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultDuration",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultInfo(address)":{inputs:[{internalType:"address",name:"vault",type:"address"}],name:"vaultInfo",outputs:[{components:[{internalType:"address",name:"addr",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"uint256",name:"created",type:"uint256"},{internalType:"bool",name:"active",type:"bool"},{internalType:"uint256",name:"tvl",type:"uint256"},{internalType:"uint256",name:"tvlUsdc",type:"uint256"},{internalType:"uint256",name:"decimals",type:"uint256"},{internalType:"address",name:"underlying",type:"address"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewardTokensBal",type:"uint256[]"},{internalType:"uint256[]",name:"rewardTokensBalUsdc",type:"uint256[]"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256[]",name:"rewardsApr",type:"uint256[]"},{internalType:"uint256",name:"ppfsApr",type:"uint256"},{internalType:"uint256",name:"users",type:"uint256"},{internalType:"address",name:"strategy",type:"address"},{internalType:"uint256",name:"strategyCreated",type:"uint256"},{internalType:"enum IStrategy.Platform",name:"platform",type:"uint8"},{internalType:"address[]",name:"assets",type:"address[]"},{internalType:"address[]",name:"strategyRewards",type:"address[]"},{internalType:"bool",name:"strategyOnPause",type:"bool"},{internalType:"uint256",name:"earned",type:"uint256"}],internalType:"struct ContractReader.VaultInfo",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"vaultInfoLight(address)":{inputs:[{internalType:"address",name:"vault",type:"address"}],name:"vaultInfoLight",outputs:[{components:[{internalType:"address",name:"addr",type:"address"},{internalType:"uint256",name:"created",type:"uint256"},{internalType:"bool",name:"active",type:"bool"},{internalType:"uint256",name:"tvl",type:"uint256"},{internalType:"uint256",name:"tvlUsdc",type:"uint256"},{internalType:"address",name:"underlying",type:"address"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewardsApr",type:"uint256[]"},{internalType:"uint256",name:"ppfsApr",type:"uint256"},{internalType:"enum IStrategy.Platform",name:"platform",type:"uint8"},{internalType:"address[]",name:"assets",type:"address[]"},{internalType:"uint256",name:"earned",type:"uint256"}],internalType:"struct ContractReader.VaultInfoLight",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"vaultInfos(address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"vaultInfos",outputs:[{components:[{internalType:"address",name:"addr",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"uint256",name:"created",type:"uint256"},{internalType:"bool",name:"active",type:"bool"},{internalType:"uint256",name:"tvl",type:"uint256"},{internalType:"uint256",name:"tvlUsdc",type:"uint256"},{internalType:"uint256",name:"decimals",type:"uint256"},{internalType:"address",name:"underlying",type:"address"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewardTokensBal",type:"uint256[]"},{internalType:"uint256[]",name:"rewardTokensBalUsdc",type:"uint256[]"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256[]",name:"rewardsApr",type:"uint256[]"},{internalType:"uint256",name:"ppfsApr",type:"uint256"},{internalType:"uint256",name:"users",type:"uint256"},{internalType:"address",name:"strategy",type:"address"},{internalType:"uint256",name:"strategyCreated",type:"uint256"},{internalType:"enum IStrategy.Platform",name:"platform",type:"uint8"},{internalType:"address[]",name:"assets",type:"address[]"},{internalType:"address[]",name:"strategyRewards",type:"address[]"},{internalType:"bool",name:"strategyOnPause",type:"bool"},{internalType:"uint256",name:"earned",type:"uint256"}],internalType:"struct ContractReader.VaultInfo[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"vaultInfosLight(address[])":{inputs:[{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"vaultInfosLight",outputs:[{components:[{internalType:"address",name:"addr",type:"address"},{internalType:"uint256",name:"created",type:"uint256"},{internalType:"bool",name:"active",type:"bool"},{internalType:"uint256",name:"tvl",type:"uint256"},{internalType:"uint256",name:"tvlUsdc",type:"uint256"},{internalType:"address",name:"underlying",type:"address"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewardsApr",type:"uint256[]"},{internalType:"uint256",name:"ppfsApr",type:"uint256"},{internalType:"enum IStrategy.Platform",name:"platform",type:"uint8"},{internalType:"address[]",name:"assets",type:"address[]"},{internalType:"uint256",name:"earned",type:"uint256"}],internalType:"struct ContractReader.VaultInfoLight[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"vaultName(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultName",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"vaultPpfsApr(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultPpfsApr",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultPpfsLastApr(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultPpfsLastApr",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultRewardTokens(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultRewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"vaultRewardTokensBal(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultRewardTokensBal",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"vaultRewardTokensBalUsdc(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultRewardTokensBalUsdc",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"vaultRewardsApr(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultRewardsApr",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"vaultTvl(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultTvl",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultTvlUsdc(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultTvlUsdc",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultUnderlying(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultUnderlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaultUsers(address)":{inputs:[{internalType:"address",name:"_vault",type:"address"}],name:"vaultUsers",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"vaultWithUserInfoPages(address,uint256,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"page",type:"uint256"},{internalType:"uint256",name:"pageSize",type:"uint256"}],name:"vaultWithUserInfoPages",outputs:[{components:[{components:[{internalType:"address",name:"addr",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"uint256",name:"created",type:"uint256"},{internalType:"bool",name:"active",type:"bool"},{internalType:"uint256",name:"tvl",type:"uint256"},{internalType:"uint256",name:"tvlUsdc",type:"uint256"},{internalType:"uint256",name:"decimals",type:"uint256"},{internalType:"address",name:"underlying",type:"address"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewardTokensBal",type:"uint256[]"},{internalType:"uint256[]",name:"rewardTokensBalUsdc",type:"uint256[]"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256[]",name:"rewardsApr",type:"uint256[]"},{internalType:"uint256",name:"ppfsApr",type:"uint256"},{internalType:"uint256",name:"users",type:"uint256"},{internalType:"address",name:"strategy",type:"address"},{internalType:"uint256",name:"strategyCreated",type:"uint256"},{internalType:"enum IStrategy.Platform",name:"platform",type:"uint8"},{internalType:"address[]",name:"assets",type:"address[]"},{internalType:"address[]",name:"strategyRewards",type:"address[]"},{internalType:"bool",name:"strategyOnPause",type:"bool"},{internalType:"uint256",name:"earned",type:"uint256"}],internalType:"struct ContractReader.VaultInfo",name:"vault",type:"tuple"},{components:[{internalType:"address",name:"wallet",type:"address"},{internalType:"address",name:"vault",type:"address"},{internalType:"uint256",name:"underlyingBalance",type:"uint256"},{internalType:"uint256",name:"underlyingBalanceUsdc",type:"uint256"},{internalType:"uint256",name:"depositedUnderlying",type:"uint256"},{internalType:"uint256",name:"depositedUnderlyingUsdc",type:"uint256"},{internalType:"uint256",name:"depositedShare",type:"uint256"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewards",type:"uint256[]"},{internalType:"uint256[]",name:"rewardsUsdc",type:"uint256[]"},{internalType:"uint256[]",name:"rewardsBoost",type:"uint256[]"},{internalType:"uint256[]",name:"rewardsBoostUsdc",type:"uint256[]"}],internalType:"struct ContractReader.UserInfo",name:"user",type:"tuple"}],internalType:"struct ContractReader.VaultWithUserInfo[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"vaultWithUserInfoPagesLight(address,uint256,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"page",type:"uint256"},{internalType:"uint256",name:"pageSize",type:"uint256"}],name:"vaultWithUserInfoPagesLight",outputs:[{components:[{components:[{internalType:"address",name:"addr",type:"address"},{internalType:"uint256",name:"created",type:"uint256"},{internalType:"bool",name:"active",type:"bool"},{internalType:"uint256",name:"tvl",type:"uint256"},{internalType:"uint256",name:"tvlUsdc",type:"uint256"},{internalType:"address",name:"underlying",type:"address"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewardsApr",type:"uint256[]"},{internalType:"uint256",name:"ppfsApr",type:"uint256"},{internalType:"enum IStrategy.Platform",name:"platform",type:"uint8"},{internalType:"address[]",name:"assets",type:"address[]"},{internalType:"uint256",name:"earned",type:"uint256"}],internalType:"struct ContractReader.VaultInfoLight",name:"vault",type:"tuple"},{components:[{internalType:"uint256",name:"depositedUnderlying",type:"uint256"},{internalType:"uint256",name:"depositedUnderlyingUsdc",type:"uint256"},{internalType:"uint256",name:"depositedShare",type:"uint256"}],internalType:"struct ContractReader.UserInfoLight",name:"user",type:"tuple"}],internalType:"struct ContractReader.VaultWithUserInfoLight[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"vaultWithUserInfos(address,address[])":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"vaultWithUserInfos",outputs:[{components:[{components:[{internalType:"address",name:"addr",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"uint256",name:"created",type:"uint256"},{internalType:"bool",name:"active",type:"bool"},{internalType:"uint256",name:"tvl",type:"uint256"},{internalType:"uint256",name:"tvlUsdc",type:"uint256"},{internalType:"uint256",name:"decimals",type:"uint256"},{internalType:"address",name:"underlying",type:"address"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewardTokensBal",type:"uint256[]"},{internalType:"uint256[]",name:"rewardTokensBalUsdc",type:"uint256[]"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256[]",name:"rewardsApr",type:"uint256[]"},{internalType:"uint256",name:"ppfsApr",type:"uint256"},{internalType:"uint256",name:"users",type:"uint256"},{internalType:"address",name:"strategy",type:"address"},{internalType:"uint256",name:"strategyCreated",type:"uint256"},{internalType:"enum IStrategy.Platform",name:"platform",type:"uint8"},{internalType:"address[]",name:"assets",type:"address[]"},{internalType:"address[]",name:"strategyRewards",type:"address[]"},{internalType:"bool",name:"strategyOnPause",type:"bool"},{internalType:"uint256",name:"earned",type:"uint256"}],internalType:"struct ContractReader.VaultInfo",name:"vault",type:"tuple"},{components:[{internalType:"address",name:"wallet",type:"address"},{internalType:"address",name:"vault",type:"address"},{internalType:"uint256",name:"underlyingBalance",type:"uint256"},{internalType:"uint256",name:"underlyingBalanceUsdc",type:"uint256"},{internalType:"uint256",name:"depositedUnderlying",type:"uint256"},{internalType:"uint256",name:"depositedUnderlyingUsdc",type:"uint256"},{internalType:"uint256",name:"depositedShare",type:"uint256"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewards",type:"uint256[]"},{internalType:"uint256[]",name:"rewardsUsdc",type:"uint256[]"},{internalType:"uint256[]",name:"rewardsBoost",type:"uint256[]"},{internalType:"uint256[]",name:"rewardsBoostUsdc",type:"uint256[]"}],internalType:"struct ContractReader.UserInfo",name:"user",type:"tuple"}],internalType:"struct ContractReader.VaultWithUserInfo[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"vaultWithUserInfosLight(address,address[])":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address[]",name:"_vaults",type:"address[]"}],name:"vaultWithUserInfosLight",outputs:[{components:[{components:[{internalType:"address",name:"addr",type:"address"},{internalType:"uint256",name:"created",type:"uint256"},{internalType:"bool",name:"active",type:"bool"},{internalType:"uint256",name:"tvl",type:"uint256"},{internalType:"uint256",name:"tvlUsdc",type:"uint256"},{internalType:"address",name:"underlying",type:"address"},{internalType:"address[]",name:"rewardTokens",type:"address[]"},{internalType:"uint256[]",name:"rewardsApr",type:"uint256[]"},{internalType:"uint256",name:"ppfsApr",type:"uint256"},{internalType:"enum IStrategy.Platform",name:"platform",type:"uint8"},{internalType:"address[]",name:"assets",type:"address[]"},{internalType:"uint256",name:"earned",type:"uint256"}],internalType:"struct ContractReader.VaultInfoLight",name:"vault",type:"tuple"},{components:[{internalType:"uint256",name:"depositedUnderlying",type:"uint256"},{internalType:"uint256",name:"depositedUnderlyingUsdc",type:"uint256"},{internalType:"uint256",name:"depositedShare",type:"uint256"}],internalType:"struct ContractReader.UserInfoLight",name:"user",type:"tuple"}],internalType:"struct ContractReader.VaultWithUserInfoLight[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"vaults()":{inputs:[],name:"vaults",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"vaultsLength()":{inputs:[],name:"vaultsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/tools/ContractUtils.sol:ContractUtils":{source:"contracts/tools/ContractUtils.sol",name:"ContractUtils",title:"Utility contract for using on website UI and other integrations",author:"belbix",methods:{"erc20Balances(address[],address)":{inputs:[{internalType:"address[]",name:"tokens",type:"address[]"},{internalType:"address",name:"adr",type:"address"}],name:"erc20Balances",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"erc20BalancesForAddresses(address,address[])":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address[]",name:"_addresses",type:"address[]"}],name:"erc20BalancesForAddresses",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},"erc20Decimals(address[])":{inputs:[{internalType:"address[]",name:"tokens",type:"address[]"}],name:"erc20Decimals",outputs:[{internalType:"uint8[]",name:"",type:"uint8[]"}],stateMutability:"view",type:"function"},"erc20Names(address[])":{inputs:[{internalType:"address[]",name:"tokens",type:"address[]"}],name:"erc20Names",outputs:[{internalType:"string[]",name:"",type:"string[]"}],stateMutability:"view",type:"function"},"erc20Symbols(address[])":{inputs:[{internalType:"address[]",name:"tokens",type:"address[]"}],name:"erc20Symbols",outputs:[{internalType:"string[]",name:"",type:"string[]"}],stateMutability:"view",type:"function"},"erc20TotalSupply(address[])":{inputs:[{internalType:"address[]",name:"tokens",type:"address[]"}],name:"erc20TotalSupply",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"}}},"contracts/tools/Multicall.sol:Multicall":{source:"contracts/tools/Multicall.sol",name:"Multicall",title:"Multicall - Aggregate results from multiple read-only function calls",author:"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",methods:{"aggregate((address,bytes)[])":{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall.Call[]",name:"calls",type:"tuple[]"}],name:"aggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes[]",name:"returnData",type:"bytes[]"}],stateMutability:"nonpayable",type:"function"},"getBlockHash(uint256)":{inputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"}],name:"getBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"},"getCurrentBlockCoinbase()":{inputs:[],name:"getCurrentBlockCoinbase",outputs:[{internalType:"address",name:"coinbase",type:"address"}],stateMutability:"view",type:"function"},"getCurrentBlockDifficulty()":{inputs:[],name:"getCurrentBlockDifficulty",outputs:[{internalType:"uint256",name:"difficulty",type:"uint256"}],stateMutability:"view",type:"function"},"getCurrentBlockGasLimit()":{inputs:[],name:"getCurrentBlockGasLimit",outputs:[{internalType:"uint256",name:"gaslimit",type:"uint256"}],stateMutability:"view",type:"function"},"getCurrentBlockTimestamp()":{inputs:[],name:"getCurrentBlockTimestamp",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"},"getEthBalance(address)":{inputs:[{internalType:"address",name:"addr",type:"address"}],name:"getEthBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},"getLastBlockHash()":{inputs:[],name:"getLastBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"}}},"contracts/tools/PawnShopReader.sol:PawnShopReader":{source:"contracts/tools/PawnShopReader.sol",name:"PawnShopReader",title:"View data reader for using on website UI and other integrations",author:"belbix",events:{"ToolAddressUpdated(string,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"name",type:"string"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"ToolAddressUpdated",type:"event"},"UpdateController(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldValue",type:"address"},{indexed:!1,internalType:"address",name:"newValue",type:"address"}],name:"UpdateController",type:"event",notice:"Controller address changed"}},methods:{"PRECISION()":{inputs:[],name:"PRECISION",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"VERSION()":{inputs:[],name:"VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"auctionBids(uint256,uint256)":{inputs:[{internalType:"uint256",name:"from",type:"uint256"},{internalType:"uint256",name:"to",type:"uint256"}],name:"auctionBids",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"posId",type:"uint256"},{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"}],internalType:"struct ITetuPawnShop.AuctionBid[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"borrowerPositions(address,uint256,uint256)":{inputs:[{internalType:"address",name:"borrower",type:"address"},{internalType:"uint256",name:"from",type:"uint256"},{internalType:"uint256",name:"to",type:"uint256"}],name:"borrowerPositions",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address",name:"borrower",type:"address"},{internalType:"address",name:"depositToken",type:"address"},{internalType:"uint256",name:"depositAmount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"},{components:[{internalType:"uint256",name:"posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"posFee",type:"uint256"},{internalType:"uint256",name:"createdBlock",type:"uint256"},{internalType:"uint256",name:"createdTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionInfo",name:"info",type:"tuple"},{components:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"enum ITetuPawnShop.AssetType",name:"collateralType",type:"uint8"},{internalType:"uint256",name:"collateralAmount",type:"uint256"},{internalType:"uint256",name:"collateralTokenId",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionCollateral",name:"collateral",type:"tuple"},{components:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"acquiredAmount",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionAcquired",name:"acquired",type:"tuple"},{components:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posStartBlock",type:"uint256"},{internalType:"uint256",name:"posStartTs",type:"uint256"},{internalType:"uint256",name:"posEndTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionExecution",name:"execution",type:"tuple"}],internalType:"struct ITetuPawnShop.Position[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"controller()":{inputs:[],name:"controller",outputs:[{internalType:"address",name:"adr",type:"address"}],stateMutability:"view",type:"function",returns:{adr:"Controller address"},notice:"Return controller address saved in the contract slot"},"created()":{inputs:[],name:"created",outputs:[{internalType:"uint256",name:"ts",type:"uint256"}],stateMutability:"view",type:"function",returns:{ts:"Creation timestamp"},notice:"Return creation timestamp"},"getPrice(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"getPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize(address,address,address)":{inputs:[{internalType:"address",name:"_controller",type:"address"},{internalType:"address",name:"_calculator",type:"address"},{internalType:"address",name:"_pawnshop",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"initializeControllable(address)":{inputs:[{internalType:"address",name:"_controller",type:"address"}],name:"initializeControllable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use it only once after first logic setup",params:{_controller:"Controller address"},notice:'Initialize contract after setup it as proxy implementation         Save block.timestamp in the "created" variable'},"isController(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isController",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isGovernance(address)":{inputs:[{internalType:"address",name:"_adr",type:"address"}],name:"isGovernance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_adr:"Address for check"},returns:{_0:"true if given address is governance"},notice:"Return true is given address is setup as governance in Controller"},"lenderAuctionBid(address,uint256)":{inputs:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posId",type:"uint256"}],name:"lenderAuctionBid",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"posId",type:"uint256"},{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"}],internalType:"struct ITetuPawnShop.AuctionBid",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"lenderPositions(address,uint256,uint256)":{inputs:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"from",type:"uint256"},{internalType:"uint256",name:"to",type:"uint256"}],name:"lenderPositions",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address",name:"borrower",type:"address"},{internalType:"address",name:"depositToken",type:"address"},{internalType:"uint256",name:"depositAmount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"},{components:[{internalType:"uint256",name:"posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"posFee",type:"uint256"},{internalType:"uint256",name:"createdBlock",type:"uint256"},{internalType:"uint256",name:"createdTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionInfo",name:"info",type:"tuple"},{components:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"enum ITetuPawnShop.AssetType",name:"collateralType",type:"uint8"},{internalType:"uint256",name:"collateralAmount",type:"uint256"},{internalType:"uint256",name:"collateralTokenId",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionCollateral",name:"collateral",type:"tuple"},{components:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"acquiredAmount",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionAcquired",name:"acquired",type:"tuple"},{components:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posStartBlock",type:"uint256"},{internalType:"uint256",name:"posStartTs",type:"uint256"},{internalType:"uint256",name:"posEndTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionExecution",name:"execution",type:"tuple"}],internalType:"struct ITetuPawnShop.Position[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"openPositions(uint256,uint256)":{inputs:[{internalType:"uint256",name:"from",type:"uint256"},{internalType:"uint256",name:"to",type:"uint256"}],name:"openPositions",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address",name:"borrower",type:"address"},{internalType:"address",name:"depositToken",type:"address"},{internalType:"uint256",name:"depositAmount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"},{components:[{internalType:"uint256",name:"posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"posFee",type:"uint256"},{internalType:"uint256",name:"createdBlock",type:"uint256"},{internalType:"uint256",name:"createdTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionInfo",name:"info",type:"tuple"},{components:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"enum ITetuPawnShop.AssetType",name:"collateralType",type:"uint8"},{internalType:"uint256",name:"collateralAmount",type:"uint256"},{internalType:"uint256",name:"collateralTokenId",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionCollateral",name:"collateral",type:"tuple"},{components:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"acquiredAmount",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionAcquired",name:"acquired",type:"tuple"},{components:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posStartBlock",type:"uint256"},{internalType:"uint256",name:"posStartTs",type:"uint256"},{internalType:"uint256",name:"posEndTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionExecution",name:"execution",type:"tuple"}],internalType:"struct ITetuPawnShop.Position[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"pawnshop()":{inputs:[],name:"pawnshop",outputs:[{internalType:"contract ITetuPawnShop",name:"",type:"address"}],stateMutability:"view",type:"function"},"positionAuctionBids(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"posId",type:"uint256"},{internalType:"uint256",name:"from",type:"uint256"},{internalType:"uint256",name:"to",type:"uint256"}],name:"positionAuctionBids",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"posId",type:"uint256"},{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"}],internalType:"struct ITetuPawnShop.AuctionBid[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"positions(uint256,uint256)":{inputs:[{internalType:"uint256",name:"from",type:"uint256"},{internalType:"uint256",name:"to",type:"uint256"}],name:"positions",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address",name:"borrower",type:"address"},{internalType:"address",name:"depositToken",type:"address"},{internalType:"uint256",name:"depositAmount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"},{components:[{internalType:"uint256",name:"posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"posFee",type:"uint256"},{internalType:"uint256",name:"createdBlock",type:"uint256"},{internalType:"uint256",name:"createdTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionInfo",name:"info",type:"tuple"},{components:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"enum ITetuPawnShop.AssetType",name:"collateralType",type:"uint8"},{internalType:"uint256",name:"collateralAmount",type:"uint256"},{internalType:"uint256",name:"collateralTokenId",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionCollateral",name:"collateral",type:"tuple"},{components:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"acquiredAmount",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionAcquired",name:"acquired",type:"tuple"},{components:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posStartBlock",type:"uint256"},{internalType:"uint256",name:"posStartTs",type:"uint256"},{internalType:"uint256",name:"posEndTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionExecution",name:"execution",type:"tuple"}],internalType:"struct ITetuPawnShop.Position[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"positionsByAcquired(address,uint256,uint256)":{inputs:[{internalType:"address",name:"acquired",type:"address"},{internalType:"uint256",name:"from",type:"uint256"},{internalType:"uint256",name:"to",type:"uint256"}],name:"positionsByAcquired",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address",name:"borrower",type:"address"},{internalType:"address",name:"depositToken",type:"address"},{internalType:"uint256",name:"depositAmount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"},{components:[{internalType:"uint256",name:"posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"posFee",type:"uint256"},{internalType:"uint256",name:"createdBlock",type:"uint256"},{internalType:"uint256",name:"createdTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionInfo",name:"info",type:"tuple"},{components:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"enum ITetuPawnShop.AssetType",name:"collateralType",type:"uint8"},{internalType:"uint256",name:"collateralAmount",type:"uint256"},{internalType:"uint256",name:"collateralTokenId",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionCollateral",name:"collateral",type:"tuple"},{components:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"acquiredAmount",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionAcquired",name:"acquired",type:"tuple"},{components:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posStartBlock",type:"uint256"},{internalType:"uint256",name:"posStartTs",type:"uint256"},{internalType:"uint256",name:"posEndTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionExecution",name:"execution",type:"tuple"}],internalType:"struct ITetuPawnShop.Position[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"positionsByCollateral(address,uint256,uint256)":{inputs:[{internalType:"address",name:"collateral",type:"address"},{internalType:"uint256",name:"from",type:"uint256"},{internalType:"uint256",name:"to",type:"uint256"}],name:"positionsByCollateral",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address",name:"borrower",type:"address"},{internalType:"address",name:"depositToken",type:"address"},{internalType:"uint256",name:"depositAmount",type:"uint256"},{internalType:"bool",name:"open",type:"bool"},{components:[{internalType:"uint256",name:"posDurationBlocks",type:"uint256"},{internalType:"uint256",name:"posFee",type:"uint256"},{internalType:"uint256",name:"createdBlock",type:"uint256"},{internalType:"uint256",name:"createdTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionInfo",name:"info",type:"tuple"},{components:[{internalType:"address",name:"collateralToken",type:"address"},{internalType:"enum ITetuPawnShop.AssetType",name:"collateralType",type:"uint8"},{internalType:"uint256",name:"collateralAmount",type:"uint256"},{internalType:"uint256",name:"collateralTokenId",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionCollateral",name:"collateral",type:"tuple"},{components:[{internalType:"address",name:"acquiredToken",type:"address"},{internalType:"uint256",name:"acquiredAmount",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionAcquired",name:"acquired",type:"tuple"},{components:[{internalType:"address",name:"lender",type:"address"},{internalType:"uint256",name:"posStartBlock",type:"uint256"},{internalType:"uint256",name:"posStartTs",type:"uint256"},{internalType:"uint256",name:"posEndTs",type:"uint256"}],internalType:"struct ITetuPawnShop.PositionExecution",name:"execution",type:"tuple"}],internalType:"struct ITetuPawnShop.Position[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},"priceCalculator()":{inputs:[],name:"priceCalculator",outputs:[{internalType:"contract IPriceCalculator",name:"",type:"address"}],stateMutability:"view",type:"function"},"setPawnShop(address)":{inputs:[{internalType:"address",name:"newValue",type:"address"}],name:"setPawnShop",outputs:[],stateMutability:"nonpayable",type:"function"},"setPriceCalculator(address)":{inputs:[{internalType:"address",name:"newValue",type:"address"}],name:"setPriceCalculator",outputs:[],stateMutability:"nonpayable",type:"function"}}}},wt=new je({routes:[{path:"/",component:gt,props:()=>({json:ht})},{path:"*",component:mt,props:e=>({json:ht[e.path.slice(1)]})}]});new a.a({el:"#app",router:wt,mounted(){document.dispatchEvent(new Event("render-event"))},render:e=>e(Xe)})},function(e,t,n){"use strict";function a(e,t){for(var n=[],a={},i=0;i<t.length;i++){var s=t[i],r=s[0],o={id:e+":"+i,css:s[1],media:s[2],sourceMap:s[3]};a[r]?a[r].parts.push(o):n.push(a[r]={id:r,parts:[o]})}return n}n.r(t),n.d(t,"default",(function(){return c}));var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},r=i&&(document.head||document.getElementsByTagName("head")[0]),o=null,u=0,p=!1,l=function(){},d=null,y="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function c(e,t,n,i){p=n,d=i||{};var r=a(e,t);return m(r),function(t){for(var n=[],i=0;i<r.length;i++){var o=r[i];(u=s[o.id]).refs--,n.push(u)}t?m(r=a(e,t)):r=[];for(i=0;i<n.length;i++){var u;if(0===(u=n[i]).refs){for(var p=0;p<u.parts.length;p++)u.parts[p]();delete s[u.id]}}}}function m(e){for(var t=0;t<e.length;t++){var n=e[t],a=s[n.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](n.parts[i]);for(;i<n.parts.length;i++)a.parts.push(T(n.parts[i]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{var r=[];for(i=0;i<n.parts.length;i++)r.push(T(n.parts[i]));s[n.id]={id:n.id,refs:1,parts:r}}}}function f(){var e=document.createElement("style");return e.type="text/css",r.appendChild(e),e}function T(e){var t,n,a=document.querySelector('style[data-vue-ssr-id~="'+e.id+'"]');if(a){if(p)return l;a.parentNode.removeChild(a)}if(y){var i=u++;a=o||(o=f()),t=g.bind(null,a,i,!1),n=g.bind(null,a,i,!0)}else a=f(),t=h.bind(null,a),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){if(a){if(a.css===e.css&&a.media===e.media&&a.sourceMap===e.sourceMap)return;t(e=a)}else n()}}var b,v=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function g(e,t,n,a){var i=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=v(t,i);else{var s=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function h(e,t){var n=t.css,a=t.media,i=t.sourceMap;if(a&&e.setAttribute("media",a),d.ssrId&&e.setAttribute("data-vue-ssr-id",t.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}]);